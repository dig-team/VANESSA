{"text": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James has lunch in the company?", "id": "0", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: All employees who schedule a meeting with their customers will appear in the company today.\nPremise 1.2: Everyone who has lunch in the company schedules meetings with their customers.\nConclusion 1: James has lunch in the company if and only if James schedules a meeting with his customers.\nPremise 2.1: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nPremise 2.2: No managers work remotely from home.\nPremise 2.3: If an employee has lunch at home, then he/she is working remotely from home.\nPremise 2.4: All employees who are in other countries work remotely from home.\nConclusion 2: James doesn't work remotely from home.\nConclusion 3: James appears in the company today.\nConclusion 4: James is not a manager.\nConclusion 5: James schedules a meeting with his customers.\nConclusion 6: James has lunch in the company.\nAnswer: A. Yes.", "logic_premises": "[[((5→6)∪(7→8)), ((9→a)∪(b→c))], [(0⊻(1∧2)), ((b→c)∪(d→e)), (((f∧g)→h)∪((i∧j)→k)), ((l→m)∪(n→o))]]", "logic_conclusion": "[4, a]", "correspondance": [{"0": "X is an employee who schedules a meeting with their customers .", "1": "X will appear in the company today .", "2": "X is a person who has lunch in the company .", "3": "X schedules meetings with their customers .", "4": "James has lunch in the company that James schedules a meeting with James 's customers .", "5": "James is an employee who schedules a meeting with their customers .", "6": "James will appear in the company today .", "7": "the company is an employee who schedules a meeting with their customers .", "8": "the company will appear in the company today .", "9": "James is a person who has lunch in the company .", "a": "James schedules meetings with their customers .", "b": "the company is a person who has lunch in the company .", "c": "the company schedules meetings with their customers ."}, {"0": "James is a manager and appears in the company today .", "1": "James is neither a manager .", "2": "James is today .", "3": "X is a manager .", "4": "X does not work remotely from home .", "5": "X is an employee", "6": "X has lunch at home .", "7": "X is working remotely from home .", "8": "X is an employee who is in other a country .", "9": "X works remotely from home .", "a": "James does n't work remotely from home .", "b": "James is a manager .", "c": "James does not work remotely from home .", "d": "the company is a manager .", "e": "the company does not work remotely from home .", "f": "James is an employee", "g": "James has lunch at home .", "h": "James is working remotely from home .", "i": "the company is an employee", "j": "the company has lunch at home .", "k": "the company is working remotely from home .", "l": "James is an employee who is in other a country .", "m": "James works remotely from home .", "n": "the company is an employee who is in other a country .", "o": "the company works remotely from home ."}], "errors": [[]], "entailments_dict": [{}, {"e": ["(¬o)"], "o": ["(¬e)"], "m": ["(¬c)"], "c": ["(¬m)"]}], "predicted_steps": [false, false]}
{"text": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Bonnie performs in school talent shows often?", "id": "1", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: People either perform in school talent shows often or are inactive and disinterested members of their community.\nPremise 1.2: All people who are inactive and disinterested members of their community chaperone high school dances.\nPremise 1.3: Bonnie chaperones high school dances.\nConclusion 1: Bonnie is an inactive and disinterested member of her community.\nPremise 2.1: Bonnie is an inactive and disinterested member of her community.\nPremise 2.2: People either perform in school talent shows often or are inactive and disinterested members of their community.\nConclusion 2: Bonnie does not perform in school talent shows often.\nPremise 3.1: Bonnie does not perform in school talent shows often.\nAnswer: B. No.\n\nNote: The conclusion is based on the premises, and the answer is based on the conclusion. The answer is not directly derived from the passage, but rather from the reasoning process that uses the information from the passage.", "logic_premises": "[[(a→(b∨(c∧d))), ((e∧f)→g), 7], [(0∧1), (7→(8∨(9∧a)))]]", "logic_conclusion": "[(8∧9), 6]", "correspondance": [{"0": "X is a person .", "1": "X either performs in school talent shows often .", "2": "X either is inactive a member of people 's community .", "3": "X either is disinterested a member of people 's community .", "4": "X is a person who is inactive a member of their community .", "5": "X is a person who is disinterested a member of their community .", "6": "X chaperones high school dances .", "7": "Bonnie chaperones high school dances .", "8": "Bonnie is an inactive member of Bonnie 's community .", "9": "Bonnie is an disinterested member of Bonnie 's community .", "a": "Bonnie is a person .", "b": "Bonnie either performs in school talent shows often .", "c": "Bonnie either is inactive a member of people 's community .", "d": "Bonnie either is disinterested a member of people 's community .", "e": "Bonnie is a person who is inactive a member of their community .", "f": "Bonnie is a person who is disinterested a member of their community .", "g": "Bonnie chaperones high school dances ."}, {"0": "Bonnie is an inactive member of Bonnie 's community .", "1": "Bonnie is an disinterested member of Bonnie 's community .", "2": "X is a person .", "3": "X either performs in school talent shows often .", "4": "X either is inactive a member of People 's community .", "5": "X either is disinterested a member of People 's community .", "6": "Bonnie does not perform in school talent shows often .", "7": "Bonnie is a person .", "8": "Bonnie either performs in school talent shows often .", "9": "Bonnie either is inactive a member of People 's community .", "a": "Bonnie either is disinterested a member of People 's community ."}], "errors": [[]], "entailments_dict": [{"g": ["7"]}, {}], "predicted_steps": [false, false]}
{"text": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community?", "id": "2", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: People either perform in school talent shows often or are inactive and disinterested members of their community.\nPremise 1.2: People who chaperone high school dances are not students who attend the school.\nPremise 1.3: All people who are inactive and disinterested members of their community chaperone high school dances.\nPremise 1.4: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nPremise 1.5: Bonnie is either both a student who attends the school and attends and is very engaged with school events, or she is neither.\nConclusion 1: Bonnie is a student who attends the school if and only if she attends and is very engaged with school events.\nPremise 2.1: Bonnie is either a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or she is neither a young child nor teenager who wishes to further her academic career and educational opportunities.\nConclusion 2: Bonnie chaperones high school dances if and only if she is not a young child or teenager who wishes to further her academic career and educational opportunities.\nPremise 3.1: If Bonnie chaperones high school dances, then she is not a student who attends the school.\nPremise 3.2: If Bonnie is not a student who attends the school, then she is an inactive and disinterested member of the community.\nConclusion 3: Bonnie is an inactive and disinterested member of the community if and only if she chaperones high school dances.\nPremise 4.1: Bonnie is a student who attends the school if and only if she attends and is very engaged with school events.\nPremise 4.2: Bonnie is an inactive and disinterested member of the community if and only if she chaperones high school dances.\nConclusion 4: Bonnie is either a student who attends the school or an inactive and disinterested member of the community if and only if she attends and is very engaged with school events or she does not chaperone high school dances.\nAnswer: A. Yes.", "logic_premises": "[[((h→(i∨(j∧k)))∪(l→(m∨(n∧o)))), ((p→q)∪(r→s)), (((t∧u)→v)∪((w∧x)→y)), ((((z∧A)∧(B∧C))→D)∪(((E∧F)∧(G∧H))→I)), (e⊻f)], [(((0∨1)∧(2∨3))⊻((4∧5)∧(6∧7)))], [(0→1), (2→(3∧4))], [0, 1]]", "logic_conclusion": "[g, ((8∨9)∧(a∨b)), 5, ((2∧3)∨4)]", "correspondance": [{"0": "X is a person .", "1": "X either performs in school talent shows often .", "2": "X either is inactive a member of people 's community .", "3": "X either is disinterested a member of people 's community .", "4": "X is a person who chaperones high school dances .", "5": "X is not a student who attends the school .", "6": "X is a person who is inactive a member of their community .", "7": "X is a person who is disinterested a member of their community .", "8": "X chaperones high school dances .", "9": "X is a a young child who wishes to furthers their academic careers .", "a": "X is a a young teenager who wishes to furthers their academic careers .", "b": "X is a a young child who wishes to furthers their educational opportunities .", "c": "X is a a young teenager who wishes to furthers their educational opportunities .", "d": "X is a student who attends the school .", "e": "Bonnie is both a student who attends the school and attends and is very engaged with school events .", "f": "Bonnie is neither .", "g": "Bonnie is a student who attends the school if and only if Bonnie attends and is very engaged with school events .", "h": "the school is a person .", "i": "the school either performs in school talent shows often .", "j": "the school either is inactive a member of people 's community .", "k": "the school either is disinterested a member of people 's community .", "l": "Bonnie is a person .", "m": "Bonnie either performs in school talent shows often .", "n": "Bonnie either is inactive a member of people 's community .", "o": "Bonnie either is disinterested a member of people 's community .", "p": "the school is a person who chaperones high school dances .", "q": "the school is not a student who attends the school .", "r": "Bonnie is a person who chaperones high school dances .", "s": "Bonnie is not a student who attends the school .", "t": "the school is a person who is inactive a member of their community .", "u": "the school is a person who is disinterested a member of their community .", "v": "the school chaperones high school dances .", "w": "Bonnie is a person who is inactive a member of their community .", "x": "Bonnie is a person who is disinterested a member of their community .", "y": "Bonnie chaperones high school dances .", "z": "the school is a a young child who wishes to furthers their academic careers .", "A": "the school is a a young teenager who wishes to furthers their academic careers .", "B": "the school is a a young child who wishes to furthers their educational opportunities .", "C": "the school is a a young teenager who wishes to furthers their educational opportunities .", "D": "the school is a student who attends the school .", "E": "Bonnie is a a young child who wishes to furthers their academic careers .", "F": "Bonnie is a a young teenager who wishes to furthers their academic careers .", "G": "Bonnie is a a young child who wishes to furthers their educational opportunities .", "H": "Bonnie is a a young teenager who wishes to furthers their educational opportunities .", "I": "Bonnie is a student who attends the school ."}, {"0": "Bonnie is a young child who wishes to further Bonnie 's academic career and chaperones high school dances .", "1": "Bonnie is a young teenager who wishes to further Bonnie 's academic career and chaperones high school dances .", "2": "Bonnie is a young child who wishes to further Bonnie 's educational opportunities and chaperones high school dances .", "3": "Bonnie is a young teenager who wishes to further Bonnie 's educational opportunities and chaperones high school dances .", "4": "Bonnie is neither a young child who wishes to further Bonnie 's academic career .", "5": "Bonnie is not neither a young teenager who wishes to further Bonnie 's academic career .", "6": "Bonnie is neither a young child who wishes to further Bonnie 's educational opportunities .", "7": "Bonnie is not neither a young teenager who wishes to further Bonnie 's educational opportunities .", "8": "Bonnie chaperones high school dances that Bonnie is not a young child who wishes to further Bonnie 's academic career .", "9": "Bonnie chaperones high school dances that Bonnie is not a young teenager who wishes to further Bonnie 's academic career .", "a": "Bonnie chaperones high school dances that Bonnie is not a young child who wishes to further Bonnie 's educational opportunities .", "b": "Bonnie chaperones high school dances that Bonnie is not a young teenager who wishes to further Bonnie 's educational opportunities ."}, {"0": "Bonnie chaperones high school dances .", "1": "Bonnie is not a student who attends the school .", "2": "Bonnie is not a student who attends the school .", "3": "Bonnie is an inactive member of the community .", "4": "Bonnie is an disinterested member of the community .", "5": "Bonnie is an inactive member of the community . Bonnie is an disinterested member of the community that Bonnie chaperones high school dances ."}, {"0": "Bonnie is a student who attends the school if and only if Bonnie attends and is very engaged with school events .", "1": "Bonnie is an inactive member of the community . Bonnie is an disinterested member of the community that Bonnie chaperones high school dances .", "2": "Bonnie is a student who attends the school . Bonnie is an inactive member of the community . Bonnie is an disinterested member of the community that Bonnie attends .", "3": "Bonnie is a student who attends the school . Bonnie is an inactive member of the community . Bonnie is an disinterested member of the community that Bonnie is very engaged with school events .", "4": "Bonnie is a student who attends the school . Bonnie is an inactive member of the community . Bonnie is an disinterested member of the community that Bonnie does not chaperone high school dances ."}], "errors": [[]], "entailments_dict": [{"q": ["(¬D)"], "D": ["(¬q)"], "I": ["(¬s)"], "s": ["(¬I)"]}, {}, {"1": ["2"]}, {}], "predicted_steps": [false, false, false, false]}
{"text": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community?", "id": "3", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: People either perform in school talent shows often or are inactive and disinterested members of their community.\nPremise 1.2: If people perform in school talent shows often, then they attend and are very engaged with school events.\nPremise 1.3: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nPremise 1.4: If people chaperone high school dances, then they are not students who attend the school.\nPremise 1.5: All people who are inactive and disinterested members of their community chaperone high school dances.\nPremise 1.6: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nPremise 2.1: If Bonnie chaperones high school dances, then she is not a student who attends the school.\nPremise 2.2: If Bonnie is not a student who attends the school, then she is an inactive and disinterested member of the community.\nPremise 2.3: If Bonnie is not an inactive and disinterested member of the community, then she attends and is very engaged with school events.\nPremise 2.4: If Bonnie attends and is very engaged with school events, then she is a student who attends the school.\nPremise 2.5: If Bonnie is a student who attends the school, then she is a young child or teenager who wishes to further her academic career and educational opportunities.\nConclusion 1: If Bonnie chaperones high school dances, then she is an inactive and disinterested member of the community.\nConclusion 2: If Bonnie does not chaperone high school dances, then she is a young child or teenager who wishes to further her academic career and educational opportunities.\nConclusion 3: If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is an inactive and disinterested member of the community or a young child or teenager who wishes to further her academic career and educational opportunities.\nAnswer: B. No.\n\nExplanation:\n\n* The passage states that people who chaperone high school dances are not students who attend the school, and all inactive and disinterested members of the community chaperone high school dances.\n* However, the passage also states that all young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n* Therefore, it is not possible for Bonnie to be both an inactive and disinterested member of the community and a young child or teenager who wishes to further her academic career and educational opportunities at the same time.\n* The conclusion that Bonnie is both an inactive and disinterested member of the community and a young child or teenager who wishes to further her academic career and educational opportunities is not possible based on the information provided in the passage.", "logic_premises": "[[((H→(I∨(J∧K)))∪((L→(M∨(N∧O)))∪(P→(Q∨(R∧S))))), ((T→(U∧V))∪((W→(X∧Y))∪(Z→(!∧\")))), (((7∧8)∧9)⊻((a∨b)∧c)), ((#→$)∪((%→&)∪(*→+))), (((,∧-)→.)∪(((/∧:)→;)∪((<∧=)→>))), ((((?∧@)∧([∧\\))→])∪((((^∧_)∧(`∧{))→|)∪(((}∧~)∧(È∧É))→Ê))), (n→o), (p→(q∧r)), ((s∧t)→(u∧v)), ((w∧x)→y), (z→((A∨B)∧(C∨D)))]]", "logic_conclusion": "[(E→(F∧G))]", "correspondance": [{"0": "X is a person .", "1": "X either performs in school talent shows often .", "2": "X either is inactive a member of people 's community .", "3": "X either is disinterested a member of people 's community .", "4": "X perform in school talent shows often .", "5": "X attend .", "6": "X are very engaged with school events .", "7": "Bonnie attends .", "8": "Bonnie is very engaged with school events .", "9": "Bonnie is a student who attends the school .", "a": "Bonnie does not attend .", "b": "Bonnie is not very engaged with school events .", "c": "Bonnie is not a student who attends the school .", "d": "X chaperone high school dances .", "e": "X are not students who attend the school .", "f": "X is a person who is inactive a member of their community .", "g": "X is a person who is disinterested a member of their community .", "h": "X chaperones high school dances .", "i": "X is a a young child who wishes to furthers their academic careers .", "j": "X is a a young teenager who wishes to furthers their academic careers .", "k": "X is a a young child who wishes to furthers their educational opportunities .", "l": "X is a a young teenager who wishes to furthers their educational opportunities .", "m": "X is a student who attends the school .", "n": "Bonnie chaperones high school dances .", "o": "Bonnie is not a student who attends the school .", "p": "Bonnie is not a student who attends the school .", "q": "Bonnie is an inactive member of the community .", "r": "Bonnie is an disinterested member of the community .", "s": "Bonnie is not an inactive member of the community .", "t": "Bonnie is not an disinterested member of the community .", "u": "Bonnie attends school events .", "v": "Bonnie is very engaged with school events .", "w": "Bonnie attends .", "x": "Bonnie is very engaged with school events .", "y": "Bonnie is a student who attends the school .", "z": "Bonnie is a student who attends the school .", "A": "Bonnie is a young child who wishes to further her academic career .", "B": "Bonnie is a young teenager who wishes to further her academic career .", "C": "Bonnie is a young child who wishes to further her educational opportunities .", "D": "Bonnie is a young teenager who wishes to further her educational opportunities .", "E": "Bonnie chaperones high school dances .", "F": "Bonnie is an inactive member of the community .", "G": "Bonnie is an disinterested member of the community .", "H": "the school is a person .", "I": "the school either performs in school talent shows often .", "J": "the school either is inactive a member of people 's community .", "K": "the school either is disinterested a member of people 's community .", "L": "the community is a person .", "M": "the community either performs in school talent shows often .", "N": "the community either is inactive a member of people 's community .", "O": "the community either is disinterested a member of people 's community .", "P": "Bonnie is a person .", "Q": "Bonnie either performs in school talent shows often .", "R": "Bonnie either is inactive a member of people 's community .", "S": "Bonnie either is disinterested a member of people 's community .", "T": "the school perform in school talent shows often .", "U": "the school attend .", "V": "the school are very engaged with school events .", "W": "the community perform in school talent shows often .", "X": "the community attend .", "Y": "the community are very engaged with school events .", "Z": "Bonnie perform in school talent shows often .", "!": "Bonnie attend .", "\"": "Bonnie are very engaged with school events .", "#": "the school chaperone high school dances .", "$": "the school are not students who attend the school .", "%": "the community chaperone high school dances .", "&": "the community are not students who attend the school .", "*": "Bonnie chaperone high school dances .", "+": "Bonnie are not students who attend the school .", ",": "the school is a person who is inactive a member of their community .", "-": "the school is a person who is disinterested a member of their community .", ".": "the school chaperones high school dances .", "/": "the community is a person who is inactive a member of their community .", ":": "the community is a person who is disinterested a member of their community .", ";": "the community chaperones high school dances .", "<": "Bonnie is a person who is inactive a member of their community .", "=": "Bonnie is a person who is disinterested a member of their community .", ">": "Bonnie chaperones high school dances .", "?": "the school is a a young child who wishes to furthers their academic careers .", "@": "the school is a a young teenager who wishes to furthers their academic careers .", "[": "the school is a a young child who wishes to furthers their educational opportunities .", "\\": "the school is a a young teenager who wishes to furthers their educational opportunities .", "]": "the school is a student who attends the school .", "^": "the community is a a young child who wishes to furthers their academic careers .", "_": "the community is a a young teenager who wishes to furthers their academic careers .", "`": "the community is a a young child who wishes to furthers their educational opportunities .", "{": "the community is a a young teenager who wishes to furthers their educational opportunities .", "|": "the community is a student who attends the school .", "}": "Bonnie is a a young child who wishes to furthers their academic careers .", "~": "Bonnie is a a young teenager who wishes to furthers their academic careers .", "È": "Bonnie is a a young child who wishes to furthers their educational opportunities .", "É": "Bonnie is a a young teenager who wishes to furthers their educational opportunities .", "Ê": "Bonnie is a student who attends the school ."}], "errors": [[]], "entailments_dict": [{"!": ["w", "7", "(¬a)"], "v": ["8", "x", "(¬b)"], "\"": ["8", "x", "(¬b)"], "Ê": ["z", "9", "(¬+)", "(¬o)", "(¬c)"], "o": ["p", "c", "(¬y)", "(¬9)", "(¬Ê)"], "+": ["p", "c", "(¬9)", "(¬Ê)", "(¬y)"], ">": ["n"], "7": ["w", "(¬a)"], "y": ["9", "z", "(¬+)", "(¬o)", "(¬c)"], "9": ["z", "(¬+)", "(¬o)", "(¬c)"], "c": ["p", "(¬y)", "(¬Ê)"], "8": ["x", "(¬b)"], "E": ["n"], "q": ["F"], "r": ["G"], "a": ["(¬!)"], "b": ["(¬\")", "(¬v)"], "|": ["(¬&)"], "$": ["(¬])"], "]": ["(¬$)"], "&": ["(¬|)"], "(¬F)": ["s"], "(¬G)": ["t"], "(¬w)": ["a"], "(¬z)": ["c", "p"], "(¬9)": ["p"], "(¬p)": ["9", "z"], "(¬a)": ["w"], "(¬b)": ["x"], "(¬x)": ["b"], "(¬c)": ["z"]}], "predicted_steps": [false]}
{"text": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James does not have lunch in the company?", "id": "4", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Everyone who has lunch in the company schedules meetings with their customers.\nPremise 1.2: All employees who schedule a meeting with their customers will appear in the company today.\nConclusion 1: If an employee has lunch in the company, then he/she will appear in the company today.\nPremise 2.1: Employees will either have lunch in the company or have lunch at home.\nPremise 2.2: If an employee has lunch at home, then he/she is working remotely from home.\nPremise 2.3: No managers work remotely from home.\nConclusion 2: James, if a manager, will not have lunch at home.\nPremise 3.1: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nPremise 3.2: James appears in the company today.\nConclusion 3: James is not a manager.\nPremise 4.1: James is not a manager.\nPremise 4.2: If James is not a manager, then he can have lunch at home.\nPremise 4.3: If James has lunch at home, then he does not have lunch in the company.\nConclusion 4: James does not have lunch in the company.\nAnswer: A. Yes.", "logic_premises": "[[(0→1), (2→3)], [((9→(a⊻b))∪(c→(d⊻e))), (((f∧g)→h)∪((i∧j)→k)), ((l→m)∪(n→o))], [(0⊻(1∧2)), 3], [0, (1→2), (3→4)]]", "logic_conclusion": "[((4∧5)→6), 8, 4, 5]", "correspondance": [{"0": "X is a person who has lunch in the company .", "1": "X schedules meetings with their customers .", "2": "X is an employee who schedules a meeting with their customers .", "3": "X will appear in the company today .", "4": "X is an employee", "5": "X has lunch in the company .", "6": "X will appear in the company today ."}, {"0": "X is an Employee .", "1": "X will have lunch in the company .", "2": "X will have lunch at home .", "3": "X is an employee", "4": "X has lunch at home .", "5": "X is working remotely from home .", "6": "X is a manager .", "7": "X does not work remotely from home .", "8": "James , if a manager , will not have lunch at home .", "9": "James is an Employee .", "a": "James will have lunch in the company .", "b": "James will have lunch at home .", "c": "the company is an Employee .", "d": "the company will have lunch in the company .", "e": "the company will have lunch at home .", "f": "James is an employee", "g": "James has lunch at home .", "h": "James is working remotely from home .", "i": "the company is an employee", "j": "the company has lunch at home .", "k": "the company is working remotely from home .", "l": "James is a manager .", "m": "James does not work remotely from home .", "n": "the company is a manager .", "o": "the company does not work remotely from home ."}, {"0": "James is a manager and appears in the company today .", "1": "James is neither a manager .", "2": "James is today .", "3": "James appears in the company today .", "4": "James is not a manager ."}, {"0": "James is not a manager .", "1": "James is not a manager .", "2": "James can have lunch at home .", "3": "James has lunch at home .", "4": "James does not have lunch in the company .", "5": "James does not have lunch in the company ."}], "errors": [[]], "entailments_dict": [{"3": ["6"]}, {}, {}, {"0": ["1"], "4": ["5"]}], "predicted_steps": [false, false, false, false]}
{"text": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If James is either a manager or in other countries, then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home?", "id": "5", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All employees who schedule a meeting with their customers will appear in the company today.\nPremise 1.2: Everyone who has lunch in the company schedules meetings with their customers.\nPremise 1.3: Employees will either have lunch in the company or have lunch at home.\nPremise 1.4: If an employee has lunch at home, then he/she is working remotely from home.\nPremise 1.5: All employees who are in other countries work remotely from home.\nPremise 1.6: No managers work remotely from home.\nPremise 1.7: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nPremise 2.1: If James is either a manager or in other countries, then James is not appearing in the company today.\nPremise 2.2: If James is not appearing in the company today, then James does not schedule a meeting with customers.\nPremise 2.3: If James does not schedule a meeting with customers, then James does not have lunch in the company.\nPremise 2.4: If James does not have lunch in the company, then James has lunch at home.\nPremise 2.5: If James has lunch at home, then James is working remotely from home.\nConclusion 1: If James is either a manager or in other countries, then James has lunch at home.\nConclusion 2: If James is either a manager or in other countries, then James is working remotely from home.\nConclusion 3: If James is either a manager or in other countries, then James either has lunch at home and works remotely from home.\nAnswer: A. Yes.", "logic_premises": "[[((t→u)∪(v→w)), ((x→y)∪(z→A)), ((B→(C⊻D))∪(E→(F⊻G))), (((H∧I)→J)∪((K∧L)→M)), ((N→O)∪(P→Q)), ((R→S)∪(T→U)), (e⊻(f∧g)), (h→i), (j→k), (l→m), (n→o), (p→q)]]", "logic_conclusion": "[(r→s)]", "correspondance": [{"0": "X is an employee who schedules a meeting with their customers .", "1": "X will appear in the company today .", "2": "X is a person who has lunch in the company .", "3": "X schedules meetings with their customers .", "4": "X is an Employee .", "5": "X will have lunch in the company .", "6": "X will have lunch at home .", "7": "X is an employee", "8": "X has lunch at home .", "9": "X is working remotely from home .", "a": "X is an employee who is in other a country .", "b": "X works remotely from home .", "c": "X is a manager .", "d": "X does not work remotely from home .", "e": "James is a manager and appears in the company today .", "f": "James is neither a manager .", "g": "James is today .", "h": "James is either a manager or in other countries .", "i": "James is not appearing in the company today .", "j": "James is not appearing in the company today .", "k": "James does not schedule a meeting with customers .", "l": "James does not schedule a meeting with customers .", "m": "James does not have lunch in the company .", "n": "James does not have lunch in the company .", "o": "James has lunch at home .", "p": "James has lunch at home .", "q": "James is working remotely from home .", "r": "James is either a manager or in other countries .", "s": "James has lunch at home .", "t": "James is an employee who schedules a meeting with their customers .", "u": "James will appear in the company today .", "v": "the company is an employee who schedules a meeting with their customers .", "w": "the company will appear in the company today .", "x": "James is a person who has lunch in the company .", "y": "James schedules meetings with their customers .", "z": "the company is a person who has lunch in the company .", "A": "the company schedules meetings with their customers .", "B": "James is an Employee .", "C": "James will have lunch in the company .", "D": "James will have lunch at home .", "E": "the company is an Employee .", "F": "the company will have lunch in the company .", "G": "the company will have lunch at home .", "H": "James is an employee", "I": "James has lunch at home .", "J": "James is working remotely from home .", "K": "the company is an employee", "L": "the company has lunch at home .", "M": "the company is working remotely from home .", "N": "James is an employee who is in other a country .", "O": "James works remotely from home .", "P": "the company is an employee who is in other a country .", "Q": "the company works remotely from home .", "R": "James is a manager .", "S": "James does not work remotely from home .", "T": "the company is a manager .", "U": "the company does not work remotely from home ."}], "errors": [[]], "entailments_dict": [{"o": ["I", "p", "s"], "i": ["j"], "m": ["n"], "k": ["l"], "r": ["h"], "S": ["(¬O)"], "O": ["(¬S)"], "U": ["(¬Q)"], "Q": ["(¬U)"]}], "predicted_steps": [true]}
{"text": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that There is an animal?", "id": "6", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Monkeypox is an infectious disease caused by the monkeypox virus.\nPremise 1.2: Monkeypox virus can occur in certain animals, including humans.\nPremise 1.3: Humans are mammals.\nPremise 1.4: Mammals are animals.\nConclusion 1: Monkeypox can occur in animals.\nPremise 2.1: People feel tired when they get a glu.\nPremise 2.2: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nConclusion 2: Animals with Monkeypox can feel tired.\nPremise 3.1: Animals with Monkeypox can feel tired.\nPremise 3.2: Animals are defined as a group of living organisms that fit specific criteria.\nConclusion 3: There is an animal.\nAnswer: A. Yes.\n\nNote: The question is asking if there is an animal, which is a true statement, as animals are a group of living organisms that fit specific criteria. The passage does not provide enough information to determine if a specific animal is present or not.", "logic_premises": "[[0, 1, ((7→8)∪(9→a)), ((b→c)∪(d→e))], [(0→1), (2→3)], [(5→6), (7→8)]]", "logic_conclusion": "[6, (4→5), 4]", "correspondance": [{"0": "Monkeypox is an infectious disease caused by the monkeypox virus .", "1": "the monkeypox virus can occur in certain animals , including humans .", "2": "X is a Human .", "3": "X is a mammal .", "4": "X is a Mammal .", "5": "X is an animal .", "6": "Monkeypox can occur in animals .", "7": "Monkeypox is a Human .", "8": "Monkeypox is a mammal .", "9": "the monkeypox virus is a Human .", "a": "the monkeypox virus is a mammal .", "b": "Monkeypox is a Mammal .", "c": "Monkeypox is an animal .", "d": "the monkeypox virus is a Mammal .", "e": "the monkeypox virus is an animal ."}, {"0": "X is a person .", "1": "X feels tired that people gets a glu .", "2": "X is a Symptom of Monkeypox .", "3": "X includes fever , headache , muscle pains , feeling tired , and so on .", "4": "X is an Animal with Monkeypox .", "5": "X can feel tired ."}, {"0": "X is an Animal with Monkeypox .", "1": "X can feel tired .", "2": "X is an Animal .", "3": "X is defined as a group of living organisms that fits specific criteria .", "4": "There is an animal .", "5": "Monkeypox is an Animal with Monkeypox .", "6": "Monkeypox can feel tired .", "7": "Monkeypox is an Animal .", "8": "Monkeypox is defined as a group of living organisms that fits specific criteria ."}], "errors": [[]], "entailments_dict": [{"8": ["b"], "a": ["d"]}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that No one gets flu?", "id": "7", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Monkeypox symptoms include feeling tired.\nPremise 1.2: People feel tired when they get a flu.\nConclusion 1: People who have monkeypox symptoms can be said to have flu.\nPremise 2.1: Monkeypox is an infectious disease caused by the monkeypox virus.\nPremise 2.2: Monkeypox virus can occur in humans.\nConclusion 2: Humans can get monkeypox.\nPremise 3.1: Humans are mammals.\nPremise 3.2: Mammals are animals.\nConclusion 3: Humans are animals.\nPremise 4.1: Conclusions 1, 2, and 3 do not provide any information about whether or not people get flu.\nAnswer: C. Uncertain.\n\nNote: The passage does not provide any information about whether or not people get flu, so the answer is uncertain.", "logic_premises": "[[(0→1), (2→3)], [0, 1], [(0→1), (2→3)]]", "logic_conclusion": "[(4→5), ((4→5)∪(6→7)), (4→5)]", "correspondance": [{"0": "X is Monkeypox a symptom .", "1": "X includes feeling tired .", "2": "X is a person .", "3": "X feels tired that People gets a flu .", "4": "X is a person who has monkeypox symptoms .", "5": "X can be said to have flu ."}, {"0": "Monkeypox is an infectious disease caused by the monkeypox virus .", "1": "the monkeypox virus can occur in humans .", "2": "X is a Human .", "3": "X can get Monkeypox .", "4": "Monkeypox is a Human .", "5": "Monkeypox can get Monkeypox .", "6": "the monkeypox virus is a Human .", "7": "the monkeypox virus can get Monkeypox ."}, {"0": "X is a Human .", "1": "X is a mammal .", "2": "X is a Mammal .", "3": "X is an animal .", "4": "X is a Human .", "5": "X is an animal ."}], "errors": [[]], "entailments_dict": [{}, {}, {"1": ["2"], "4": ["0"], "3": ["5"]}], "predicted_steps": [false, false, true]}
{"text": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Symptons of Monkeypox include coughing?", "id": "8", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Monkeypox is an infectious disease caused by the monkeypox virus.\nPremise 1.2: Monkeypox virus can occur in certain animals, including humans.\nPremise 1.3: Humans are mammals.\nPremise 1.4: Mammals are animals.\nPremise 1.5: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nPremise 1.6: People feel tired when they get a glu.\nConclusion 1: Monkeypox symptoms do not include coughing.\nPremise 2.1: Coughing is not listed as a symptom of Monkeypox.\nAnswer: B. No.\n\nNote: The passage does not mention coughing as a symptom of Monkeypox, and coughing is not a common symptom of viral infections.", "logic_premises": "[[0, 1, ((c→d)∪(e→f)), ((g→h)∪(i→j)), ((k→l)∪(m→n)), ((o→p)∪(q→r))]]", "logic_conclusion": "[((s→t)∪(u→v))]", "correspondance": [{"0": "Monkeypox is an infectious disease caused by the monkeypox virus .", "1": "the monkeypox virus can occur in certain animals , including humans .", "2": "X is a Human .", "3": "X is a mammal .", "4": "X is a Mammal .", "5": "X is an animal .", "6": "X is a Symptom of Monkeypox .", "7": "X includes fever , headache , muscle pains , feeling tired , and so on .", "8": "X is a person .", "9": "X feels tired that People gets a glu .", "a": "X is Monkeypox a symptom .", "b": "X does not includes coughing .", "c": "Monkeypox is a Human .", "d": "Monkeypox is a mammal .", "e": "the monkeypox virus is a Human .", "f": "the monkeypox virus is a mammal .", "g": "Monkeypox is a Mammal .", "h": "Monkeypox is an animal .", "i": "the monkeypox virus is a Mammal .", "j": "the monkeypox virus is an animal .", "k": "Monkeypox is a Symptom of Monkeypox .", "l": "Monkeypox includes fever , headache , muscle pains , feeling tired , and so on .", "m": "the monkeypox virus is a Symptom of Monkeypox .", "n": "the monkeypox virus includes fever , headache , muscle pains , feeling tired , and so on .", "o": "Monkeypox is a person .", "p": "Monkeypox feels tired that People gets a glu .", "q": "the monkeypox virus is a person .", "r": "the monkeypox virus feels tired that People gets a glu .", "s": "Monkeypox is Monkeypox a symptom .", "t": "Monkeypox does not includes coughing .", "u": "the monkeypox virus is Monkeypox a symptom .", "v": "the monkeypox virus does not includes coughing ."}], "errors": [[]], "entailments_dict": [{"d": ["g"], "f": ["i"]}], "predicted_steps": [false]}
{"text": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom is an Ocellated wild turkey?", "id": "9", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nPremise 1.2: Tom is a wild turkey.\nPremise 2.1: Tom is not an Eastern wild turkey.\nPremise 2.2: Tom is not an Osceola wild turkey.\nPremise 2.3: Tom is not a Gould's wild turkey.\nPremise 2.4: Tom is not a Merriam’s wild turkey.\nPremise 2.5: Tom is not a Rio Grande wild turkey.\nConclusion 1: Tom is not any of the five wild turkey types except Ocellated wild turkey.\nPremise 3.1: Tom is not any of the five wild turkey types except Ocellated wild turkey.\nAnswer: A. Yes.", "logic_premises": "[[(0∧(1∧(2∧(3∧(4∧5))))), 6, 7, 8, 9, a, b]]", "logic_conclusion": "[((e→f)∪((g→h)∪(i→j)))]", "correspondance": [{"0": "There are six types of wild turkeys : Eastern wild turkey .", "1": "There are six types of wild turkeys : Osceola wild turkey .", "2": "There are six types of wild turkeys : Gould ’s wild turkey .", "3": "There are six types of wild turkeys : Merriam ’s 's wild turkey .", "4": "There are six types of wild turkeys : Rio Grande wild turkey .", "5": "There are six types of wild turkeys : Ocellated wild turkey .", "6": "Tom is a wild turkey .", "7": "Tom is not an Eastern wild turkey .", "8": "Tom is not an Osceola wild turkey .", "9": "Tom is not a Gould 's wild turkey .", "a": "Tom is not a Merriam ’s 's wild turkey .", "b": "Tom is not a Rio Grande wild turkey .", "c": "X is of the five a wild turkey types except Ocellated wild turkey .", "d": "Tom is not X .", "e": "the five wild turkey types is of the five a wild turkey types except Ocellated wild turkey .", "f": "Tom is not the five wild turkey types .", "g": "six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey is of the five a wild turkey types except Ocellated wild turkey .", "h": "Tom is not six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey .", "i": "Tom is of the five a wild turkey types except Ocellated wild turkey .", "j": "Tom is not Tom ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom is an Eastern wild turkey?", "id": "10", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nPremise 1.2: Tom is a wild turkey.\nPremise 2.1: Tom is not an Eastern wild turkey.\nPremise 2.2: Tom is not an Osceola wild turkey.\nPremise 2.3: Tom is also not a Gould's wild turkey, or a Merriam’s wild turkey, or a Rio Grande wild turkey.\nConclusion 1: Tom is not any of the first five types of wild turkeys.\nConclusion 2: The passage does not mention anything about the Ocellated wild turkey except it is one of the six types.\nConclusion 3: Therefore, it is not possible to determine if Tom is an Ocellated wild turkey.\nAnswer: C. Uncertain.\n\nNote: The answer is uncertain because the passage does not provide enough information to determine if Tom is an Ocellated wild turkey.", "logic_premises": "[[(0∧(1∧(2∧(3∧(4∧5))))), 6, 7, 8, (9∨(a∨b))]]", "logic_conclusion": "[((e→f)∪((g→h)∪(i→j)))]", "correspondance": [{"0": "There are six types of wild turkeys : Eastern wild turkey .", "1": "There are six types of wild turkeys : Osceola wild turkey .", "2": "There are six types of wild turkeys : Gould ’s wild turkey .", "3": "There are six types of wild turkeys : Merriam ’s wild turkey .", "4": "There are six types of wild turkeys : Rio Grande wild turkey .", "5": "There are six types of wild turkeys : Ocellated wild turkey .", "6": "Tom is a wild turkey .", "7": "Tom is not an Eastern wild turkey .", "8": "Tom is not an Osceola wild turkey .", "9": "Tom is also not a Gould 's wild turkey .", "a": "Tom is also not a Merriam ’s wild turkey .", "b": "Tom is also not a Rio Grande wild turkey .", "c": "X is of a the first five types of wild turkeys .", "d": "Tom is not X .", "e": "the first five types of wild turkeys is of a the first five types of wild turkeys .", "f": "Tom is not the first five types of wild turkeys .", "g": "six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey is of a the first five types of wild turkeys .", "h": "Tom is not six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey .", "i": "Tom is of a the first five types of wild turkeys .", "j": "Tom is not Tom ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Joey is a wild turkey?", "id": "11", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nPremise 1.2: Tom is a wild turkey.\nPremise 1.3: Tom is not an Eastern wild turkey, not an Osceola wild turkey, not a Gould's wild turkey, not a Merriam's wild turkey, and not a Rio Grande wild turkey.\nConclusion 1: Tom is an Ocellated wild turkey.\n\nThe passage does not provide information about Joey, so we cannot determine if Joey is a wild turkey or not.\nAnswer: C. Uncertain.\n\nNote: The passage does not explicitly state that there are no other types of wild turkeys besides the six mentioned, but it also does not provide any information about Joey. Therefore, the answer is uncertain.", "logic_premises": "[[(0∧(1∧(2∧(3∧(4∧5))))), 6, (7∧(8∧(9∧(a∧b))))]]", "logic_conclusion": "[c]", "correspondance": [{"0": "There are six types of wild turkeys : Eastern wild turkey .", "1": "There are six types of wild turkeys : Osceola wild turkey .", "2": "There are six types of wild turkeys : Gould ’s wild turkey .", "3": "There are six types of wild turkeys : Merriam ’s wild turkey .", "4": "There are six types of wild turkeys : Rio Grande wild turkey .", "5": "There are six types of wild turkeys : Ocellated wild turkey .", "6": "Tom is a wild turkey .", "7": "Tom is not an Eastern wild turkey .", "8": "Tom is not an Osceola wild turkey .", "9": "Tom is not not a Gould 's wild turkey .", "a": "Tom is not a Merriam 's wild turkey .", "b": "Tom is not a Rio Grande wild turkey .", "c": "Tom is an Ocellated wild turkey ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The Legend of Zelda is in the Top 10 list?", "id": "12", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All games in the Top 10 list are made by Japanese game companies.\nPremise 1.2: The Legend of Zelda is made by a Japanese game company.\nConclusion 1: The Legend of Zelda is eligible to be in the Top 10 list.\nPremise 2.1: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nPremise 2.2: The Legend of Zelda sold more than one million copies.\nConclusion 2: The Legend of Zelda is in the Top 10 list.\nPremise 3.1: The Legend of Zelda is in the Top 10 list.\nAnswer: A. Yes.\n\nNote: The conclusion is based on the premises, if the premises are true, the conclusion is true. In this case, the passage states that all games in the Top 10 list are made by Japanese game companies and The Legend of Zelda is made by a Japanese game company and also sold more than one million copies, which qualifies it to be in the Top 10 list.", "logic_premises": "[[((4→5)∪(6→7)), 2], [(((5∧6)→7)∪((8∧9)→a)), 3]]", "logic_conclusion": "[3, 4]", "correspondance": [{"0": "X is a game in the Top 10 list .", "1": "X is made by Japanese game companies .", "2": "The Legend of Zelda is made by a Japanese game company .", "3": "The Legend of Zelda is eligible to be in the Top 10 list .", "4": "the Top 10 list is a game in the Top 10 list .", "5": "the Top 10 list is made by Japanese game companies .", "6": "The Legend of Zelda is a game in the Top 10 list .", "7": "The Legend of Zelda is made by Japanese game companies ."}, {"0": "X is a game", "1": "X sells more than one million copies .", "2": "X will be selected into the Top 10 list .", "3": "The Legend of Zelda sold more than one million copies .", "4": "The Legend of Zelda is in the Top 10 list .", "5": "the Top 10 list is a game", "6": "the Top 10 list sells more than one million copies .", "7": "the Top 10 list will be selected into the Top 10 list .", "8": "The Legend of Zelda is a game", "9": "The Legend of Zelda sells more than one million copies .", "a": "The Legend of Zelda will be selected into the Top 10 list ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that FIFA 22 is made by a Japanese video game company?", "id": "13", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: All games in the Top 10 list are made by Japanese game companies.\nPremise 1.2: The Legend of Zelda, a game made by a Japanese game company, is in the Top 10 list.\nConclusion 1: The Legend of Zelda sold more than one million copies.\nPremise 2.1: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nPremise 2.2: The Legend of Zelda sold more than one million copies.\nConclusion 2: The Legend of Zelda is in the Top 10 list.\nPremise 3.1: All games in the Top 10 list are made by Japanese game companies.\nPremise 3.2: The Legend of Zelda is made by a Japanese game company.\nConclusion 3: FIFA 22 is not mentioned in the passage.\nAnswer: C. Uncertain. The passage does not provide information about FIFA 22 or its developer.", "logic_premises": "[[((4→5)∪((6→7)∪(8→9))), 2], [(((5∧6)→7)∪((8∧9)→a)), 3], [((4→5)∪((6→7)∪((8→9)∪(a→b)))), 2]]", "logic_conclusion": "[3, 4, 3]", "correspondance": [{"0": "X is a game in the Top 10 list .", "1": "X is made by Japanese game companies .", "2": "The Legend of Zelda , is in the Top 10 list .", "3": "The Legend of Zelda sold more than one million copies .", "4": "the Top 10 list is a game in the Top 10 list .", "5": "the Top 10 list is made by Japanese game companies .", "6": "The Legend of Zelda, a game made by a Japanese game company, is a game in the Top 10 list .", "7": "The Legend of Zelda, a game made by a Japanese game company, is made by Japanese game companies .", "8": "The Legend of Zelda is a game in the Top 10 list .", "9": "The Legend of Zelda is made by Japanese game companies ."}, {"0": "X is a game", "1": "X sells more than one million copies .", "2": "X will be selected into the Top 10 list .", "3": "The Legend of Zelda sold more than one million copies .", "4": "The Legend of Zelda is in the Top 10 list .", "5": "the Top 10 list is a game", "6": "the Top 10 list sells more than one million copies .", "7": "the Top 10 list will be selected into the Top 10 list .", "8": "The Legend of Zelda is a game", "9": "The Legend of Zelda sells more than one million copies .", "a": "The Legend of Zelda will be selected into the Top 10 list ."}, {"0": "X is a game in the Top 10 list .", "1": "X is made by Japanese game companies .", "2": "The Legend of Zelda is made by a Japanese game company .", "3": "FIFA 22 is not mentioned in the passage .", "4": "the Top 10 list is a game in the Top 10 list .", "5": "the Top 10 list is made by Japanese game companies .", "6": "FIFA 22 is a game in the Top 10 list .", "7": "FIFA 22 is made by Japanese game companies .", "8": "the passage is a game in the Top 10 list .", "9": "the passage is made by Japanese game companies .", "a": "The Legend of Zelda is a game in the Top 10 list .", "b": "The Legend of Zelda is made by Japanese game companies ."}], "errors": [[]], "entailments_dict": [{}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The Legend of Zelda is not in the Top 10 list?", "id": "14", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All games in the Top 10 list are made by Japanese game companies.\nPremise 1.2: A Japanese game company created the game the Legend of Zelda.\nConclusion 1: The Legend of Zelda is a game made by a Japanese game company.\nPremise 2.1: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nPremise 2.2: The Legend of Zelda sold more than one million copies.\nConclusion 2: The Legend of Zelda is in the Top 10 list.\nPremise 3.1: The Legend of Zelda is in the Top 10 list.\nAnswer: B. No.", "logic_premises": "[[((4→5)∪((6→7)∪(8→9))), 2], [(((5∧6)→7)∪((8∧9)→a)), 3]]", "logic_conclusion": "[3, 4]", "correspondance": [{"0": "X is a game in the Top 10 list .", "1": "X is made by Japanese game companies .", "2": "A Japanese game company created the game the Legend of Zelda .", "3": "the game the Legend of Zelda is a game made by A Japanese game company .", "4": "the Top 10 list is a game in the Top 10 list .", "5": "the Top 10 list is made by Japanese game companies .", "6": "the game the Legend of Zelda is a game in the Top 10 list .", "7": "the game the Legend of Zelda is made by Japanese game companies .", "8": "The Legend of Zelda is a game in the Top 10 list .", "9": "The Legend of Zelda is made by Japanese game companies ."}, {"0": "X is a game", "1": "X sells more than one million copies .", "2": "X will be selected into the Top 10 list .", "3": "The Legend of Zelda sold more than one million copies .", "4": "The Legend of Zelda is in the Top 10 list .", "5": "the Top 10 list is a game", "6": "the Top 10 list sells more than one million copies .", "7": "the Top 10 list will be selected into the Top 10 list .", "8": "The Legend of Zelda is a game", "9": "The Legend of Zelda sells more than one million copies .", "a": "The Legend of Zelda will be selected into the Top 10 list ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "All squares have four sides. All four-sided things are shapes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that All squares are shapes?", "id": "15", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All squares have four sides.\nPremise 1.2: All four-sided things are shapes.\nConclusion 1: Squares are four-sided things.\nPremise 2.1: Squares are four-sided things.\nPremise 2.2: All four-sided things are shapes.\nConclusion 2: Squares are shapes.\nPremise 3.1: Squares are shapes.\nAnswer: A. Yes.\n\nExplanation:\nThe passage states that all squares have four sides and all four-sided things are shapes. From this, we can conclude that squares are four-sided things, and since all four-sided things are shapes, it follows that squares are shapes. Therefore, the answer is A. Yes.", "logic_premises": "[[(0→1), (2→3)], [(0→1), (2→3)]]", "logic_conclusion": "[(4→5), (4→5)]", "correspondance": [{"0": "X is a square .", "1": "X has four sides .", "2": "X is a four - sided thing .", "3": "X is a shape .", "4": "X is a Square .", "5": "X is four - sided a thing ."}, {"0": "X is a Square .", "1": "X is four - sided a thing .", "2": "X is a four - sided thing .", "3": "X is a shape .", "4": "X is a Square .", "5": "X is a shape ."}], "errors": [[]], "entailments_dict": [{"4": ["0"]}, {"1": ["2"], "4": ["0"], "3": ["5"]}], "predicted_steps": [false, true]}
{"text": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rock is a turtle?", "id": "16", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: An animal is either a rabbit or a squirrel.\nPremise 1.2: Rock is still.\nConclusion 1: Rock is not a squirrel.\nPremise 2.1: If something is skittish, then it is not still.\nPremise 2.2: All squirrels are skittish.\nConclusion 2: Rock is not a squirrel.\nPremise 3.1: Rock is not a squirrel.\nPremise 3.2: Some turtles exist.\nConclusion 3: Rock is not a turtle.\nPremise 4.1: Rock is not a turtle.\nAnswer: B. No.\n\nNote: The reasoning steps are based on the premises provided in the passage, and the conclusion is drawn from those premises. The passage does not provide any information that directly links Rock to being a turtle, so the answer is \"No\".", "logic_premises": "[[(5→(6⊻7)), 3], [(5→6), (7→8)], [0, 1]]", "logic_conclusion": "[4, 4, 2]", "correspondance": [{"0": "X is An animal", "1": "X is a rabbit .", "2": "X is a squirrel .", "3": "Rock is still .", "4": "Rock is not a squirrel .", "5": "Rock is An animal", "6": "Rock is a rabbit .", "7": "Rock is a squirrel ."}, {"0": "X is skittish .", "1": "X is not still .", "2": "X is a squirrel .", "3": "X is skittish .", "4": "Rock is not a squirrel .", "5": "Rock is skittish .", "6": "Rock is not still .", "7": "Rock is a squirrel .", "8": "Rock is skittish ."}, {"0": "Rock is not a squirrel .", "1": "Some turtles exist .", "2": "Rock is not a turtle ."}], "errors": [[]], "entailments_dict": [{"4": ["(¬7)"]}, {"8": ["5"], "(¬4)": ["7"]}, {}], "predicted_steps": [false, false, false]}
{"text": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rock is not a turtle?", "id": "17", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: An animal is either a rabbit or a squirrel.\nPremise 1.2: Rock is still.\nConclusion 1: Rock is not a rabbit or a squirrel.\nPremise 2.1: Some turtles exist.\nConclusion 2: Rock is not a turtle.\nPremise 3.1: An animal is either a rabbit or a squirrel.\nPremise 3.2: Rock is still.\nConclusion 3: Rock is not an animal.\nPremise 4.1: All rabbits are cute.\nPremise 4.2: All squirrels are skittish.\nPremise 4.3: If something is skittish, then it is not still.\nPremise 4.4: Rock is still.\nConclusion 4: Rock is not a rabbit or a squirrel.\nAnswer: B. No. The passage does not provide enough information to determine that Rock is not a turtle. However, it does imply that Rock is not an animal, and therefore not a turtle.", "logic_premises": "[[(6→(7⊻8)), 3], [0], [(5→(6⊻7)), 3], [(9→a), (b→c), (d→e), 6]]", "logic_conclusion": "[(4∨5), 1, 4, (7∨8)]", "correspondance": [{"0": "X is An animal", "1": "X is a rabbit .", "2": "X is a squirrel .", "3": "Rock is still .", "4": "Rock is not a rabbit .", "5": "Rock is not a squirrel .", "6": "Rock is An animal", "7": "Rock is a rabbit .", "8": "Rock is a squirrel ."}, {"0": "Some turtles exist .", "1": "Rock is not a turtle ."}, {"0": "X is An animal", "1": "X is a rabbit .", "2": "X is a squirrel .", "3": "Rock is still .", "4": "Rock is not an animal .", "5": "Rock is An animal", "6": "Rock is a rabbit .", "7": "Rock is a squirrel ."}, {"0": "X is a rabbit .", "1": "X is cute .", "2": "X is a squirrel .", "3": "X is skittish .", "4": "X is skittish .", "5": "X is not still .", "6": "Rock is still .", "7": "Rock is not a rabbit .", "8": "Rock is not a squirrel .", "9": "Rock is a rabbit .", "a": "Rock is cute .", "b": "Rock is a squirrel .", "c": "Rock is skittish .", "d": "Rock is skittish .", "e": "Rock is not still ."}], "errors": [[]], "entailments_dict": [{"4": ["(¬7)"], "5": ["(¬8)"]}, {}, {}, {"c": ["d"], "e": ["(¬6)"], "6": ["(¬e)"], "(¬7)": ["9"], "(¬8)": ["b"]}], "predicted_steps": [false, false, false, true]}
{"text": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rock is a turtle or cute?", "id": "18", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: An animal is either a rabbit or a squirrel.\nPremise 1.2: Rock is still.\nConclusion 1: Rock is not a squirrel.\nPremise 2.1: All rabbits are cute.\nPremise 2.2: Some turtles exist.\nConclusion 2: Rock is not a rabbit and not a turtle.\nPremise 3.1: If something is skittish, then it is not still.\nPremise 3.2: All squirrels are skittish.\nConclusion 3: Rock is not a squirrel.\nPremise 4.1: Rock is not a rabbit, not a squirrel and not a turtle.\nPremise 4.2: Rock is still.\nConclusion 4: Rock is not cute.\nAnswer: B. No.", "logic_premises": "[[(5→(6⊻7)), 3], [(0→1), 2], [(5→6), (7→8)], [(0∧(1∧2)), 3]]", "logic_conclusion": "[4, 3, 4, 4]", "correspondance": [{"0": "X is An animal", "1": "X is a rabbit .", "2": "X is a squirrel .", "3": "Rock is still .", "4": "Rock is not a squirrel .", "5": "Rock is An animal", "6": "Rock is a rabbit .", "7": "Rock is a squirrel ."}, {"0": "X is a rabbit .", "1": "X is cute .", "2": "Some turtles exist .", "3": "Rock is not a rabbit and not a turtle ."}, {"0": "X is skittish .", "1": "X is not still .", "2": "X is a squirrel .", "3": "X is skittish .", "4": "Rock is not a squirrel .", "5": "Rock is skittish .", "6": "Rock is not still .", "7": "Rock is a squirrel .", "8": "Rock is skittish ."}, {"0": "rock is not a rabbit .", "1": "rock is not a squirrel .", "2": "rock is not a turtle .", "3": "rock is still .", "4": "rock is not cute ."}], "errors": [[]], "entailments_dict": [{"4": ["(¬7)"]}, {}, {"8": ["5"], "(¬4)": ["7"]}, {}], "predicted_steps": [false, false, false, false]}
{"text": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish?", "id": "19", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: An animal is either a rabbit or a squirrel.\nPremise 1.2: Rock is still.\nPremise 1.3: All rabbits are cute.\nPremise 1.4: Rock is not an animal (since it is still).\nPremise 2.1: If something is skittish, then it is not still.\nPremise 2.2: All squirrels are skittish.\nPremise 2.3: Rock is still.\nConclusion 1: Rock is not a squirrel.\nPremise 3.1: An animal is either a rabbit or a squirrel.\nPremise 3.2: Rock is not an animal.\nConclusion 2: Rock is not a rabbit.\nPremise 4.1: All rabbits are cute.\nPremise 4.2: Rock is not a rabbit.\nConclusion 3: Rock is not cute.\nPremise 5.1: If something is skittish, then it is not still.\nPremise 5.2: Rock is still.\nConclusion 4: Rock is not skittish.\nPremise 6.1: Rock is not cute.\nPremise 6.2: Rock is not skittish.\nAnswer: B. No.\n\nThe statement \"If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish\" is false because Rock is not cute or skittish. Rock is not an animal, so it does not have the properties of being cute or skittish.", "logic_premises": "[[(d→(e⊻f)), 3, (g→h), 6, (i→j), (k→l), b], [(5→(6⊻7)), 3], [(0→1), 2], [(0→1), 2]]", "logic_conclusion": "[c, 4, 3, 3]", "correspondance": [{"0": "X is An animal", "1": "X is a rabbit .", "2": "X is a squirrel .", "3": "Rock is still .", "4": "X is a rabbit .", "5": "X is cute .", "6": "Rock is not an animal .", "7": "X is skittish .", "8": "X is not still .", "9": "X is a squirrel .", "a": "X is skittish .", "b": "Rock is still .", "c": "Rock is not a squirrel .", "d": "Rock is An animal", "e": "Rock is a rabbit .", "f": "Rock is a squirrel .", "g": "Rock is a rabbit .", "h": "Rock is cute .", "i": "Rock is skittish .", "j": "Rock is not still .", "k": "Rock is a squirrel .", "l": "Rock is skittish ."}, {"0": "X is An animal", "1": "X is a rabbit .", "2": "X is a squirrel .", "3": "Rock is not an animal .", "4": "Rock is not a rabbit .", "5": "Rock is An animal", "6": "Rock is a rabbit .", "7": "Rock is a squirrel ."}, {"0": "X is a rabbit .", "1": "X is cute .", "2": "Rock is not a rabbit .", "3": "Rock is not cute ."}, {"0": "X is skittish .", "1": "X is not still .", "2": "Rock is still .", "3": "Rock is not skittish ."}], "errors": [[]], "entailments_dict": [{"f": ["k"], "b": ["3", "(¬j)"], "3": ["b", "(¬j)"], "e": ["g"], "l": ["i"], "j": ["(¬b)", "(¬3)"], "c": ["(¬f)"], "(¬c)": ["k"]}, {"4": ["(¬6)"]}, {}, {}], "predicted_steps": [true, false, false, false]}
{"text": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Rock is cute and still, then Rock is a turtle and skittish?", "id": "20", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All rabbits are cute.\nPremise 1.2: Rock is still.\nConclusion 1: Rock is not a rabbit.\nPremise 2.1: An animal is either a rabbit or a squirrel.\nPremise 2.2: Rock is not a rabbit.\nConclusion 2: Rock is a squirrel.\nPremise 3.1: All squirrels are skittish.\nPremise 3.2: Rock is still.\nConclusion 3: Rock is not skittish.\nPremise 4.1: If something is skittish, then it is not still.\nPremise 4.2: Rock is still and not skittish.\nConclusion 4: Rock does not meet the condition of being skittish.\nPremise 5.1: The statement \"If Rock is cute and still, then Rock is a turtle and skittish\" requires Rock to be skittish.\nPremise 5.2: Rock is not skittish.\nConclusion 5: Rock does not meet the condition of the statement.\nAnswer: B. No.", "logic_premises": "[[(0→1), 2], [(5→(6⊻7)), 3], [(0→1), 2], [(4→5), 2], [(0∧1), 2]]", "logic_conclusion": "[3, 4, 3, 3, 3]", "correspondance": [{"0": "X is a rabbit .", "1": "X is cute .", "2": "Rock is still .", "3": "Rock is not a rabbit ."}, {"0": "X is An animal", "1": "X is a rabbit .", "2": "X is a squirrel .", "3": "Rock is not a rabbit .", "4": "Rock is a squirrel .", "5": "Rock is An animal", "6": "Rock is a rabbit .", "7": "Rock is a squirrel ."}, {"0": "X is a squirrel .", "1": "X is skittish .", "2": "Rock is still .", "3": "Rock is not skittish ."}, {"0": "X is skittish .", "1": "X is not still .", "2": "Rock is still and not skittish .", "3": "Rock does not meet the condition of being skittish .", "4": "the condition of being skittish is skittish .", "5": "the condition of being skittish is not still ."}, {"0": "be skittish .", "1": "The statement \" If Rock is cute and still , then Rock is a turtle and skittish \" requires Rock .", "2": "Rock is not skittish .", "3": "Rock does not meet the condition of the statement \" If Rock is cute and still ."}], "errors": [[]], "entailments_dict": [{}, {"7": ["4"], "6": ["(¬3)"], "3": ["(¬6)"]}, {}, {}, {}], "predicted_steps": [false, false, false, false, false]}
{"text": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Karen will share \"Stranger Things\" to Lisa?", "id": "21", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If a Netflix show is popular, Karen will binge-watch it.\nPremise 1.2: \"Stranger Things\" is a popular Netflix show.\nConclusion 1: Karen will binge-watch \"Stranger Things\".\nPremise 2.1: If Karen binge-watches a Netflix show, she will download it.\nPremise 2.2: Karen does not download \"Black Mirror\".\nConclusion 2: \"Stranger Things\" is not \"Black Mirror\".\nPremise 3.1: Karen will download \"Stranger Things\".\nPremise 3.2: If Karen binge-watches a Netflix show, she will share it to Lisa.\nConclusion 3: Karen will share \"Stranger Things\" to Lisa.\nPremise 4.1: Karen will share \"Stranger Things\" to Lisa.\nAnswer: A. Yes.\n\nNote: The conclusion is the same as the premise 4.1, which is directly taken from the passage, so it is not necessary to provide additional reasoning steps.", "logic_premises": "[[(((5∧6)→7)∪((8∧9)→a)), 3], [(0→1), 2], [0, (1→2)]]", "logic_conclusion": "[4, 3, 3]", "correspondance": [{"0": "X is a Netflix show", "1": "X is popular .", "2": "Karen will binge - watch X .", "3": "\" Stranger Things \" is a popular Netflix show .", "4": "Karen will binge - watch \" Stranger Things \" .", "5": "Stranger Things is a Netflix show", "6": "Stranger Things is popular .", "7": "Karen will binge - watch Stranger Things .", "8": "Karen is a Netflix show", "9": "Karen is popular .", "a": "Karen will binge - watch Karen ."}, {"0": "Karen binge - watches a Netflix show .", "1": "Karen will download a Netflix show .", "2": "Karen does not download \" Black Mirror \" .", "3": "\" Stranger Things \" is not \" Black Mirror \" ."}, {"0": "Karen will download \" Stranger Things \" .", "1": "Karen binge - watches a Netflix show .", "2": "Karen will share a Netflix show to Lisa .", "3": "Karen will share \" Stranger Things \" to Lisa ."}], "errors": [[]], "entailments_dict": [{}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that \"Black Mirror\" is popular?", "id": "22", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If a Netflix show is popular, Karen will binge-watch it.\nPremise 1.2: If Karen binge-watches a Netflix show, she will download it.\nPremise 2.1: Karen does not download \"Black Mirror\".\nPremise 2.2: \"Black Mirror\" is a Netflix show.\nConclusion 1: Karen did not binge-watch \"Black Mirror\".\nPremise 3.1: If Karen binge-watches a Netflix show, she will share it to Lisa.\nPremise 3.2: Karen did not share \"Black Mirror\" to Lisa.\nConclusion 2: \"Black Mirror\" is not popular.\nPremise 4.1: \"Black Mirror\" is not popular.\nAnswer: B. No.\n\nExplanation:\n\n* From Premise 1.1 and 1.2, we can infer that if a Netflix show is popular, Karen will download it.\n* From Premise 2.1, we can infer that Karen did not download \"Black Mirror\", which means she did not binge-watch it.\n* From Premise 2.2, we know that \"Black Mirror\" is a Netflix show.\n* From Premise 3.1 and 3.2, we can infer that if Karen did not binge-watch \"Black Mirror\", she did not share it to Lisa.\n* From these conclusions, we can infer that \"Black Mirror\" is not popular.", "logic_premises": "[[(((8∧9)→a)∪((b∧c)→d)), (3→4), 5, 6], [(0→1), 2]]", "logic_conclusion": "[7, 3]", "correspondance": [{"0": "X is a Netflix show", "1": "X is popular .", "2": "Karen will binge - watch X .", "3": "Karen binge - watches a Netflix show .", "4": "Karen will download a Netflix show .", "5": "Karen does not download \" Black Mirror \" .", "6": "\" Black Mirror \" is a Netflix show .", "7": "Karen did not binge - watch \" Black Mirror \" .", "8": "Black Mirror is a Netflix show", "9": "Black Mirror is popular .", "a": "Karen will binge - watch Black Mirror .", "b": "Karen is a Netflix show", "c": "Karen is popular .", "d": "Karen will binge - watch Karen ."}, {"0": "Karen binge - watches a Netflix show .", "1": "Karen will share a Netflix show to Lisa .", "2": "Karen did not share \" Black Mirror \" to Lisa .", "3": "\" Black Mirror \" is not popular ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Karen will share \"Black Mirror\" to Lisa?", "id": "23", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If a Netflix show is popular, Karen will binge-watch it.\nPremise 1.2: \"Stranger Things\" is a popular Netflix show.\nConclusion 1: Karen will binge-watch \"Stranger Things\".\nPremise 2.1: If Karen binge-watches a Netflix show, she will download it.\nPremise 2.2: Karen does not download \"Black Mirror\".\nConclusion 2: Karen will not binge-watch \"Black Mirror\".\nPremise 3.1: If Karen binge-watches a Netflix show, she will share it to Lisa.\nPremise 3.2: Karen will not binge-watch \"Black Mirror\".\nConclusion 3: Karen will not share \"Black Mirror\" to Lisa.\nAnswer: B. No.", "logic_premises": "[[(((5∧6)→7)∪((8∧9)→a)), 3], [(0→1), 2], [(0→1), 2]]", "logic_conclusion": "[4, 3, 3]", "correspondance": [{"0": "X is a Netflix show", "1": "X is popular .", "2": "Karen will binge - watch X .", "3": "\" Stranger Things \" is a popular Netflix show .", "4": "Karen will binge - watch \" Stranger Things \" .", "5": "Stranger Things is a Netflix show", "6": "Stranger Things is popular .", "7": "Karen will binge - watch Stranger Things .", "8": "Karen is a Netflix show", "9": "Karen is popular .", "a": "Karen will binge - watch Karen ."}, {"0": "Karen binge - watches a Netflix show .", "1": "Karen will download a Netflix show .", "2": "Karen does not download \" Black Mirror \" .", "3": "Karen will not binge - watch \" Black Mirror \" ."}, {"0": "Karen binge - watches a Netflix show .", "1": "Karen will share a Netflix show to Lisa .", "2": "Karen will not binge - watch \" Black Mirror \" .", "3": "Karen will not share \" Black Mirror \" to Lisa ."}], "errors": [[]], "entailments_dict": [{}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Beijing has hosted both the 2008 Summer Olympics and a winter olympics?", "id": "24", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Beijing hosted the 2008 Summer Olympics.\nConclusion 1: Beijing has hosted the Summer Olympics.\nPremise 2.1: Beijing has hosted the Summer Olympics.\nPremise 2.2: Beijing has hosted both the Summer and Winter Olympics.\nConclusion 2: Beijing has hosted a Winter Olympics.\nPremise 3.1: Beijing has hosted the 2008 Summer Olympics.\nPremise 3.2: Beijing has hosted both the Summer and Winter Olympics.\nConclusion 3: Beijing has hosted a Winter Olympics.\nAnswer: A. Yes.\n\nNote: The passage states that Beijing has hosted both the Summer and Winter Olympics, but it does not specify which Winter Olympics were hosted in Beijing. Therefore, it is not possible to determine which specific Winter Olympics were hosted in Beijing. However, the answer to the question \"Is it true that Beijing has hosted both the 2008 Summer Olympics and a winter olympics?\" is still \"Yes\" because the passage states that Beijing has hosted both the Summer and Winter Olympics.", "logic_premises": "[[0], [0, 1], [0, 1]]", "logic_conclusion": "[1, 2, 2]", "correspondance": [{"0": "Beijing hosted the 2008 Summer Olympics .", "1": "Beijing has hosted the Summer Olympics ."}, {"0": "Beijing has hosted the Summer Olympics .", "1": "Beijing has hosted both the Summer and Winter Olympics .", "2": "Beijing has hosted a Winter Olympics ."}, {"0": "Beijing has hosted the 2008 Summer Olympics .", "1": "Beijing has hosted both the Summer and Winter Olympics .", "2": "Beijing has hosted a Winter Olympics ."}], "errors": [[]], "entailments_dict": [{}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Beijing is located in southern China?", "id": "25", "ground_truth": "Uncertain", "reasoning": "<s> [INST] You will be presented with a passage and a question about that passage. There are options to be chosen from, only one of which is the correct answer. You need to write your step-by-step reasoning and conclude with the answer. One reasoning step should consist of a set of premises and one conclusion. The conclusion can be deduced immediately from the premises. Premises can only be sentences from the passage or previous conclusions. \nHere is an example:\nExample Passage: Last night, Mark either went to play in the gym or visited his teacher Tony. If Mark drove last night, he didn't go to play in the gym. Mark would go visit his teacher Tony only if he and his teacher had an appointment. In fact, Mark had no appointment with his teacher Tony in advance.\nExample Question: Is it true that Mark drove last night?\nExample Options: \nA. Yes.\nB. No.\nC. Uncertain.\n [/INST]Example Reasoning:\nPremise 1.1: Mark would go visit his teacher Tony only if he had an appointment. \nPremise 1.2: Mark had no appointment with his teacher Tony.\nConclusion 1: Mark didn't visit his teacher, Tony.\nPremise 2.1: Mark either went to the gym or visited his teacher Tony.\nPremise 2.2: Mark didn't visit his teacher Tony. \nConclusion 2: Mark went to the gym.\nPremise 3.1: If Mark drove last night, he didn't go to play in the gym.\nPremise 3.2: Mark went to the gym.\nConclusion 3: Mark didn't drive last night.\nPremise 4.1: Mark didn't drive last night.\nAnswer: B. No.\n [INST] Here is an other example:\nExample Passage: David knows Mr. Zhang's friend Jack, and Jack knows David's friend Ms. Lin. Everyone of them who knows Jack has a master's degree, and everyone of them who knows Ms. Lin is from Shanghai.\nExample Question: Is it true that David is from Shanghai?\nExample Options:\nA. Yes.\nB. No.\nC. Uncertain.\n [/INST]Example Reasoning:\nPremise 1.1: David knows Mr. Zhang's friend Jack, and Jack knows David's friend Ms. Lin.\nConclusion 1: David is friend with Ms. Lin.\nPremise 2.1: David is friend with Ms. Lin.\nPremise 2.2: Everyone of them who knows Jack has a master's degree, and everyone of them who knows Ms. Lin is from Shanghai.\nConclusion 2: David is from Shanghai.\nPremise 3.1: David is from Shanghai.\nAnswer: A. Yes.\n [INST] Passage: Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nQuestion: Is it true that Beijing is located in southern China?\nOptions:\nA. Yes\nB. No\nC. Uncertain\n [/INST]Reasoning:\nPremise 1.1: Beijing is located in Northern China.\nConclusion 1: Beijing is not located in Southern China.\nAnswer: B. No.\n\nExplanation:\n\n* The passage states that Beijing is located in Northern China.\n* Therefore, it is not located in Southern China.\n* The answer is B: No.", "logic_premises": "[[0, ((4→5)∪((6→7)∪(8→9)))], [(0∨1), 2], [(0→1), 2], [0, (1∧2)], [0, (((6→7)∧(8→9))∪(((a→b)∧(c→d))∪(((e→f)∧(g→h))∪((i→j)∧(k→l)))))], [0, 1]]", "logic_conclusion": "[3, 3, 3, 3, 5, 2]", "correspondance": [{"0": "Mark would go visit Mark 's teacher Tony that Mark had an appointment .", "1": "X is an appointment with Mark 's teacher Tony .", "2": "Mark did not have X .", "3": "Mark did n't visit Mark 's teacher , Tony .", "4": "Mark is an appointment with Mark 's teacher Tony .", "5": "Mark did not have Mark .", "6": "his teacher Tony is an appointment with Mark 's teacher Tony .", "7": "Mark did not have his teacher Tony .", "8": "his teacher, Tony is an appointment with Mark 's teacher Tony .", "9": "Mark did not have his teacher, Tony ."}, {"0": "Mark either went to the gym .", "1": "Mark either visited Mark 's teacher Tony .", "2": "Mark did n't visit Mark 's teacher Tony .", "3": "Mark went to the gym ."}, {"0": "Mark drove last night .", "1": "Mark did n't go to play in the gym .", "2": "Mark went to the gym .", "3": "Mark did n't drive last night ."}, {"0": "Mark did n't drive last night .", "1": "David knows Mr. Zhang 's friend Jack .", "2": "Mr. Zhang 's friend Jack knows David 's friend Ms. Lin .", "3": "David is friend with David 's friend Ms. Lin ."}, {"0": "David is friend with Ms. Lin .", "1": "X is a person of them who knows Jack .", "2": "X has a master 's degree .", "3": "X is a person of them who knows Ms. Lin .", "4": "X is from Shanghai .", "5": "David is from Shanghai .", "6": "Shanghai is a person of them who knows Jack .", "7": "Shanghai has a master 's degree .", "8": "Shanghai is a person of them who knows Ms. Lin .", "9": "Shanghai is from Shanghai .", "a": "Jack is a person of them who knows Jack .", "b": "Jack has a master 's degree .", "c": "Jack is a person of them who knows Ms. Lin .", "d": "Jack is from Shanghai .", "e": "Ms. Lin is a person of them who knows Jack .", "f": "Ms. Lin has a master 's degree .", "g": "Ms. Lin is a person of them who knows Ms. Lin .", "h": "Ms. Lin is from Shanghai .", "i": "David is a person of them who knows Jack .", "j": "David has a master 's degree .", "k": "David is a person of them who knows Ms. Lin .", "l": "David is from Shanghai ."}, {"0": "David is from Shanghai .", "1": "Beijing is located in Northern China .", "2": "Beijing is not located in Southern China ."}], "errors": [[]], "entailments_dict": [{}, {}, {}, {}, {"l": ["5"]}, {}], "predicted_steps": [false, false, false, false, false, false]}
{"text": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Beijing is the second largest Chinese city by urban population?", "id": "26", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: The passage states that Beijing is the world's most populous national capital city.\nPremise 1.2: The passage does not provide information about the urban population of other Chinese cities.\nConclusion 1: The passage does not provide enough information to determine if Beijing is the second largest Chinese city by urban population.\nAnswer: C. Uncertain.", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "the passage states that Beijing is the world 's most populous national capital city .", "1": "the passage does not provide information about the urban population of other Chinese cities .", "2": "the passage does not provide enough information to determine if Beijing is the second largest Chinese city by urban population ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Marvin is an alien?", "id": "27", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All aliens are extraterrestrial.\nPremise 1.2: If someone is from Mars, then they are aliens.\nPremise 1.3: No extraterrestrial is human.\nPremise 1.4: Everyone from Earth is a human.\nPremise 1.5: Marvin cannot be from Earth and from Mars.\nPremise 1.6: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nPremise 1.7: If Marvin is an extraterrestrial, then Marvin is an alien.\nConclusion 1: If Marvin is from Mars, then Marvin is an alien.\nPremise 2.1: Marvin cannot be from Earth and from Mars.\nPremise 2.2: Everyone from Earth is a human.\nPremise 2.3: Marvin is not from Earth.\nConclusion 2: Marvin is an extraterrestrial.\nConclusion 3: Marvin is an alien.\nAnswer: A. Yes.", "logic_premises": "[[((f→g)∪((h→i)∪(j→k))), ((l→m)∪((n→o)∪(p→q))), ((r→s)∪((t→u)∪(v→w))), ((x→y)∪((z→A)∪(B→C))), 8, (9→a), (b→c)], [0, ((5→6)∪((7→8)∪(9→a))), 3]]", "logic_conclusion": "[(d→e), 4]", "correspondance": [{"0": "X is an alien .", "1": "X is extraterrestrial .", "2": "X is from Mars .", "3": "X are aliens .", "4": "X is an extraterrestrial .", "5": "X is not human .", "6": "X is a person from Earth .", "7": "X is a human .", "8": "Marvin can not be from Earth and from Mars .", "9": "Marvin is not from Earth .", "a": "Marvin is an extraterrestrial .", "b": "Marvin is an extraterrestrial .", "c": "Marvin is an alien .", "d": "Marvin is from Mars .", "e": "Marvin is an alien .", "f": "Marvin is an alien .", "g": "Marvin is extraterrestrial .", "h": "Mars is an alien .", "i": "Mars is extraterrestrial .", "j": "Earth is an alien .", "k": "Earth is extraterrestrial .", "l": "Marvin is from Mars .", "m": "Marvin are aliens .", "n": "Mars is from Mars .", "o": "Mars are aliens .", "p": "Earth is from Mars .", "q": "Earth are aliens .", "r": "Marvin is an extraterrestrial .", "s": "Marvin is not human .", "t": "Mars is an extraterrestrial .", "u": "Mars is not human .", "v": "Earth is an extraterrestrial .", "w": "Earth is not human .", "x": "Marvin is a person from Earth .", "y": "Marvin is a human .", "z": "Mars is a person from Earth .", "A": "Mars is a human .", "B": "Earth is a person from Earth .", "C": "Earth is a human ."}, {"0": "Marvin can not be from Earth and from Mars .", "1": "X is a person from Earth .", "2": "X is a human .", "3": "Marvin is not from Earth .", "4": "Marvin is an extraterrestrial .", "5": "Marvin is a person from Earth .", "6": "Marvin is a human .", "7": "Mars is a person from Earth .", "8": "Mars is a human .", "9": "Earth is a person from Earth .", "a": "Earth is a human ."}], "errors": [[]], "entailments_dict": [{"c": ["f", "e"], "a": ["b", "r"], "d": ["l"], "w": ["(¬C)"], "A": ["(¬u)"], "y": ["(¬s)"], "u": ["(¬A)"], "s": ["(¬y)"], "C": ["(¬w)"], "(¬9)": ["x"], "(¬x)": ["9"]}, {"(¬3)": ["5"], "(¬5)": ["3"]}], "predicted_steps": [false, false]}
{"text": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Marvin is neither a human nor from Mars?", "id": "28", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All aliens are extraterrestrial.\nPremise 1.2: If someone is from Mars, then they are aliens.\nPremise 1.3: No extraterrestrial is human.\nPremise 1.4: Everyone from Earth is a human.\nPremise 1.5: Marvin cannot be from Earth and from Mars.\nPremise 1.6: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nConclusion 1: Marvin is an extraterrestrial if and only if Marvin is from Mars.\nPremise 2.1: Marvin cannot be from Earth and from Mars.\nPremise 2.2: Marvin is not from Earth.\nConclusion 2: Marvin is from Mars.\nPremise 3.1: Marvin is from Mars.\nPremise 3.2: No extraterrestrial is human.\nConclusion 3: Marvin is not a human.\nAnswer: B. No.", "logic_premises": "[[((c→d)∪((e→f)∪(g→h))), ((i→j)∪((k→l)∪(m→n))), ((o→p)∪((q→r)∪(s→t))), ((u→v)∪((w→x)∪(y→z))), 8, (9→a)], [0, 1], [0, ((4→5)∪(6→7))]]", "logic_conclusion": "[b, 2, 3]", "correspondance": [{"0": "X is an alien .", "1": "X is extraterrestrial .", "2": "X is from Mars .", "3": "X are aliens .", "4": "X is an extraterrestrial .", "5": "X is not human .", "6": "X is a person from Earth .", "7": "X is a human .", "8": "Marvin can not be from Earth and from Mars .", "9": "Marvin is not from Earth .", "a": "Marvin is an extraterrestrial .", "b": "Marvin is an extraterrestrial that Marvin is from Mars .", "c": "Marvin is an alien .", "d": "Marvin is extraterrestrial .", "e": "Mars is an alien .", "f": "Mars is extraterrestrial .", "g": "Earth is an alien .", "h": "Earth is extraterrestrial .", "i": "Marvin is from Mars .", "j": "Marvin are aliens .", "k": "Mars is from Mars .", "l": "Mars are aliens .", "m": "Earth is from Mars .", "n": "Earth are aliens .", "o": "Marvin is an extraterrestrial .", "p": "Marvin is not human .", "q": "Mars is an extraterrestrial .", "r": "Mars is not human .", "s": "Earth is an extraterrestrial .", "t": "Earth is not human .", "u": "Marvin is a person from Earth .", "v": "Marvin is a human .", "w": "Mars is a person from Earth .", "x": "Mars is a human .", "y": "Earth is a person from Earth .", "z": "Earth is a human ."}, {"0": "Marvin can not be from Earth and from Mars .", "1": "Marvin is not from Earth .", "2": "Marvin is from Mars ."}, {"0": "Marvin is from Mars .", "1": "X is an extraterrestrial .", "2": "X is not human .", "3": "Marvin is not a human .", "4": "Mars is an extraterrestrial .", "5": "Mars is not human .", "6": "Marvin is an extraterrestrial .", "7": "Marvin is not human ."}], "errors": [[]], "entailments_dict": [{"a": ["o"], "r": ["(¬x)"], "z": ["(¬t)"], "p": ["(¬v)"], "t": ["(¬z)"], "x": ["(¬r)"], "v": ["(¬p)"], "(¬9)": ["u"], "(¬u)": ["9"]}, {}, {"7": ["3"]}], "predicted_steps": [false, false, false]}
{"text": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Marvin is not from Mars, then Marvin is a human?", "id": "29", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: All aliens are extraterrestrial.\nPremise 1.2: If someone is from Mars, then they are aliens.\nPremise 1.3: No extraterrestrial is human.\nPremise 1.4: Everyone from Earth is a human.\nPremise 1.5: Marvin cannot be from Earth and from Mars.\nPremise 1.6: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nPremise 2.1: If Marvin is not from Mars, then Marvin is not an alien.\nPremise 2.2: If Marvin is not an alien, then Marvin is not extraterrestrial.\nPremise 2.3: If Marvin is not extraterrestrial, then Marvin is human.\nConclusion 1: If Marvin is not from Mars, then Marvin is human.\nAnswer: A. Yes.\n\nExplanation:\n\n* If Marvin is not from Mars, then Marvin is not an alien (from premise 1.2 and 1.1)\n* If Marvin is not an alien, then Marvin is not extraterrestrial (from premise 1.3)\n* If Marvin is not extraterrestrial, then Marvin is human (from premise 1.4)\n* Therefore, if Marvin is not from Mars, then Marvin is human.", "logic_premises": "[[((j→k)∪((l→m)∪(n→o))), ((p→q)∪((r→s)∪(t→u))), ((v→w)∪((x→y)∪(z→A))), ((B→C)∪((D→E)∪(F→G))), 8, (9→a), (b→c), (d→e), (f→g)]]", "logic_conclusion": "[(h→i)]", "correspondance": [{"0": "X is an alien .", "1": "X is extraterrestrial .", "2": "X is from Mars .", "3": "X are aliens .", "4": "X is an extraterrestrial .", "5": "X is not human .", "6": "X is a person from Earth .", "7": "X is a human .", "8": "Marvin can not be from Earth and from Mars .", "9": "Marvin is not from Earth .", "a": "Marvin is an extraterrestrial .", "b": "Marvin is not from Mars .", "c": "Marvin is not an alien .", "d": "Marvin is not an alien .", "e": "Marvin is not extraterrestrial .", "f": "Marvin is not extraterrestrial .", "g": "Marvin is human .", "h": "Marvin is not from Mars .", "i": "Marvin is human .", "j": "Marvin is an alien .", "k": "Marvin is extraterrestrial .", "l": "Mars is an alien .", "m": "Mars is extraterrestrial .", "n": "Earth is an alien .", "o": "Earth is extraterrestrial .", "p": "Marvin is from Mars .", "q": "Marvin are aliens .", "r": "Mars is from Mars .", "s": "Mars are aliens .", "t": "Earth is from Mars .", "u": "Earth are aliens .", "v": "Marvin is an extraterrestrial .", "w": "Marvin is not human .", "x": "Mars is an extraterrestrial .", "y": "Mars is not human .", "z": "Earth is an extraterrestrial .", "A": "Earth is not human .", "B": "Marvin is a person from Earth .", "C": "Marvin is a human .", "D": "Mars is a person from Earth .", "E": "Mars is a human .", "F": "Earth is a person from Earth .", "G": "Earth is a human ."}], "errors": [[]], "entailments_dict": [{"a": ["v"], "e": ["f", "(¬k)"], "c": ["d"], "h": ["b"], "C": ["i", "(¬w)"], "g": ["i", "(¬w)"], "w": ["(¬C)", "(¬g)"], "k": ["(¬e)"], "y": ["(¬E)"], "A": ["(¬G)"], "E": ["(¬y)"], "G": ["(¬A)"], "(¬d)": ["j"], "(¬9)": ["B"], "(¬j)": ["d"], "(¬b)": ["p"], "(¬B)": ["9"], "(¬p)": ["b"]}], "predicted_steps": [true]}
{"text": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Djokovic is a Grand Slam champion?", "id": "30", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: A person is either a Grand Slam champion or an Oscar-nominated actor.\nPremise 1.2: All people who are Grand Slam champions are professional tennis players.\nPremise 1.3: All professional tennis players are athletes.\nPremise 1.4: If Djokovic is famous and is an athlete, then Djokovic lives in tax havens.\nPremise 2.1: Djokovic is famous and is an athlete.\nPremise 2.2: If a person is an athlete, then they are famous.\nPremise 2.3: All well-paid people live in tax havens.\nConclusion 1: Djokovic is an athlete.\nConclusion 2: Djokovic is famous.\nConclusion 3: Djokovic lives in a tax haven.\nConclusion 4: Djokovic is not an Oscar-nominated actor.\nConclusion 5: Djokovic is a professional tennis player.\nConclusion 6: Djokovic is not a Grand Slam champion.\nAnswer: B. No.\n\nNote: The conclusion 6 is based on the premise 1.2, which states that all Grand Slam champions are professional tennis players, and the conclusion 5, which states that Djokovic is a professional tennis player. Since Djokovic is not a Grand Slam champion, but still a professional tennis player, it is not possible to conclude that Djokovic is a Grand Slam champion.", "logic_premises": "[[((i→(j⊻k))∪((l→(m⊻n))∪(o→(p⊻q)))), ((r→s)∪((t→u)∪(v→w))), ((x→y)∪((z→A)∪(B→C))), ((7∧8)→9), (a∧b), (((D∧E)→F)∪(((G∧H)→I)∪((J∧K)→L))), ((M→N)∪((O→P)∪(Q→R)))]]", "logic_conclusion": "[h]", "correspondance": [{"0": "X is A person", "1": "X is a Grand Slam champion .", "2": "X is an Oscar - nominated actor .", "3": "X is a person who is Grand Slam champions .", "4": "X is professional tennis a player .", "5": "X is a professional tennis player .", "6": "X is an athlete .", "7": "Djokovic is famous .", "8": "Djokovic is an athlete .", "9": "Djokovic lives in tax havens .", "a": "Djokovic is famous .", "b": "Djokovic is an athlete .", "c": "X is a person", "d": "X is an athlete .", "e": "X are famous .", "f": "X is a well - paid person .", "g": "X lives in tax havens .", "h": "Djokovic is an athlete .", "i": "Grand Slam champions is A person", "j": "Grand Slam champions is a Grand Slam champion .", "k": "Grand Slam champions is an Oscar - nominated actor .", "l": "Oscar is A person", "m": "Oscar is a Grand Slam champion .", "n": "Oscar is an Oscar - nominated actor .", "o": "Djokovic is A person", "p": "Djokovic is a Grand Slam champion .", "q": "Djokovic is an Oscar - nominated actor .", "r": "Grand Slam champions is a person who is Grand Slam champions .", "s": "Grand Slam champions is professional tennis a player .", "t": "Oscar is a person who is Grand Slam champions .", "u": "Oscar is professional tennis a player .", "v": "Djokovic is a person who is Grand Slam champions .", "w": "Djokovic is professional tennis a player .", "x": "Grand Slam champions is a professional tennis player .", "y": "Grand Slam champions is an athlete .", "z": "Oscar is a professional tennis player .", "A": "Oscar is an athlete .", "B": "Djokovic is a professional tennis player .", "C": "Djokovic is an athlete .", "D": "Grand Slam champions is a person", "E": "Grand Slam champions is an athlete .", "F": "Grand Slam champions are famous .", "G": "Oscar is a person", "H": "Oscar is an athlete .", "I": "Oscar are famous .", "J": "Djokovic is a person", "K": "Djokovic is an athlete .", "L": "Djokovic are famous .", "M": "Grand Slam champions is a well - paid person .", "N": "Grand Slam champions lives in tax havens .", "O": "Oscar is a well - paid person .", "P": "Oscar lives in tax havens .", "Q": "Djokovic is a well - paid person .", "R": "Djokovic lives in tax havens ."}], "errors": [[]], "entailments_dict": [{"L": ["7", "a"], "A": ["H"], "w": ["B"], "s": ["x"], "C": ["K", "b", "8", "h"], "a": ["7"], "y": ["E"], "b": ["8", "K", "h"], "u": ["z"], "h": ["8", "b", "K"]}], "predicted_steps": [true]}
{"text": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Djokovic lives in a tax haven?", "id": "31", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: A person is either a Grand Slam champion or an Oscar-nominated actor.\nPremise 1.2: All people who are Grand Slam champions are professional tennis players.\nPremise 1.3: All Oscar-nominated actors are celebrities.\nPremise 1.4: All professional tennis players are athletes.\nPremise 1.5: If a person is a celebrity then they are well paid.\nPremise 1.6: If a person is an athlete then they are famous.\nPremise 1.7: All well-paid people live in tax havens.\nPremise 1.8: If Djokovic is famous and is an athlete, then Djokovic lives in a tax haven.\nPremise 2.1: Djokovic is a Grand Slam champion.\nPremise 2.2: Djokovic is a professional tennis player.\nPremise 2.3: Djokovic is an athlete.\nPremise 2.4: Djokovic is a celebrity.\nPremise 2.5: Djokovic is famous.\nConclusion 1: Djokovic is a well-paid person.\nConclusion 2: Djokovic lives in a tax haven.\nPremise 3.1: Djokovic lives in a tax haven.\nAnswer: A. Yes.", "logic_premises": "[[((q→(r⊻s))∪((t→(u⊻v))∪(w→(x⊻y)))), ((z→A)∪((B→C)∪(D→E))), ((F→G)∪((H→I)∪(J→K))), ((L→M)∪((N→O)∪(P→Q))), (((R∧S)→T)∪(((U∧V)→W)∪((X∧Y)→Z))), (((!∧\")→#)∪((($∧%)→&)∪((*∧+)→,))), ((-→.)∪((/→:)∪(;→<))), ((h∧i)→j), k, l, m, n, o]]", "logic_conclusion": "[p]", "correspondance": [{"0": "X is A person", "1": "X is a Grand Slam champion .", "2": "X is an Oscar - nominated actor .", "3": "X is a person who is Grand Slam champions .", "4": "X is professional tennis a player .", "5": "X is an Oscar - nominated actor .", "6": "X is a celebrity .", "7": "X is a professional tennis player .", "8": "X is an athlete .", "9": "X is a person", "a": "X is a celebrity .", "b": "X are well paid .", "c": "X is a person", "d": "X is an athlete .", "e": "X are famous .", "f": "X is a well - paid person .", "g": "X lives in tax havens .", "h": "Djokovic is famous .", "i": "Djokovic is an athlete .", "j": "Djokovic lives in a tax haven .", "k": "Djokovic is a Grand Slam champion .", "l": "Djokovic is a professional tennis player .", "m": "Djokovic is an athlete .", "n": "Djokovic is a celebrity .", "o": "Djokovic is famous .", "p": "Djokovic is a well - paid person .", "q": "Grand Slam champions is A person", "r": "Grand Slam champions is a Grand Slam champion .", "s": "Grand Slam champions is an Oscar - nominated actor .", "t": "Oscar is A person", "u": "Oscar is a Grand Slam champion .", "v": "Oscar is an Oscar - nominated actor .", "w": "Djokovic is A person", "x": "Djokovic is a Grand Slam champion .", "y": "Djokovic is an Oscar - nominated actor .", "z": "Grand Slam champions is a person who is Grand Slam champions .", "A": "Grand Slam champions is professional tennis a player .", "B": "Oscar is a person who is Grand Slam champions .", "C": "Oscar is professional tennis a player .", "D": "Djokovic is a person who is Grand Slam champions .", "E": "Djokovic is professional tennis a player .", "F": "Grand Slam champions is an Oscar - nominated actor .", "G": "Grand Slam champions is a celebrity .", "H": "Oscar is an Oscar - nominated actor .", "I": "Oscar is a celebrity .", "J": "Djokovic is an Oscar - nominated actor .", "K": "Djokovic is a celebrity .", "L": "Grand Slam champions is a professional tennis player .", "M": "Grand Slam champions is an athlete .", "N": "Oscar is a professional tennis player .", "O": "Oscar is an athlete .", "P": "Djokovic is a professional tennis player .", "Q": "Djokovic is an athlete .", "R": "Grand Slam champions is a person", "S": "Grand Slam champions is a celebrity .", "T": "Grand Slam champions are well paid .", "U": "Oscar is a person", "V": "Oscar is a celebrity .", "W": "Oscar are well paid .", "X": "Djokovic is a person", "Y": "Djokovic is a celebrity .", "Z": "Djokovic are well paid .", "!": "Grand Slam champions is a person", "\"": "Grand Slam champions is an athlete .", "#": "Grand Slam champions are famous .", "$": "Oscar is a person", "%": "Oscar is an athlete .", "&": "Oscar are famous .", "*": "Djokovic is a person", "+": "Djokovic is an athlete .", ",": "Djokovic are famous .", "-": "Grand Slam champions is a well - paid person .", ".": "Grand Slam champions lives in tax havens .", "/": "Oscar is a well - paid person .", ":": "Oscar lives in tax havens .", ";": "Djokovic is a well - paid person .", "<": "Djokovic lives in tax havens ."}], "errors": [[]], "entailments_dict": [{"x": ["k"], "G": ["S"], "Q": ["+", "m", "i"], "K": ["Y", "n"], "E": ["l", "P"], "m": ["+", "i"], "A": ["L"], "l": ["P"], "y": ["J"], "s": ["F"], "v": ["H"], ",": ["h", "o"], "O": ["%"], "n": ["Y"], "C": ["N"], "o": ["h"], "M": ["\""], "I": ["V"], "p": [";"]}], "predicted_steps": [false]}
{"text": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Djokovic does not live in a tax haven?", "id": "32", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: A person is either a Grand Slam champion or an Oscar-nominated actor.\nPremise 1.2: All people who are Grand Slam champions are professional tennis players.\nPremise 1.3: All Oscar-nominated actors are celebrities.\nPremise 1.4: All professional tennis players are athletes.\nPremise 1.5: If a person is a celebrity then they are well paid.\nPremise 1.6: If a person is an athlete then they are famous.\nPremise 1.7: All well-paid people live in tax havens.\nPremise 1.8: If Djokovic is famous and is an athlete, then Djokovic lives in a tax haven.\nPremise 2.1: Djokovic is a Grand Slam champion.\nPremise 2.2: Djokovic is a professional tennis player.\nPremise 2.3: Djokovic is an athlete.\nPremise 2.4: Djokovic is a celebrity.\nPremise 2.5: Djokovic is famous.\nConclusion 1: Djokovic is a well-paid person.\nConclusion 2: Djokovic lives in a tax haven.\nPremise 3.1: Djokovic lives in a tax haven.\nAnswer: A. Yes.\n\nExplanation:\n\n* From the passage, we know that Djokovic is a Grand Slam champion, which means he is a professional tennis player, which means he is an athlete.\n* As an athlete, Djokovic is famous, and as a celebrity, he is well-paid.\n* As a well-paid person, Djokovic lives in a tax haven.\n* Therefore, it is true that Djokovic does not live in a tax haven.", "logic_premises": "[[((q→(r⊻s))∪((t→(u⊻v))∪(w→(x⊻y)))), ((z→A)∪((B→C)∪(D→E))), ((F→G)∪((H→I)∪(J→K))), ((L→M)∪((N→O)∪(P→Q))), (((R∧S)→T)∪(((U∧V)→W)∪((X∧Y)→Z))), (((!∧\")→#)∪((($∧%)→&)∪((*∧+)→,))), ((-→.)∪((/→:)∪(;→<))), ((h∧i)→j), k, l, m, n, o]]", "logic_conclusion": "[p]", "correspondance": [{"0": "X is A person", "1": "X is a Grand Slam champion .", "2": "X is an Oscar - nominated actor .", "3": "X is a person who is Grand Slam champions .", "4": "X is professional tennis a player .", "5": "X is an Oscar - nominated actor .", "6": "X is a celebrity .", "7": "X is a professional tennis player .", "8": "X is an athlete .", "9": "X is a person", "a": "X is a celebrity .", "b": "X are well paid .", "c": "X is a person", "d": "X is an athlete .", "e": "X are famous .", "f": "X is a well - paid person .", "g": "X lives in tax havens .", "h": "Djokovic is famous .", "i": "Djokovic is an athlete .", "j": "Djokovic lives in a tax haven .", "k": "Djokovic is a Grand Slam champion .", "l": "Djokovic is a professional tennis player .", "m": "Djokovic is an athlete .", "n": "Djokovic is a celebrity .", "o": "Djokovic is famous .", "p": "Djokovic is a well - paid person .", "q": "Grand Slam champions is A person", "r": "Grand Slam champions is a Grand Slam champion .", "s": "Grand Slam champions is an Oscar - nominated actor .", "t": "Oscar is A person", "u": "Oscar is a Grand Slam champion .", "v": "Oscar is an Oscar - nominated actor .", "w": "Djokovic is A person", "x": "Djokovic is a Grand Slam champion .", "y": "Djokovic is an Oscar - nominated actor .", "z": "Grand Slam champions is a person who is Grand Slam champions .", "A": "Grand Slam champions is professional tennis a player .", "B": "Oscar is a person who is Grand Slam champions .", "C": "Oscar is professional tennis a player .", "D": "Djokovic is a person who is Grand Slam champions .", "E": "Djokovic is professional tennis a player .", "F": "Grand Slam champions is an Oscar - nominated actor .", "G": "Grand Slam champions is a celebrity .", "H": "Oscar is an Oscar - nominated actor .", "I": "Oscar is a celebrity .", "J": "Djokovic is an Oscar - nominated actor .", "K": "Djokovic is a celebrity .", "L": "Grand Slam champions is a professional tennis player .", "M": "Grand Slam champions is an athlete .", "N": "Oscar is a professional tennis player .", "O": "Oscar is an athlete .", "P": "Djokovic is a professional tennis player .", "Q": "Djokovic is an athlete .", "R": "Grand Slam champions is a person", "S": "Grand Slam champions is a celebrity .", "T": "Grand Slam champions are well paid .", "U": "Oscar is a person", "V": "Oscar is a celebrity .", "W": "Oscar are well paid .", "X": "Djokovic is a person", "Y": "Djokovic is a celebrity .", "Z": "Djokovic are well paid .", "!": "Grand Slam champions is a person", "\"": "Grand Slam champions is an athlete .", "#": "Grand Slam champions are famous .", "$": "Oscar is a person", "%": "Oscar is an athlete .", "&": "Oscar are famous .", "*": "Djokovic is a person", "+": "Djokovic is an athlete .", ",": "Djokovic are famous .", "-": "Grand Slam champions is a well - paid person .", ".": "Grand Slam champions lives in tax havens .", "/": "Oscar is a well - paid person .", ":": "Oscar lives in tax havens .", ";": "Djokovic is a well - paid person .", "<": "Djokovic lives in tax havens ."}], "errors": [[]], "entailments_dict": [{"x": ["k"], "G": ["S"], "Q": ["+", "m", "i"], "K": ["Y", "n"], "E": ["l", "P"], "m": ["+", "i"], "A": ["L"], "l": ["P"], "y": ["J"], "s": ["F"], "v": ["H"], ",": ["h", "o"], "O": ["%"], "n": ["Y"], "C": ["N"], "o": ["h"], "M": ["\""], "I": ["V"], "p": [";"]}], "predicted_steps": [false]}
{"text": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Roderick strong leads a professional wrestling stable?", "id": "33", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Diamond Mine is a professional wrestling stable, formed in WWE.\nPremise 1.2: Roderick Strong leads Diamond Mine.\nConclusion 1: Roderick Strong leads a professional wrestling stable.\nPremise 2.1: Roderick Strong leads a professional wrestling stable.\nAnswer: A. Yes.", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "Diamond Mine is a professional wrestling stable , formed in WWE .", "1": "Roderick Strong leads Diamond Mine .", "2": "Roderick Strong leads a professional wrestling stable ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Roderick strong leads the Creed Brothers?", "id": "34", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Diamond Mine is a professional wrestling stable, formed in WWE.\nPremise 1.2: Roderick Strong leads Diamond Mine.\nPremise 1.3: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nConclusion 1: Roderick Strong leads the Creed Brothers.\nAnswer: A. Yes.\n\nExplanation:\n\n* Premise 1.1 is given in the passage.\n* Premise 1.2 is given in the passage.\n* Premise 1.3 is given in the passage.\n* Conclusion 1 is deduced from Premise 1.2 and 1.3, as Roderick Strong is the leader of Diamond Mine, and the Creed Brothers are a part of Diamond Mine.", "logic_premises": "[[0, 1, (2∧3)]]", "logic_conclusion": "[4]", "correspondance": [{"0": "Diamond Mine is a professional wrestling stable , formed in WWE .", "1": "Roderick Strong leads Diamond Mine .", "2": "Diamond Mine includes the Creed Brothers .", "3": "Diamond Mine includes Ivy Nile .", "4": "Roderick Strong leads the Creed Brothers ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile?", "id": "35", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Diamond Mine is a professional wrestling stable, formed in WWE.\nPremise 1.2: Roderick Strong leads Diamond Mine.\nPremise 1.3: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nPremise 2.1: Imperium has a feud with Diamond Mine.\nConclusion 1: Imperium has a feud with a professional wrestling stable that includes Ivy Nile.\nAnswer: A. Yes.\n\nExplanation:\n\n1. The passage states that Diamond Mine is a professional wrestling stable, and it includes Ivy Nile.\n2. The passage also states that Imperium has a feud with Diamond Mine.\n3. Therefore, it is true that Imperium has a feud with a professional wrestling stable that includes Ivy Nile.", "logic_premises": "[[0, 1, (2∧3), 4]]", "logic_conclusion": "[5]", "correspondance": [{"0": "Diamond Mine is a professional wrestling stable , formed in WWE .", "1": "Roderick Strong leads Diamond Mine .", "2": "Diamond Mine includes the Creed Brothers .", "3": "Diamond Mine includes Ivy Nile .", "4": "Imperium has a feud with Diamond Mine .", "5": "Imperium has a feud with a professional wrestling stable that includes Ivy Nile ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Beethoven is a composer?", "id": "36", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Composers write music pieces.\nPremise 1.2: Beethoven wrote Symphony No. 9.\nConclusion 1: Beethoven is a composer.\nPremise 2.1: Beethoven is a composer.\nAnswer: A. Yes.\n\nExplanation:\n\n1. Premise 1.1 states that composers write music pieces.\n2. Premise 1.2 states that Beethoven wrote Symphony No. 9.\n3. From these two premises, we can conclude that Beethoven is a composer.\n4. The answer is A. Yes, Beethoven is a composer.", "logic_premises": "[[((5→6)∪(7→8)), ((9→a)∪(b→c))]]", "logic_conclusion": "[4]", "correspondance": [{"0": "X is a Composer .", "1": "X writes music pieces .", "2": "X is a Symphony . 9 .", "3": "Beethoven did not write X .", "4": "Beethoven is a composer .", "5": "Symphony No. 9 is a Composer .", "6": "Symphony No. 9 writes music pieces .", "7": "Beethoven is a Composer .", "8": "Beethoven writes music pieces .", "9": "Symphony No. 9 is a Symphony . 9 .", "a": "Beethoven did not write Symphony No. 9 .", "b": "Beethoven is a Symphony . 9 .", "c": "Beethoven did not write Beethoven ."}], "errors": [[]], "entailments_dict": [{"4": ["7"]}], "predicted_steps": [false]}
{"text": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some orchestras premiered music pieces?", "id": "37", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Vienna Music Society is an orchestra.\nPremise 1.2: Vienna Music Society premiered Symphony No. 9.\nPremise 1.3: Symphony No. 9 is a music piece.\nPremise 1.4: Beethoven leads the Vienna Music Society.\nPremise 1.5: Orchestras are led by conductors.\nConclusion 1: Vienna Music Society, an orchestra, premiered a music piece (Symphony No. 9).\n\nPremise 2.1: Conclusion 1: Vienna Music Society, an orchestra, premiered a music piece (Symphony No. 9).\nPremise 2.2: There exists at least one orchestra (Vienna Music Society) that premiered a music piece (Symphony No. 9).\nAnswer: A. Yes.", "logic_premises": "[[]]", "logic_conclusion": "['-1']", "correspondance": [{"0": "Vienna Music Society is an orchestra .", "1": "X is a Symphony . 9 .", "2": "Vienna Music Society did not premiere X .", "3": "Symphony No . 9 is a music piece .", "4": "Beethoven leads Vienna Music Society .", "5": "Orchestras are led by conductors ."}], "errors": ["Logic Transform Error -  Step n°: 0 sentence not supported", ["Entailments Error -  Step n°: 0 'str' object has no attribute 'get_variables_implications'"]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Beethoven is not a conductor?", "id": "38", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Beethoven wrote Symphony No. 9.\nPremise 1.2: Vienna Music Society premiered Symphony No. 9.\nPremise 1.3: Vienna Music Society is an orchestra.\nPremise 1.4: Orchestras are led by conductors.\nPremise 1.5: Beethoven leads the Vienna Music Society.\nConclusion 1: Beethoven leads an orchestra.\nPremise 2.1: Orchestras are led by conductors.\nPremise 2.2: Beethoven leads an orchestra.\nConclusion 2: Beethoven is a conductor.\nAnswer: C. Uncertain, because the passage does not explicitly state that Beethoven is not a conductor. However, the passage implies that Beethoven is a conductor.", "logic_premises": "[[((8→9)∪((a→b)∪((c→d)∪(e→f)))), ((g→h)∪((i→j)∪((k→l)∪(m→n)))), 4, 5, 6], [0, 1]]", "logic_conclusion": "[7, 2]", "correspondance": [{"0": "X is a Symphony . 9 .", "1": "Beethoven did not write X .", "2": "X is a Symphony . 9 .", "3": "Vienna Music Society did not premiere X .", "4": "Vienna Music Society is an orchestra .", "5": "Orchestras are led by conductors .", "6": "Beethoven leads Vienna Music Society .", "7": "Beethoven leads an orchestra .", "8": "Vienna Music Society is a Symphony . 9 .", "9": "Beethoven did not write Vienna Music Society .", "a": "Symphony No. 9 is a Symphony . 9 .", "b": "Beethoven did not write Symphony No. 9 .", "c": "Beethoven is a Symphony . 9 .", "d": "Beethoven did not write Beethoven .", "e": "the Vienna Music Society is a Symphony . 9 .", "f": "Beethoven did not write the Vienna Music Society .", "g": "Vienna Music Society is a Symphony . 9 .", "h": "Vienna Music Society did not premiere Vienna Music Society .", "i": "Symphony No. 9 is a Symphony . 9 .", "j": "Vienna Music Society did not premiere Symphony No. 9 .", "k": "Beethoven is a Symphony . 9 .", "l": "Vienna Music Society did not premiere Beethoven .", "m": "the Vienna Music Society is a Symphony . 9 .", "n": "Vienna Music Society did not premiere the Vienna Music Society ."}, {"0": "Orchestras are led by conductors .", "1": "Beethoven leads an orchestra .", "2": "Beethoven is a conductor ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A design by Max is a mass product design?", "id": "39", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If a design by Max is timeless, then a design by Max is a mass product design.\nPremise 1.2: Zaha Hadid's design style is timeless.\nConclusion 1: Zaha Hadid's design style is a mass product design.\nPremise 2.1: All of Zaha Hadid's design styles are timeless.\nPremise 2.2: No mass product design is timeless.\nConclusion 2: Zaha Hadid's design style is not a mass product design.\nPremise 3.1: Zaha Hadid's design style is not a mass product design.\nPremise 3.2: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nPremise 3.3: All of Kelly Wearstler's design styles are evocative.\nPremise 3.4: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nConclusion 3: Max's design style is Kelly Wearstler's design style.\nPremise 4.1: Max's design style is Kelly Wearstler's design style.\nPremise 4.2: All of Kelly Wearstler's design styles are dreamy.\nPremise 4.3: All of Kelly Wearstler's design styles are evocative.\nConclusion 4: A design by Max is evocative.\nPremise 5.1: A design by Max is evocative.\nPremise 5.2: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nConclusion 5: A design by Max is a mass product design.\nPremise 6.1: A design by Max is a mass product design.\nAnswer: A. Yes.\n\nNote: The conclusion is based on the premise that a design by Max is timeless, which is not explicitly stated in the passage. However, the passage implies that Zaha Hadid's design style is timeless and Max's design style is Zaha Hadid's design style. Therefore, a design by Max is timeless.", "logic_premises": "[[(((5∧6)→7)∪((8∧9)→a)), 3], [((5→6)∪(7→8)), ((9→a)∪(b→c))], [0, 1, ((8→9)∪((a→b)∪((c→d)∪((e→f)∪(g→h))))), (((i∧j)→k)∪(((l∧m)→n)∪(((o∧p)→q)∪(((r∧s)→t)∪((u∧v)→w)))))], [0, ((6→7)∪((8→9)∪((a→b)∪(c→d)))), ((e→f)∪((g→h)∪((i→j)∪(k→l))))], [0, ((6∧7)→8)]]", "logic_conclusion": "[4, 4, 7, 5, (9→a)]", "correspondance": [{"0": "X is a design by Max", "1": "X is timeless .", "2": "X is a mass product design .", "3": "Zaha Hadid 's 's design style is timeless .", "4": "Zaha Hadid 's 's design style is a mass product design .", "5": "Max is a design by Max", "6": "Max is timeless .", "7": "Max is a mass product design .", "8": "Zaha Hadids design style is a design by Max", "9": "Zaha Hadids design style is timeless .", "a": "Zaha Hadids design style is a mass product design ."}, {"0": "X is of a Zaha Hadid 's 's design styles .", "1": "X is timeless .", "2": "X is a mass product design .", "3": "X is not timeless .", "4": "Zaha Hadid 's 's design style is not a mass product design .", "5": "Zaha Hadids design style is of a Zaha Hadid 's 's design styles .", "6": "Zaha Hadids design style is timeless .", "7": "Zaha Hadids design styles is of a Zaha Hadid 's 's design styles .", "8": "Zaha Hadids design styles is timeless .", "9": "Zaha Hadids design style is a mass product design .", "a": "Zaha Hadids design style is not timeless .", "b": "Zaha Hadids design styles is a mass product design .", "c": "Zaha Hadids design styles is not timeless ."}, {"0": "Zaha Hadid 's 's design style is not a mass product design .", "1": "Either Zaha Hadid 's 's design style or Kelly Wearstler 's 's design style .", "2": "X is of a Kelly Wearstler 's 's design styles .", "3": "X is evocative .", "4": "X is a design by Max", "5": "X is timeless .", "6": "X is a mass product design and evocative .", "7": "Max 's design style is Kelly Wearstler 's 's design style .", "8": "Kelly Wearstlers design style is of a Kelly Wearstler 's 's design styles .", "9": "Kelly Wearstlers design style is evocative .", "a": "Maxs design style is of a Kelly Wearstler 's 's design styles .", "b": "Maxs design style is evocative .", "c": "Max is of a Kelly Wearstler 's 's design styles .", "d": "Max is evocative .", "e": "Kelly Wearstlers design styles is of a Kelly Wearstler 's 's design styles .", "f": "Kelly Wearstlers design styles is evocative .", "g": "Zaha Hadids design style is of a Kelly Wearstler 's 's design styles .", "h": "Zaha Hadids design style is evocative .", "i": "Kelly Wearstlers design style is a design by Max", "j": "Kelly Wearstlers design style is timeless .", "k": "Kelly Wearstlers design style is a mass product design and evocative .", "l": "Maxs design style is a design by Max", "m": "Maxs design style is timeless .", "n": "Maxs design style is a mass product design and evocative .", "o": "Max is a design by Max", "p": "Max is timeless .", "q": "Max is a mass product design and evocative .", "r": "Kelly Wearstlers design styles is a design by Max", "s": "Kelly Wearstlers design styles is timeless .", "t": "Kelly Wearstlers design styles is a mass product design and evocative .", "u": "Zaha Hadids design style is a design by Max", "v": "Zaha Hadids design style is timeless .", "w": "Zaha Hadids design style is a mass product design and evocative ."}, {"0": "Max 's 's design style is Kelly Wearstler 's 's design style .", "1": "X is of a Kelly Wearstler 's 's design styles .", "2": "X is dreamy .", "3": "X is of a Kelly Wearstler 's 's design styles .", "4": "X is evocative .", "5": "A design by Max 's is evocative .", "6": "Max is of a Kelly Wearstler 's 's design styles .", "7": "Max is dreamy .", "8": "Kelly Wearstlers design style is of a Kelly Wearstler 's 's design styles .", "9": "Kelly Wearstlers design style is dreamy .", "a": "Maxs design style is of a Kelly Wearstler 's 's design styles .", "b": "Maxs design style is dreamy .", "c": "Kelly Wearstlers design styles is of a Kelly Wearstler 's 's design styles .", "d": "Kelly Wearstlers design styles is dreamy .", "e": "Max is of a Kelly Wearstler 's 's design styles .", "f": "Max is evocative .", "g": "Kelly Wearstlers design style is of a Kelly Wearstler 's 's design styles .", "h": "Kelly Wearstlers design style is evocative .", "i": "Maxs design style is of a Kelly Wearstler 's 's design styles .", "j": "Maxs design style is evocative .", "k": "Kelly Wearstlers design styles is of a Kelly Wearstler 's 's design styles .", "l": "Kelly Wearstlers design styles is evocative ."}, {"0": "A design by Max is evocative .", "1": "X is a design by Max", "2": "X is timeless .", "3": "X is a mass product design and evocative .", "4": "X is A design by Max", "5": "X is a mass product design .", "6": "Max is a design by Max", "7": "Max is timeless .", "8": "Max is a mass product design and evocative .", "9": "Max is A design by Max", "a": "Max is a mass product design ."}], "errors": [[]], "entailments_dict": [{}, {"6": ["(¬a)"], "a": ["(¬6)"], "8": ["(¬c)"], "c": ["(¬8)"]}, {}, {}, {"9": ["6"]}], "predicted_steps": [false, false, false, false, false]}
{"text": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A design by Max is evocative and dreamy?", "id": "40", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nPremise 1.2: All of Zaha Hadid's design styles are timeless.\nPremise 1.3: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nPremise 1.4: All of Kelly Wearstler's design styles are evocative.\nPremise 1.5: All of Kelly Wearstler's design styles are dreamy.\nConclusion 1: If a design by Max is timeless, then a design by Max is evocative and dreamy.\nPremise 2.1: No mass product design is timeless.\nConclusion 2: A design by Max is not timeless.\nPremise 3.1: Conclusion 1: If a design by Max is timeless, then a design by Max is evocative and dreamy.\nPremise 3.2: Conclusion 2: A design by Max is not timeless.\nAnswer: C. Uncertain.\n\nThe answer is uncertain because the premises do not provide enough information to determine if a design by Max is evocative and dreamy. The only information that links Max's design to being evocative and dreamy is if it is timeless, but the premises also state that no mass product design is timeless, and Max's design being a mass product design is not ruled out.", "logic_premises": "[[(((e∧f)→g)∪(((h∧i)→j)∪((k∧l)→m))), ((n→o)∪((p→q)∪(r→s))), 5, ((t→u)∪((v→w)∪(x→y))), ((z→A)∪((B→C)∪(D→E)))], [(3→4)]]", "logic_conclusion": "[(((F∧G)→(H∧I))∪(((J∧K)→(L∧M))∪((N∧O)→(P∧Q)))), 2]", "correspondance": [{"0": "X is a design by Max", "1": "X is timeless .", "2": "X is a mass product design and evocative .", "3": "X is of a Zaha Hadid 's 's design styles .", "4": "X is timeless .", "5": "Either Zaha Hadid 's 's design style or Kelly Wearstler 's 's design style .", "6": "X is of a Kelly Wearstler 's 's design styles .", "7": "X is evocative .", "8": "X is of a Kelly Wearstler 's 's design styles .", "9": "X is dreamy .", "a": "X is a design by Max", "b": "X is timeless .", "c": "X is evocative .", "d": "X is dreamy .", "e": "Max is a design by Max", "f": "Max is timeless .", "g": "Max is a mass product design and evocative .", "h": "Zaha Hadids design styles is a design by Max", "i": "Zaha Hadids design styles is timeless .", "j": "Zaha Hadids design styles is a mass product design and evocative .", "k": "Kelly Wearstlers design styles is a design by Max", "l": "Kelly Wearstlers design styles is timeless .", "m": "Kelly Wearstlers design styles is a mass product design and evocative .", "n": "Max is of a Zaha Hadid 's 's design styles .", "o": "Max is timeless .", "p": "Zaha Hadids design styles is of a Zaha Hadid 's 's design styles .", "q": "Zaha Hadids design styles is timeless .", "r": "Kelly Wearstlers design styles is of a Zaha Hadid 's 's design styles .", "s": "Kelly Wearstlers design styles is timeless .", "t": "Max is of a Kelly Wearstler 's 's design styles .", "u": "Max is evocative .", "v": "Zaha Hadids design styles is of a Kelly Wearstler 's 's design styles .", "w": "Zaha Hadids design styles is evocative .", "x": "Kelly Wearstlers design styles is of a Kelly Wearstler 's 's design styles .", "y": "Kelly Wearstlers design styles is evocative .", "z": "Max is of a Kelly Wearstler 's 's design styles .", "A": "Max is dreamy .", "B": "Zaha Hadids design styles is of a Kelly Wearstler 's 's design styles .", "C": "Zaha Hadids design styles is dreamy .", "D": "Kelly Wearstlers design styles is of a Kelly Wearstler 's 's design styles .", "E": "Kelly Wearstlers design styles is dreamy .", "F": "Max is a design by Max", "G": "Max is timeless .", "H": "Max is evocative .", "I": "Max is dreamy .", "J": "Zaha Hadids design styles is a design by Max", "K": "Zaha Hadids design styles is timeless .", "L": "Zaha Hadids design styles is evocative .", "M": "Zaha Hadids design styles is dreamy .", "N": "Kelly Wearstlers design styles is a design by Max", "O": "Kelly Wearstlers design styles is timeless .", "P": "Kelly Wearstlers design styles is evocative .", "Q": "Kelly Wearstlers design styles is dreamy ."}, {"0": "X is a mass product design .", "1": "X is not timeless .", "2": "A design by Max is not timeless .", "3": "Max is a mass product design .", "4": "Max is not timeless ."}], "errors": [[]], "entailments_dict": [{"s": ["l"], "o": ["f"], "q": ["i"], "J": ["h"], "K": ["i"], "N": ["k"], "F": ["e"], "G": ["f"], "O": ["l"], "w": ["L"], "y": ["P"], "u": ["H"], "C": ["M"], "E": ["Q"], "A": ["I"]}, {}], "predicted_steps": [false, false]}
{"text": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A design by Max is either evocative or dreamy?", "id": "41", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All of Zaha Hadid's design styles are timeless.\nPremise 1.2: No mass product design is timeless.\nConclusion 1: Zaha Hadid's design style and Kelly Wearstler's design style are not mass product designs.\nPremise 2.1: All of Kelly Wearstler's design styles are evocative.\nPremise 2.2: All of Kelly Wearstler's design styles are dreamy.\nConclusion 2: Kelly Wearstler's design style is both evocative and dreamy.\nPremise 3.1: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nPremise 3.2: Zaha Hadid's design style and Kelly Wearstler's design style are not mass product designs.\nConclusion 3: A design by Max is not timeless.\nPremise 4.1: A design by Max is not timeless.\nPremise 4.2: All of Kelly Wearstler's design styles are evocative and dreamy.\nConclusion 4: A design by Max is either evocative or dreamy.\nAnswer: A. Yes.\n\nExplanation:\n\n* From premises 1.1 and 1.2, we can conclude that Zaha Hadid's design style and Kelly Wearstler's design style are not mass product designs.\n* From premises 2.1 and 2.2, we can conclude that Kelly Wearstler's design style is both evocative and dreamy.\n* From premises 3.1, 3.2, and 4.1, we can conclude that a design by Max is either evocative or dreamy.", "logic_premises": "[[((6→7)∪(8→9)), ((a→b)∪(c→d))], [((6→7)∪(8→9)), ((a→b)∪(c→d))], [(((6∧7)→8)∪((9∧a)→b)), (3∧4)], [0, ((6→(7∧8))∪(9→(a∧b)))]]", "logic_conclusion": "[(4∧5), (4∧5), 5, (4∨5)]", "correspondance": [{"0": "X is of a Zaha Hadid 's 's design styles .", "1": "X is timeless .", "2": "X is a mass product design .", "3": "X is not timeless .", "4": "Zaha Hadid 's 's design style are not mass product designs .", "5": "Kelly Wearstler 's design style are not mass product designs .", "6": "Zaha Hadids design style and Kelly Wearstlers design style is of a Zaha Hadid 's 's design styles .", "7": "Zaha Hadids design style and Kelly Wearstlers design style is timeless .", "8": "Zaha Hadids design styles is of a Zaha Hadid 's 's design styles .", "9": "Zaha Hadids design styles is timeless .", "a": "Zaha Hadids design style and Kelly Wearstlers design style is a mass product design .", "b": "Zaha Hadids design style and Kelly Wearstlers design style is not timeless .", "c": "Zaha Hadids design styles is a mass product design .", "d": "Zaha Hadids design styles is not timeless ."}, {"0": "X is of a Kelly Wearstler 's 's design styles .", "1": "X is evocative .", "2": "X is of a Kelly Wearstler 's 's design styles .", "3": "X is dreamy .", "4": "Kelly Wearstler 's 's design style is evocative .", "5": "Kelly Wearstler 's 's design style is dreamy .", "6": "Kelly Wearstlers design styles is of a Kelly Wearstler 's 's design styles .", "7": "Kelly Wearstlers design styles is evocative .", "8": "Kelly Wearstlers design style is of a Kelly Wearstler 's 's design styles .", "9": "Kelly Wearstlers design style is evocative .", "a": "Kelly Wearstlers design styles is of a Kelly Wearstler 's 's design styles .", "b": "Kelly Wearstlers design styles is dreamy .", "c": "Kelly Wearstlers design style is of a Kelly Wearstler 's 's design styles .", "d": "Kelly Wearstlers design style is dreamy ."}, {"0": "X is a design by Max", "1": "X is timeless .", "2": "X is a mass product design and evocative .", "3": "Zaha Hadid 's design style are not mass product designs .", "4": "Kelly Wearstler 's design style are not mass product designs .", "5": "A design by Max is not timeless .", "6": "Zaha Hadids design style and Kelly Wearstlers design style is a design by Max", "7": "Zaha Hadids design style and Kelly Wearstlers design style is timeless .", "8": "Zaha Hadids design style and Kelly Wearstlers design style is a mass product design and evocative .", "9": "Max is a design by Max", "a": "Max is timeless .", "b": "Max is a mass product design and evocative ."}, {"0": "A design by Max is not timeless .", "1": "X is of a Kelly Wearstler 's design styles .", "2": "X is evocative .", "3": "X is dreamy .", "4": "A design by Max is either evocative .", "5": "A design by Max is either dreamy .", "6": "Max is of a Kelly Wearstler 's design styles .", "7": "Max is evocative .", "8": "Max is dreamy .", "9": "Kelly Wearstlers design styles is of a Kelly Wearstler 's design styles .", "a": "Kelly Wearstlers design styles is evocative .", "b": "Kelly Wearstlers design styles is dreamy ."}], "errors": [[]], "entailments_dict": [{"b": ["(¬7)"], "7": ["(¬b)"], "d": ["(¬9)"], "9": ["(¬d)"]}, {}, {}, {}], "predicted_steps": [false, false, false, false]}
{"text": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Coco Gauff is among the most active players in major tennis?", "id": "42", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nPremise 1.2: Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\nPremise 1.3: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\nConclusion 1: All female tennis players at Roland Garros 2022 are ranked highly by the Women's Tennis Association.\nPremise 2.1: Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal.\nPremise 2.2: Coco Gauff is not a male tennis player at Roland Garros 2022.\nConclusion 2: Coco Gauff is a female tennis player at Roland Garros 2022.\nPremise 3.1: Coco Gauff is a female tennis player at Roland Garros 2022.\nPremise 3.2: All female tennis players at Roland Garros 2022 are ranked highly by the Women's Tennis Association.\nConclusion 3: Coco Gauff is ranked highly by the Women's Tennis Association.\nPremise 4.1: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nPremise 4.2: Coco Gauff is ranked highly by the Women's Tennis Association.\nAnswer: A. Yes\n\nExplanation:\n\n* From the passage, we know that all female tennis players at Roland Garros 2022 are ranked highly by the Women's Tennis Association, and Coco Gauff is one of them.\n* From Premise 1.1, if a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n* Therefore, Coco Gauff is among the most active players in major tennis.", "logic_premises": "[[((0∧1)→2), (3→4), (5→6)], [(0∨1), 2], [0, ((4→5)∪((6→7)∪(8→9)))]]", "logic_conclusion": "[(7→8), 3, 3]", "correspondance": [{"0": "X is a player", "1": "X is ranked highly by the Women 's Tennis Association .", "2": "X are among the most active players in major tennis .", "3": "X is a person who lost to Iga Świątek .", "4": "X is ranked highly by the Women 's Tennis Association .", "5": "X is a female tennis player at Roland Garros 2022 .", "6": "X lost to Iga Świątek .", "7": "X is a female tennis player at Roland Garros 2022 .", "8": "X is ranked highly by the Women 's Tennis Association ."}, {"0": "Coco Gauff is a player who is ranked highly by the Women 's Tennis Association .", "1": "Coco Gauff is a player who lost to Rafael Nadal .", "2": "Coco Gauff is not a male tennis player at Roland Garros 2022 .", "3": "Coco Gauff is a female tennis player at Roland Garros 2022 ."}, {"0": "Coco Gauff is a female tennis player at Roland Garros 2022 .", "1": "X is a female tennis player at Roland Garros 2022 .", "2": "X is ranked highly by the Women 's Tennis Association .", "3": "Coco Gauff is ranked highly by the Women 's Tennis Association .", "4": "the Womens Tennis Association is a female tennis player at Roland Garros 2022 .", "5": "the Womens Tennis Association is ranked highly by the Women 's Tennis Association .", "6": "Coco Gauff is a female tennis player at Roland Garros 2022 .", "7": "Coco Gauff is ranked highly by the Women 's Tennis Association .", "8": "Roland Garros 2022 is a female tennis player at Roland Garros 2022 .", "9": "Roland Garros 2022 is ranked highly by the Women 's Tennis Association ."}], "errors": [[]], "entailments_dict": [{"4": ["1", "8"], "7": ["5"]}, {}, {"0": ["6"], "7": ["3"]}], "predicted_steps": [false, false, true]}
{"text": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Coco Gauff has lost to Rafael Nadal?", "id": "43", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\nPremise 1.2: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\nConclusion 1: All female tennis players at Roland Garros 2022 are ranked highly by the Women's Tennis Association.\nPremise 2.1: Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal.\nPremise 2.2: Coco Gauff is not a male tennis player at Roland Garros 2022.\nPremise 2.3: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nConclusion 2: Coco Gauff is not a player who lost to Rafael Nadal.\nPremise 3.1: Coco Gauff is not a player who lost to Rafael Nadal.\nAnswer: B. No.", "logic_premises": "[[(0→1), (2→3)], [(0∨1), 2, ((6→7)∪((8→9)∪((a→b)∪(c→d))))]]", "logic_conclusion": "[(4→5), 5]", "correspondance": [{"0": "X is a person who lost to Iga Świątek .", "1": "X is ranked highly by the Women 's Tennis Association .", "2": "X is a female tennis player at Roland Garros 2022 .", "3": "X lost to Iga Świątek .", "4": "X is a female tennis player at Roland Garros 2022 .", "5": "X is ranked highly by the Women 's Tennis Association ."}, {"0": "Coco Gauff is a player who is ranked highly by the Women 's Tennis Association .", "1": "Coco Gauff is a player who lost to Rafael Nadal .", "2": "Coco Gauff is not a male tennis player at Roland Garros 2022 .", "3": "X is a male tennis player at Roland Garros 2022 .", "4": "X lost to Rafael Nadal .", "5": "Coco Gauff is not a player who lost to Rafael Nadal .", "6": "the Womens Tennis Association is a male tennis player at Roland Garros 2022 .", "7": "the Womens Tennis Association lost to Rafael Nadal .", "8": "Coco Gauff is a male tennis player at Roland Garros 2022 .", "9": "Coco Gauff lost to Rafael Nadal .", "a": "Roland Garros 2022 is a male tennis player at Roland Garros 2022 .", "b": "Roland Garros 2022 lost to Rafael Nadal .", "c": "Rafael Nadal is a male tennis player at Roland Garros 2022 .", "d": "Rafael Nadal lost to Rafael Nadal ."}], "errors": [[]], "entailments_dict": [{"4": ["2"], "1": ["5"]}, {"5": ["(¬1)"], "(¬5)": ["1"], "(¬8)": ["2"], "(¬2)": ["8"]}], "predicted_steps": [false, false]}
{"text": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Coco Gauff is not a player who lost to Iga Świątek or one of the most active players in major tennis?", "id": "44", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\nPremise 1.2: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\nConclusion 1: All female tennis players at Roland Garros 2022 are ranked highly by the Women's Tennis Association.\nPremise 2.1: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nPremise 2.2: All female tennis players at Roland Garros 2022 are ranked highly by the Women's Tennis Association.\nConclusion 2: All female tennis players at Roland Garros 2", "logic_premises": "[[(0→1), (2→3)], [(((6∧7)→8)∪(((9∧a)→b)∪(((c∧d)→e)∪((f∧g)→h)))), ((i→j)∪((k→l)∪((m→n)∪(o→p))))]]", "logic_conclusion": "[(4→5), 5]", "correspondance": [{"0": "X is a person who lost to Iga Świątek .", "1": "X is ranked highly by the Women 's Tennis Association .", "2": "X is a female tennis player at Roland Garros 2022 .", "3": "X lost to Iga Świątek .", "4": "X is a female tennis player at Roland Garros 2022 .", "5": "X is ranked highly by the Women 's Tennis Association ."}, {"0": "X is a player", "1": "X is ranked highly by the Women 's Tennis Association .", "2": "X are among the most active players in major tennis .", "3": "X is a female tennis player at Roland Garros 2022 .", "4": "X is ranked highly by the Women 's Tennis Association .", "5": "All female tennis players at Roland Garros 2", "6": "the Womens Tennis Association is a player", "7": "the Womens Tennis Association is ranked highly by the Women 's Tennis Association .", "8": "the Womens Tennis Association are among the most active players in major tennis .", "9": "the most active players in major tennis is a player", "a": "the most active players in major tennis is ranked highly by the Women 's Tennis Association .", "b": "the most active players in major tennis are among the most active players in major tennis .", "c": "Roland Garros 2022 is a player", "d": "Roland Garros 2022 is ranked highly by the Women 's Tennis Association .", "e": "Roland Garros 2022 are among the most active players in major tennis .", "f": "Roland Garros 2 is a player", "g": "Roland Garros 2 is ranked highly by the Women 's Tennis Association .", "h": "Roland Garros 2 are among the most active players in major tennis .", "i": "the Womens Tennis Association is a female tennis player at Roland Garros 2022 .", "j": "the Womens Tennis Association is ranked highly by the Women 's Tennis Association .", "k": "the most active players in major tennis is a female tennis player at Roland Garros 2022 .", "l": "the most active players in major tennis is ranked highly by the Women 's Tennis Association .", "m": "Roland Garros 2022 is a female tennis player at Roland Garros 2022 .", "n": "Roland Garros 2022 is ranked highly by the Women 's Tennis Association .", "o": "Roland Garros 2 is a female tennis player at Roland Garros 2022 .", "p": "Roland Garros 2 is ranked highly by the Women 's Tennis Association ."}], "errors": [[]], "entailments_dict": [{"4": ["2"], "1": ["5"]}, {"l": ["a"], "n": ["d"], "j": ["7"], "p": ["g"]}], "predicted_steps": [false, false]}
{"text": "All cats are mammals. Some pets are not mammals.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that No pets are cats?", "id": "45", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: All cats are mammals.\nPremise 1.2: Some pets are not mammals.\nConclusion 1: There are pets that are not mammals.\nPremise 2.1: All cats are mammals.\nConclusion 2: Cats are not pets that are not mammals.\nPremise 3.1: Cats are a subset of mammals.\nPremise 3.2: Pets that are not mammals are not a subset of cats.\nConclusion 3: No pets are cats.\nAnswer: A. Yes.\n\nExplanation:\nThe passage states that all cats are mammals and some pets are not mammals. From this information, we can deduce that there are pets that are not cats. Additionally, we know that cats are a subset of mammals, and pets that are not mammals are not a subset of cats. Therefore, it is true that no pets are cats.", "logic_premises": "[[(0→1), 2], [], [(0→1), (2→3)]]", "logic_conclusion": "[3, '-1', (4→5)]", "correspondance": [{"0": "X is a cat .", "1": "X is a mammal .", "2": "Some pets are not mammals .", "3": "There are pets that are not mammals ."}, {"0": "X is a cat .", "1": "X is a mammal ."}, {"0": "X is a Cat .", "1": "X is a subset of a mammal .", "2": "X is a Pet that are not mammals .", "3": "X is not a subset of a cat .", "4": "X is a pet .", "5": "X is not a cat ."}], "errors": ["Logic Transform Error -  Step n°: 1 list index out of range", ["Entailments Error -  Step n°: 1 'str' object has no attribute 'get_variables_implications'"]], "entailments_dict": [{}, {}, {"(¬5)": ["0"]}], "predicted_steps": [false, false, false]}
{"text": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James's favorite season is summer?", "id": "46", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All students who want to have a long vacation love summer the most.\nPremise 1.2: James wants to have a long vacation.\nConclusion 1: James loves summer the most.\nPremise 2.1: James loves summer the most.\nPremise 2.2: Emma's favorite season is summer.\nPremise 2.3: Mia's favorite season is not the same as Emma's.\nConclusion 2: James's favorite season is summer.\nPremise 3.1: James's favorite season is summer.\nAnswer: A. Yes.\n\nNote: The reasoning is based on the premise that there are no other factors affecting James's favorite season than the ones mentioned in the passage.", "logic_premises": "[[(4→5), 2], [0, 1, 2]]", "logic_conclusion": "[3, 3]", "correspondance": [{"0": "X is a student who wants to has a long vacation .", "1": "X loves summer the most .", "2": "James wants to have a long vacation .", "3": "James loves summer the most .", "4": "James is a student who wants to has a long vacation .", "5": "James loves summer the most ."}, {"0": "James loves summer the most .", "1": "Emma 's 's favorite season is summer .", "2": "Mia 's favorite season is not the same as Emma 's 's .", "3": "James 's favorite season is summer ."}], "errors": [[]], "entailments_dict": [{"5": ["3"]}, {}], "predicted_steps": [false, false]}
{"text": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James's favorite season is fall?", "id": "47", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All students who want to have a long vacation love summer the most.\nPremise 1.2: James wants to have a long vacation.\nConclusion 1: James loves summer the most.\nPremise 2.1: Emma's favorite season is summer.\nPremise 2.2: Mia's favorite season is not the same as Emma's.\nConclusion 2: Mia's favorite season is not summer.\nPremise 3.1: The passage does not provide information about James's favorite season.\nAnswer: C. Uncertain.\n\nExplanation:\n\n* From Premise 1.1 and 1.2, we can conclude that James loves summer the most.\n* From Premise 2.1 and 2.2, we can conclude that Mia's favorite season is not summer.\n* However, the passage does not provide any information about James's favorite season, so we cannot determine if James's favorite season is fall or not.", "logic_premises": "[[(4→5), 2], [0, 1]]", "logic_conclusion": "[3, 2]", "correspondance": [{"0": "X is a student who wants to has a long vacation .", "1": "X loves summer the most .", "2": "James wants to have a long vacation .", "3": "James loves summer the most .", "4": "James is a student who wants to has a long vacation .", "5": "James loves summer the most ."}, {"0": "Emma 's 's favorite season is summer .", "1": "Mia 's 's favorite season is not the same as Emma 's 's .", "2": "Mia 's 's favorite season is not summer ."}], "errors": [[]], "entailments_dict": [{"5": ["3"]}, {}], "predicted_steps": [false, false]}
{"text": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Mia's favorite season is spring?", "id": "48", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: All students who want to have a long vacation love summer the most.\nPremise 1.2: James wants to have a long vacation.\nConclusion 1: James loves summer the most.\nPremise 2.1: Emma's favorite season is summer.\nPremise 2.2: Mia's favorite season is not the same as Emma's.\nConclusion 2: Mia's favorite season is not summer.\nPremise 3.1: The four seasons are Spring, Summer, Fall, and Winter.\nPremise 3.2: Mia's favorite season is not summer.\nConclusion 3: Mia's favorite season is one of the other three seasons: Spring, Fall, or Winter.\nAnswer: C. Uncertain.\n\nNote: The passage does not provide enough information to determine which of the three remaining seasons is Mia's favorite.", "logic_premises": "[[(4→5), 2], [0, 1], [(0∧(1∧(2∧3))), 4]]", "logic_conclusion": "[3, 2, 5]", "correspondance": [{"0": "X is a student who wants to has a long vacation .", "1": "X loves summer the most .", "2": "James wants to have a long vacation .", "3": "James loves summer the most .", "4": "James is a student who wants to has a long vacation .", "5": "James loves summer the most ."}, {"0": "Emma 's 's favorite season is summer .", "1": "Mia 's 's favorite season is not the same as Emma 's 's .", "2": "Mia 's 's favorite season is not summer ."}, {"0": "The four seasons are Spring .", "1": "The four seasons are Summer .", "2": "The four seasons are Fall .", "3": "The four seasons are Winter .", "4": "Mia 's 's favorite season is not Summer .", "5": "Mia 's 's favorite season is one of the other three seasons : Spring , Fall , or Winter ."}], "errors": [[]], "entailments_dict": [{"5": ["3"]}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that 1984 is printed text?", "id": "49", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: No digital media are analog.\nPremise 1.2: All streaming services are digital.\nPremise 1.3: 1984 is a streaming service.\nConclusion 1: 1984 is digital.\nPremise 2.1: If 1984 is a streaming service, then 1984 is a hardcover book.\nPremise 2.2: 1984 is a streaming service.\nConclusion 2: 1984 is a hardcover book.\nPremise 3.1: If an object is a hardcover book then it is printed text.\nPremise 3.2: 1984 is a hardcover book.\nConclusion 3: 1984 is printed text.\nPremise 4.1: 1984 is printed text.\nAnswer: A. Yes.\n\nNote: The passage states that \"If 1984 is a streaming service, then 1984 is a hardcover book.\" This is a contradiction, as something cannot be both a streaming service and a hardcover book. However, since the question is asking based on the information provided in the passage, we must follow the logical conclusion of the passage, even if it is contradictory.", "logic_premises": "[[(0→1), (2→3), 4], [(0→1), 2], [((0∧1)→2), 3]]", "logic_conclusion": "[5, 3, 4]", "correspondance": [{"0": "X is a digital medium .", "1": "X is not analog .", "2": "X is streaming a service .", "3": "X is digital .", "4": "1984 is a streaming service .", "5": "1984 is digital ."}, {"0": "1984 is a streaming service .", "1": "1984 is a hardcover book .", "2": "1984 is a streaming service .", "3": "1984 is a hardcover book ."}, {"0": "X is an object", "1": "X is a hardcover book .", "2": "X is printed text .", "3": "1984 is a hardcover book .", "4": "1984 is printed text ."}], "errors": [[]], "entailments_dict": [{}, {"2": ["0"], "1": ["3"]}, {}], "predicted_steps": [false, true, false]}
{"text": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that 1984 is a streaming service?", "id": "50", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: No digital media are analog.\nPremise 1.2: All streaming services are digital.\nConclusion 1: Streaming services are not analog.\nPremise 2.1: If 198", "logic_premises": "[[(0→1), (2→3)]]", "logic_conclusion": "[(4→5)]", "correspondance": [{"0": "X is a digital medium .", "1": "X is not analog .", "2": "X is streaming a service .", "3": "X is digital .", "4": "X is Streaming a service .", "5": "X is not analog ."}], "errors": [[]], "entailments_dict": [{"4": ["2"], "1": ["5"]}], "predicted_steps": [false]}
{"text": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that 1984 is not a streaming service?", "id": "51", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: No digital media are analog.\nPremise 1.2: All streaming services are digital.\nConclusion 1: 198", "logic_premises": "[[(0→1), (2→3)]]", "logic_conclusion": "[4]", "correspondance": [{"0": "X is a digital medium .", "1": "X is not analog .", "2": "X is streaming a service .", "3": "X is digital .", "4": "198"}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Basque is a Romance language?", "id": "52", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All Romance languages are Indo-European languages.\nPremise 1.2: The Romance languages are a language family.\nPremise 1.3: All languages within a language family are related to each other.\nPremise 1.4: French and Spanish are both Romance languages.\nPremise 2.1: Basque is not related to any other language.\nConclusion 1: Basque is not a Romance language.\nPremise 2.2: Basque is not a Romance language.\nAnswer: B. No.\n\nExplanation:\n\n1. From Premise 1.1 and 1.2, we can deduce that all Romance languages are related to each other.\n2. From Premise 1.4, we can deduce that French and Spanish are related.\n3. From Premise 2.1, we can deduce that Basque is not related to any other language.\n4. Therefore, Basque is not a Romance language.", "logic_premises": "[[((b→(c∧d))∪((e→(f∧g))∪((h→(i∧j))∪((k→(l∧m))∪(n→(o∧p)))))), 3, ((q→r)∪((s→t)∪((u→v)∪((w→x)∪(y→z))))), (6∧7), ((A→B)∪((C→D)∪((E→F)∪((G→H)∪(I→J)))))]]", "logic_conclusion": "[a]", "correspondance": [{"0": "X is Romance a language .", "1": "X is Indo a language .", "2": "X is European a language .", "3": "The Romance languages are a language family .", "4": "X is a language within a language family .", "5": "X is related to each other .", "6": "French are both Romance languages .", "7": "Spanish are both Romance languages .", "8": "X is an other language .", "9": "Basque is not related to X .", "a": "Basque is not a Romance language .", "b": "Romance languages is Romance a language .", "c": "Romance languages is Indo a language .", "d": "Romance languages is European a language .", "e": "All Romance languages is Romance a language .", "f": "All Romance languages is Indo a language .", "g": "All Romance languages is European a language .", "h": "French and Spanish is Romance a language .", "i": "French and Spanish is Indo a language .", "j": "French and Spanish is European a language .", "k": "The Romance languages is Romance a language .", "l": "The Romance languages is Indo a language .", "m": "The Romance languages is European a language .", "n": "Basque is Romance a language .", "o": "Basque is Indo a language .", "p": "Basque is European a language .", "q": "Romance languages is a language within a language family .", "r": "Romance languages is related to each other .", "s": "All Romance languages is a language within a language family .", "t": "All Romance languages is related to each other .", "u": "French and Spanish is a language within a language family .", "v": "French and Spanish is related to each other .", "w": "The Romance languages is a language within a language family .", "x": "The Romance languages is related to each other .", "y": "Basque is a language within a language family .", "z": "Basque is related to each other .", "A": "Romance languages is an other language .", "B": "Basque is not related to Romance languages .", "C": "All Romance languages is an other language .", "D": "Basque is not related to All Romance languages .", "E": "French and Spanish is an other language .", "F": "Basque is not related to French and Spanish .", "G": "The Romance languages is an other language .", "H": "Basque is not related to The Romance languages .", "I": "Basque is an other language .", "J": "Basque is not related to Basque ."}], "errors": [[]], "entailments_dict": [{"(¬a)": ["n"]}], "predicted_steps": [false]}
{"text": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that German is a Romance language?", "id": "53", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: All Romance languages are Indo-European languages.\nPremise 1.2: French and Spanish are both Romance languages.\nPremise 1.3: German is related to Spanish.\nPremise 2.1: All languages within a language family are related to each other.\nPremise 2.2: The Romance languages are a language family.\nPremise 2.3: All Romance languages are Indo-European languages.\nPremise 2.4: Basque is not related to any other language.\nConclusion 1: German is an Indo-European language.\nConclusion 2: German is not a Romance language.\nPremise 3.1: German is not a Romance language.\nAnswer: B. No.\n\nExplanation:\n\n* German is an Indo-European language, but it is not a Romance language.\n* German is related to Spanish, but that does not make it a Romance language.\n* The Romance languages are a specific subgroup of the Indo-European language family, and German is not part of that subgroup.\n* Basque is not related to any other language, which is different from German being related to Spanish.\n* The passage states that all Romance languages are Indo-European languages, and French and Spanish are examples of Romance languages. This implies that not all Indo-European languages are Romance languages.", "logic_premises": "[[((g→(h∧i))∪((j→(k∧l))∪((m→(n∧o))∪((p→(q∧r))∪((s→(t∧u))∪((v→(w∧x))∪(y→(z∧A)))))))), (3∧4), 5, ((B→C)∪((D→E)∪((F→G)∪((H→I)∪((J→K)∪((L→M)∪(N→O))))))), 8, ((P→(Q∧R))∪((S→(T∧U))∪((V→(W∧X))∪((Y→(Z∧!))∪((\"→(#∧$))∪((%→(&∧*))∪(+→(,∧-)))))))), ((.→/)∪((:→;)∪((<→=)∪((>→?)∪((@→[)∪((\\→])∪(^→_)))))))]]", "logic_conclusion": "[(e∧f)]", "correspondance": [{"0": "X is Romance a language .", "1": "X is Indo a language .", "2": "X is European a language .", "3": "French are both Romance languages .", "4": "Spanish are both Romance languages .", "5": "German is related to Spanish .", "6": "X is a language within a language family .", "7": "X is related to each other .", "8": "The Romance languages are a language family .", "9": "X is Romance a language .", "a": "X is Indo a language .", "b": "X is European a language .", "c": "X is an other language .", "d": "Basque is not related to X .", "e": "German is an Indo language .", "f": "German is an European language .", "g": "Romance languages is Romance a language .", "h": "Romance languages is Indo a language .", "i": "Romance languages is European a language .", "j": "German is Romance a language .", "k": "German is Indo a language .", "l": "German is European a language .", "m": "All Romance languages is Romance a language .", "n": "All Romance languages is Indo a language .", "o": "All Romance languages is European a language .", "p": "Spanish is Romance a language .", "q": "Spanish is Indo a language .", "r": "Spanish is European a language .", "s": "French and Spanish is Romance a language .", "t": "French and Spanish is Indo a language .", "u": "French and Spanish is European a language .", "v": "The Romance languages is Romance a language .", "w": "The Romance languages is Indo a language .", "x": "The Romance languages is European a language .", "y": "Basque is Romance a language .", "z": "Basque is Indo a language .", "A": "Basque is European a language .", "B": "Romance languages is a language within a language family .", "C": "Romance languages is related to each other .", "D": "German is a language within a language family .", "E": "German is related to each other .", "F": "All Romance languages is a language within a language family .", "G": "All Romance languages is related to each other .", "H": "Spanish is a language within a language family .", "I": "Spanish is related to each other .", "J": "French and Spanish is a language within a language family .", "K": "French and Spanish is related to each other .", "L": "The Romance languages is a language within a language family .", "M": "The Romance languages is related to each other .", "N": "Basque is a language within a language family .", "O": "Basque is related to each other .", "P": "Romance languages is Romance a language .", "Q": "Romance languages is Indo a language .", "R": "Romance languages is European a language .", "S": "German is Romance a language .", "T": "German is Indo a language .", "U": "German is European a language .", "V": "All Romance languages is Romance a language .", "W": "All Romance languages is Indo a language .", "X": "All Romance languages is European a language .", "Y": "Spanish is Romance a language .", "Z": "Spanish is Indo a language .", "!": "Spanish is European a language .", "\"": "French and Spanish is Romance a language .", "#": "French and Spanish is Indo a language .", "$": "French and Spanish is European a language .", "%": "The Romance languages is Romance a language .", "&": "The Romance languages is Indo a language .", "*": "The Romance languages is European a language .", "+": "Basque is Romance a language .", ",": "Basque is Indo a language .", "-": "Basque is European a language .", ".": "Romance languages is an other language .", "/": "Basque is not related to Romance languages .", ":": "German is an other language .", ";": "Basque is not related to German .", "<": "All Romance languages is an other language .", "=": "Basque is not related to All Romance languages .", ">": "Spanish is an other language .", "?": "Basque is not related to Spanish .", "@": "French and Spanish is an other language .", "[": "Basque is not related to French and Spanish .", "\\": "The Romance languages is an other language .", "]": "Basque is not related to The Romance languages .", "^": "Basque is an other language .", "_": "Basque is not related to Basque ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that French is an Indo-European language?", "id": "54", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All Romance languages are Indo-European languages.\nPremise 1.2: French is a Romance language.\nConclusion 1: French is an Indo-European language.\nPremise 2.1: French is an Indo-European language.\nAnswer: A. Yes.\n\nExplanation:\n\n* Premise 1.1 states that all Romance languages are Indo-European languages.\n* Premise 1.2 states that French is a Romance language.\n* Conclusion 1 follows from these premises, as French is a Romance language and all Romance languages are Indo-European languages.\n* Premise 2.1 repeats the conclusion, and the answer is A. Yes, French is an Indo-European language.", "logic_premises": "[[((6→(7∧8))∪(9→(a∧b))), 3]]", "logic_conclusion": "[(4∧5)]", "correspondance": [{"0": "X is Romance a language .", "1": "X is Indo a language .", "2": "X is European a language .", "3": "French is a Romance language .", "4": "French is an Indo language .", "5": "French is an European language .", "6": "All Romance languages is Romance a language .", "7": "All Romance languages is Indo a language .", "8": "All Romance languages is European a language .", "9": "French is Romance a language .", "a": "French is Indo a language .", "b": "French is European a language ."}], "errors": [[]], "entailments_dict": [{"3": ["9"]}], "predicted_steps": [false]}
{"text": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Robert Lewandowski is a soccer player?", "id": "55", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Robert Lewandowski is a striker.\nPremise 1.2: Strikers are soccer players.\nConclusion 1: Robert Lewandowski is a soccer player.\nPremise 2.1: Robert Lewandowski left Bayern Munchen.\nPremise 2.2: If a player left a team they no longer play for that team.\nConclusion 2: Robert Lewandowski no longer plays for Bayern Munchen.\nPremise 3.1: Robert Lewandowski is a soccer player.\nAnswer: A. Yes.\n\nExplanation:\n\n* Premise 1.1 and 1.2 establish that Robert Lewandowski is a soccer player.\n* Premise 2.1 and 2.2 establish that Robert Lewandowski no longer plays for Bayern Munchen, but it does not change the fact that he is a soccer player.\n* Therefore, the answer is A. Yes, Robert Lewandowski is a soccer player.", "logic_premises": "[[0, (4→5)], [0, (((5∧6)→7)∪((8∧9)→a))]]", "logic_conclusion": "[3, 4]", "correspondance": [{"0": "Robert Lewandowski is a striker .", "1": "X is a Striker .", "2": "X is soccer a player .", "3": "Robert Lewandowski is a soccer player .", "4": "Robert Lewandowski is a Striker .", "5": "Robert Lewandowski is soccer a player ."}, {"0": "Robert Lewandowski left Bayern Munchen .", "1": "X is a player", "2": "X left a team .", "3": "X no longer play for a team .", "4": "Robert Lewandowski no longer plays for Bayern Munchen .", "5": "Bayern Munchen is a player", "6": "Bayern Munchen left a team .", "7": "Bayern Munchen no longer play for a team .", "8": "Robert Lewandowski is a player", "9": "Robert Lewandowski left a team .", "a": "Robert Lewandowski no longer play for a team ."}], "errors": [[]], "entailments_dict": [{"0": ["4"], "5": ["3"]}, {}], "predicted_steps": [true, false]}
{"text": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Robert Lewandowski plays for Bayern Munchen?", "id": "56", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Strikers are soccer players.\nPremise 1.2: Robert Lewandowski is a striker.\nConclusion 1: Robert Lewandowski is a soccer player.\nPremise 2.1: If a player left a team, they no longer play for that team.\nPremise 2.2: Robert Lewandowski left Bayern Munchen.\nConclusion 2: Robert Lewandowski no longer plays for Bayern Munchen.\nAnswer: B. No.", "logic_premises": "[[(4→5), 2], [(((5∧6)→7)∪((8∧9)→a)), 3]]", "logic_conclusion": "[3, 4]", "correspondance": [{"0": "X is a Striker .", "1": "X is soccer a player .", "2": "Robert Lewandowski is a striker .", "3": "Robert Lewandowski is a soccer player .", "4": "Robert Lewandowski is a Striker .", "5": "Robert Lewandowski is soccer a player ."}, {"0": "X is a player", "1": "X left a team .", "2": "X no longer play for a team .", "3": "Robert Lewandowski left Bayern Munchen .", "4": "Robert Lewandowski no longer plays for Bayern Munchen .", "5": "Bayern Munchen is a player", "6": "Bayern Munchen left a team .", "7": "Bayern Munchen no longer play for a team .", "8": "Robert Lewandowski is a player", "9": "Robert Lewandowski left a team .", "a": "Robert Lewandowski no longer play for a team ."}], "errors": [[]], "entailments_dict": [{"2": ["4"], "5": ["3"]}, {}], "predicted_steps": [true, false]}
{"text": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Robert Lewandowski is a star?", "id": "57", "ground_truth": "Uncertain", "reasoning": "Reasoning:\n\n1. The passage does not provide information about Robert Lewandowski being a star or not.\n2. The passage only states that Robert Lewandowski is a striker and that strikers are soccer players, and that he left Bayern Munchen.\n\nAnswer: C. Uncertain. The passage does not provide enough information to determine if Robert Lewandowski is a star or not.", "logic_premises": "[]", "logic_conclusion": "[]", "correspondance": [], "errors": ["No steps found in reasoning.", []], "entailments_dict": [], "predicted_steps": []}
{"text": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Butte and Pierre are in the same state?", "id": "58", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: The city of Pierre is not in Montana.\nPremise 1.2: Butte is a city in Montana.\nConclusion 1: Butte and Pierre are not in the same state.\nPremise 2.1: Any city in Butte is not in Pierre.\nConclusion 2: Butte and Pierre are not the same city.\nPremise 3.1: Butte and Pierre are not the same city.\nAnswer: B. No.\n\nNote: The answer can be deduced from the first premise alone, but I included additional steps to demonstrate the reasoning process.", "logic_premises": "[[0, 1], [((4→5)∪((6→7)∪((8→9)∪(a→b))))]]", "logic_conclusion": "[(2∧3), (2∧3)]", "correspondance": [{"0": "the city of Pierre is not in Montana .", "1": "Butte is a city in Montana .", "2": "Butte are not in the same state .", "3": "the city of Pierre are not in the same state ."}, {"0": "X is a city in Butte .", "1": "X is not in Pierre .", "2": "Butte are not the same city .", "3": "Pierre are not the same city .", "4": "Butte is a city in Butte .", "5": "Butte is not in Pierre .", "6": "Pierre is a city in Butte .", "7": "Pierre is not in Pierre .", "8": "Butte and Pierre is a city in Butte .", "9": "Butte and Pierre is not in Pierre .", "a": "the same city is a city in Butte .", "b": "the same city is not in Pierre ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Pierre and Bismarck are in the same state?", "id": "59", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: The passage states that the city of Pierre is not in Montana.\nPremise 1.2: The passage does not provide information about the location of Bismarck.\nConclusion 1: The passage does not provide enough information to determine if Pierre and Bismarck are in the same state.\nAnswer: C. Uncertain.\n\nNote: The answer is uncertain because the passage does not provide enough information about the location of Bismarck. Bismarck is the capital of North Dakota, so it is not in Montana, but it could be in the same state as Pierre (South Dakota) or not.", "logic_premises": "[[0, 1]]", "logic_conclusion": "[(2∧3)]", "correspondance": [{"0": "the passage states that the city of Pierre is not in Montana .", "1": "the passage does not provide information about the location of Bismarck .", "2": "the passage does not provide enough information to determine if the city of Pierre are in the same state .", "3": "the passage does not provide enough information to determine if the city of Bismarck are in the same state ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Montana is home to the city of Missoula?", "id": "60", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Montana includes the cities of Butte, Helena, and Missoula.\nConclusion 1: Missoula is a city in Montana.\nPremise 2.1: Conclusion 1: Missoula is a city in Montana.\nAnswer: A. Yes.\n\nExplanation:\nThe passage states that Montana includes the cities of Butte, Helena, and Missoula. This implies that Missoula is a city in Montana. Therefore, the answer is A. Yes. The other options, No and Uncertain, are not supported by the passage.", "logic_premises": "[[(0∧(1∧2))]]", "logic_conclusion": "[3]", "correspondance": [{"0": "Montana includes the cities of Butte .", "1": "Montana includes the cities of Helena .", "2": "Montana includes the cities of Missoula .", "3": "Missoula is a city in Montana ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Mike has an F1 visa?", "id": "61", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: International students in US have either an F1 visa or a J1 visa.\nPremise 1.2: Mike is an international student.\nConclusion 1: Mike has either an F1 visa or a J1 visa.\nPremise 2.1: Mike needs to apply for CPT if he wants to work in the US.\nPremise 2.2: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nConclusion 2: Mike has an F1 visa.\nPremise 3.1: Mike has an F1 visa.\nAnswer: A. Yes.\n\nNote: The conclusion 2 is based on the fact that CPT is only available for F1 visa holders, and Mike needs to apply for CPT if he wants to work in the US. Therefore, Mike has an F1 visa.", "logic_premises": "[[((6→(7⊻8))∪(9→(a⊻b))), 3], [0, 1]]", "logic_conclusion": "[(4⊻5), 2]", "correspondance": [{"0": "X is an International student in US .", "1": "X has an F1 visa .", "2": "X has a J1 visa .", "3": "Mike is an international student .", "4": "Mike has an F1 visa .", "5": "Mike has a J1 visa .", "6": "US is an International student in US .", "7": "US has an F1 visa .", "8": "US has a J1 visa .", "9": "Mike is an International student in US .", "a": "Mike has an F1 visa .", "b": "Mike has a J1 visa ."}, {"0": "Mike needs to apply for CPT that Mike wants to work in the US .", "1": "An international student in the US with an F1 visa needs to apply for CPT . An international student in the US with an F1 visa needs to apply for OPT that An international student in US with an F1 visa wants to work in the US .", "2": "Mike has an F1 visa ."}], "errors": [[]], "entailments_dict": [{"b": ["5"], "a": ["4"]}, {}], "predicted_steps": [false, false]}
{"text": "International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Mike has a J1 visa?", "id": "62", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: International students in US have either an F1 visa or a J1 visa.\nPremise 1.2: Mike is an international student.\nConclusion 1: Mike has an F1 visa or a J1 visa.\nPremise 2.1: Mike needs to apply for CPT if he wants to work in the US.\nPremise 2.2: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nConclusion 2: Mike has an F1 visa.\nPremise 3.1: Mike has an F1 visa.\nPremise 3.2: International students in US have either an F1 visa or a J1 visa.\nConclusion 3: Mike doesn't have a J1 visa.\nAnswer: B. No.", "logic_premises": "[[((6→(7⊻8))∪(9→(a⊻b))), 3], [0, 1], [0, ((5→(6⊻7))∪(8→(9⊻a)))]]", "logic_conclusion": "[(4∨5), 2, 4]", "correspondance": [{"0": "X is an International student in US .", "1": "X has an F1 visa .", "2": "X has a J1 visa .", "3": "Mike is an international student .", "4": "Mike has an F1 visa .", "5": "Mike has a J1 visa .", "6": "US is an International student in US .", "7": "US has an F1 visa .", "8": "US has a J1 visa .", "9": "Mike is an International student in US .", "a": "Mike has an F1 visa .", "b": "Mike has a J1 visa ."}, {"0": "Mike needs to apply for CPT that Mike wants to work in the US .", "1": "An international student in the US with an F1 visa needs to apply for CPT . An international student in the US with an F1 visa needs to apply for OPT that An international student in US with an F1 visa wants to work in the US .", "2": "Mike has an F1 visa ."}, {"0": "Mike has an F1 visa .", "1": "X is an International student in US .", "2": "X has an F1 visa .", "3": "X has a J1 visa .", "4": "Mike does n't have a J1 visa .", "5": "US is an International student in US .", "6": "US has an F1 visa .", "7": "US has a J1 visa .", "8": "Mike is an International student in US .", "9": "Mike has an F1 visa .", "a": "Mike has a J1 visa ."}], "errors": [[]], "entailments_dict": [{"b": ["5"], "a": ["4"]}, {}, {"9": ["0"]}], "predicted_steps": [false, false, false]}
{"text": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ted is a pet?", "id": "63", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Some pets are cows.\nPremise 1.2: All cows are bovines.\nConclusion 1: Some pets are bovines.\nPremise 2.1: If something is a bovine, then it is domesticated.\nPremise 2.2: No domesticated animals are alligators.\nPremise 2.3: Ted is an alligator.\nConclusion 2: Ted is not a domesticated animal.\nPremise 3.1: Ted is not a domesticated animal.\nPremise 3.2: Some pets are bovines.\nConclusion 3: Ted is not a pet.\nAnswer: B. No.\n\nExplanation:\n\n* From the passage, we know that some pets are cows, and all cows are bovines. Therefore, some pets are bovines.\n* We also know that if something is a bovine, then it is domesticated. However, we know that Ted is not a domesticated animal, and therefore, Ted is not a bovine.\n* We also know that no domesticated animals are alligators, and Ted is an alligator, so Ted is not a domesticated animal.\n* Since Ted is not a domesticated animal, and some pets are bovines, we can conclude that Ted is not a pet.", "logic_premises": "[[0, (1→2)], [(6→7), (8→9), 4], [0, 1]]", "logic_conclusion": "[3, 5, 2]", "correspondance": [{"0": "Some pets are cows .", "1": "X is a cow .", "2": "X is a bovine .", "3": "Some pets are bovines ."}, {"0": "X is a bovine .", "1": "X is domesticated .", "2": "X is a domesticated animal .", "3": "X is not an alligator .", "4": "Ted is an alligator .", "5": "Ted is not a domesticated animal .", "6": "Ted is a bovine .", "7": "Ted is domesticated .", "8": "Ted is a domesticated animal .", "9": "Ted is not an alligator ."}, {"0": "Ted is not a domesticated animal .", "1": "Some pets are bovines .", "2": "Ted is not a pet ."}], "errors": [[]], "entailments_dict": [{}, {"9": ["(¬4)"], "4": ["(¬9)"], "(¬5)": ["8"]}, {}], "predicted_steps": [false, true, false]}
{"text": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ted is a pet and a cow?", "id": "64", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All cows are bovines.\nPremise 1.2: Some pets are cows.\nConclusion 1: Some pets are bovines.\nPremise 2.1: If something is a bovine, then it is domesticated.\nPremise 2.2: No domesticated animals are alligators.\nPremise 2.3: Ted is an alligator.\nConclusion 2: Ted is not a bovine.\nPremise 3.1: Ted is not a bovine.\nPremise 3.2: Some pets are cows.\nConclusion 3: Ted is not a pet and a cow.\nAnswer: B. No.\n\nExplanation:\n\n1. From the passage, we know that some pets are cows and all cows are bovines. Therefore, some pets are bovines.\n2. We also know that if something is a bovine, then it is domesticated. However, we are told that no domesticated animals are alligators, and Ted is an alligator.\n3. Therefore, Ted cannot be a bovine, and since some pets are bovines, Ted cannot be a pet and a bowine at the same time.\n4. So, the answer is No, Ted is not a pet and a cow.", "logic_premises": "[[(0→1), 2], [(6→7), (8→9), 4], [0, 1]]", "logic_conclusion": "[3, 5, (2∧3)]", "correspondance": [{"0": "X is a cow .", "1": "X is a bovine .", "2": "Some pets are cows .", "3": "Some pets are bovines ."}, {"0": "X is a bovine .", "1": "X is domesticated .", "2": "X is a domesticated animal .", "3": "X is not an alligator .", "4": "Ted is an alligator .", "5": "Ted is not a bovine .", "6": "Ted is a bovine .", "7": "Ted is domesticated .", "8": "Ted is a domesticated animal .", "9": "Ted is not an alligator ."}, {"0": "Ted is not a bovine .", "1": "Some pets are cows .", "2": "Ted is not a pet .", "3": "Ted is not a cow ."}], "errors": [[]], "entailments_dict": [{}, {"9": ["(¬4)"], "4": ["(¬9)"], "(¬5)": ["6"]}, {}], "predicted_steps": [false, false, false]}
{"text": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Ted is a cow, then Ted is not a pet?", "id": "65", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All cows are bovines.\nPremise 1.2: Some pets are cows.\nPremise 1.3: Ted is an alligator.\nPremise 2.1: If something is a bovine, then it is domesticated.\nPremise 2.2: No domesticated animals are alligators.\nPremise 2.3: Ted is an alligator.\nConclusion 1: Ted is not a bovine.\nPremise 3.1: Some pets are cows.\nPremise 3.2: Ted is not a bovine.\nConclusion 2: Ted is not a pet.\nPremise 4.1: If Ted is a cow, then Ted is not a pet.\nPremise 4.2: Ted is not a cow.\nConclusion 3: The statement \"If Ted is a cow, then Ted is not a pet\" is not true.\nAnswer: B. No.", "logic_premises": "[[(a→b), 2, 3, (c→d), (e→f), 8], [0, 1], [(0→1), 2]]", "logic_conclusion": "[9, 2, 3]", "correspondance": [{"0": "X is a cow .", "1": "X is a bovine .", "2": "Some pets are cows .", "3": "Ted is an alligator .", "4": "X is a bovine .", "5": "X is domesticated .", "6": "X is a domesticated animal .", "7": "X is not an alligator .", "8": "Ted is an alligator .", "9": "Ted is not a bovine .", "a": "Ted is a cow .", "b": "Ted is a bovine .", "c": "Ted is a bovine .", "d": "Ted is domesticated .", "e": "Ted is a domesticated animal .", "f": "Ted is not an alligator ."}, {"0": "Some pets are cows .", "1": "Ted is not a bovine .", "2": "Ted is not a pet ."}, {"0": "Ted is a cow .", "1": "Ted is not a pet .", "2": "Ted is not a cow .", "3": "The statement \" If Ted is a cow , then Ted is not a pet \" is not true ."}], "errors": [[]], "entailments_dict": [{"b": ["c"], "3": ["8", "(¬f)"], "8": ["3", "(¬f)"], "f": ["(¬8)", "(¬3)"], "9": ["(¬b)"], "(¬9)": ["c"]}, {}, {"(¬2)": ["0"], "(¬0)": ["2"]}], "predicted_steps": [false, false, false]}
{"text": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A private Ivy League research university moved to New Haven?", "id": "66", "ground_truth": "True", "reasoning": "<s> [INST] You will be presented with a passage and a question about that passage. There are options to be chosen from, only one of which is the correct answer. You need to write your step-by-step reasoning and conclude with the answer. One reasoning step should consist of a set of premises and one conclusion. The conclusion can be deduced immediately from the premises. Premises can only be sentences from the passage or previous conclusions. \nHere is an example:\nExample Passage: Last night, Mark either went to play in the gym or visited his teacher Tony. If Mark drove last night, he didn't go to play in the gym. Mark would go visit his teacher Tony only if he and his teacher had an appointment. In fact, Mark had no appointment with his teacher Tony in advance.\nExample Question: Is it true that Mark drove last night?\nExample Options: \nA. Yes.\nB. No.\nC. Uncertain.\n [/INST]Example Reasoning:\nPremise 1.1: Mark would go visit his teacher Tony only if he had an appointment. \nPremise 1.2: Mark had no appointment with his teacher Tony.\nConclusion 1: Mark didn't visit his teacher, Tony.\nPremise 2.1: Mark either went to the gym or visited his teacher Tony.\nPremise 2.2: Mark didn't visit his teacher Tony. \nConclusion 2: Mark went to the gym.\nPremise 3.1: If Mark drove last night, he didn't go to play in the gym.\nPremise 3.2: Mark went to the gym.\nConclusion 3: Mark didn't drive last night.\nPremise 4.1: Mark didn't drive last night.\nAnswer: B. No.\n [INST] Here is an other example:\nExample Passage: David knows Mr. Zhang's friend Jack, and Jack knows David's friend Ms. Lin. Everyone of them who knows Jack has a master's degree, and everyone of them who knows Ms. Lin is from Shanghai.\nExample Question: Is it true that David is from Shanghai?\nExample Options:\nA. Yes.\nB. No.\nC. Uncertain.\n [/INST]Example Reasoning:\nPremise 1.1: David knows Mr. Zhang's friend Jack, and Jack knows David's friend Ms. Lin.\nConclusion 1: David is friend with Ms. Lin.\nPremise 2.1: David is friend with Ms. Lin.\nPremise 2.2: Everyone of them who knows Jack has a master's degree, and everyone of them who knows Ms. Lin is from Shanghai.\nConclusion 2: David is from Shanghai.\nPremise 3.1: David is from Shanghai.\nAnswer: A. Yes.\n [INST] Passage: Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nQuestion: Is it true that A private Ivy League research university moved to New Haven?\nOptions:\nA. Yes\nB. No\nC. Uncertain\n [/INST]Reasoning:\nPremise 1.1: Yale University is a private Ivy League research university.\nPremise 1.2: Yale University moved to New Haven in 1716.\nConclusion 1: Yale University, which is a private Ivy League research university, moved to New Haven.\nAnswer: A. Yes.\n\nReasons for not choosing B or C:\n\n* B is not correct because the passage states that Yale University, which is a private Ivy League research university, moved to New Haven.\n* C is not correct because the passage provides enough information to confirm that a private Ivy League research university moved to New Haven.", "logic_premises": "[[0, ((4→5)∪((6→7)∪(8→9)))], [(0∨1), 2], [(0→1), 2], [0, (1∧2)], [0, (((6→7)∧(8→9))∪(((a→b)∧(c→d))∪(((e→f)∧(g→h))∪((i→j)∧(k→l)))))], [0, 1, 2]]", "logic_conclusion": "[3, 3, 3, 3, 5, 3]", "correspondance": [{"0": "Mark would go visit Mark 's teacher Tony that Mark had an appointment .", "1": "X is an appointment with Mark 's teacher Tony .", "2": "Mark did not have X .", "3": "Mark did n't visit Mark 's teacher , Tony .", "4": "Mark is an appointment with Mark 's teacher Tony .", "5": "Mark did not have Mark .", "6": "his teacher Tony is an appointment with Mark 's teacher Tony .", "7": "Mark did not have his teacher Tony .", "8": "his teacher, Tony is an appointment with Mark 's teacher Tony .", "9": "Mark did not have his teacher, Tony ."}, {"0": "Mark either went to the gym .", "1": "Mark either visited Mark 's teacher Tony .", "2": "Mark did n't visit Mark 's teacher Tony .", "3": "Mark went to the gym ."}, {"0": "Mark drove last night .", "1": "Mark did n't go to play in the gym .", "2": "Mark went to the gym .", "3": "Mark did n't drive last night ."}, {"0": "Mark did n't drive last night .", "1": "David knows Mr. Zhang 's friend Jack .", "2": "Mr. Zhang 's friend Jack knows David 's friend Ms. Lin .", "3": "David is friend with David 's friend Ms. Lin ."}, {"0": "David is friend with Ms. Lin .", "1": "X is a person of them who knows Jack .", "2": "X has a master 's degree .", "3": "X is a person of them who knows Ms. Lin .", "4": "X is from Shanghai .", "5": "David is from Shanghai .", "6": "Shanghai is a person of them who knows Jack .", "7": "Shanghai has a master 's degree .", "8": "Shanghai is a person of them who knows Ms. Lin .", "9": "Shanghai is from Shanghai .", "a": "Jack is a person of them who knows Jack .", "b": "Jack has a master 's degree .", "c": "Jack is a person of them who knows Ms. Lin .", "d": "Jack is from Shanghai .", "e": "Ms. Lin is a person of them who knows Jack .", "f": "Ms. Lin has a master 's degree .", "g": "Ms. Lin is a person of them who knows Ms. Lin .", "h": "Ms. Lin is from Shanghai .", "i": "David is a person of them who knows Jack .", "j": "David has a master 's degree .", "k": "David is a person of them who knows Ms. Lin .", "l": "David is from Shanghai ."}, {"0": "David is from Shanghai .", "1": "Yale University is a private Ivy League research university .", "2": "Yale University moved to New Haven in 1716 .", "3": "Yale University , moved to New Haven ."}], "errors": [[]], "entailments_dict": [{}, {}, {}, {}, {"l": ["5"]}, {}], "predicted_steps": [false, false, false, false, false, false]}
{"text": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Yale University has the largest university endowment of any educational institution?", "id": "67", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Yale University's endowment was valued at $42.3 billion.\nPremise 1.2: The passage does not provide information about other educational institutions' endowments.\nConclusion 1: The passage does not provide enough information to determine if Yale University has the largest university endowment of any educational institution.\nAnswer: C. Uncertain.", "logic_premises": "[[0, 1]]", "logic_conclusion": "[((4→5)∪((6→7)∪((8→9)∪(a→b))))]", "correspondance": [{"0": "Yale University 's 's endowment was valued at $ 42.3 billion .", "1": "The passage does not provide information about other educational institutions ' endowments .", "2": "X is enough information to determines if a Yale University 's has the largest university endowment of educational institution .", "3": "The passage does not provides X .", "4": "Yale University is enough information to determines if a Yale University 's has the largest university endowment of educational institution .", "5": "The passage does not provides Yale University .", "6": "Yale Universitys endowment is enough information to determines if a Yale University 's has the largest university endowment of educational institution .", "7": "The passage does not provides Yale Universitys endowment .", "8": "The passage is enough information to determines if a Yale University 's has the largest university endowment of educational institution .", "9": "The passage does not provides The passage .", "a": "the largest university endowment of any educational institution is enough information to determines if a Yale University 's has the largest university endowment of educational institution .", "b": "The passage does not provides the largest university endowment of any educational institution ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Pierson College is a residential college at Yale?", "id": "68", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: The passage lists the residential colleges at Yale.\nPremise 1.2: Pierson College is included in the list of residential colleges at Yale.\nConclusion 1: Pierson College is a residential college at Yale.\nPremise 2.1: Pierson College is a residential college at Yale.\nAnswer: A. Yes.\n\nNote: The answer is directly derived from the passage, which explicitly states that Pierson College is one of the residential colleges at Yale.", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "The passage lists the residential colleges at Yale .", "1": "Pierson College is included in the list of residential colleges at Yale .", "2": "Pierson College is a residential college at Yale ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\"?", "id": "69", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Badults piloted in July 2013 on BBC Three.\nPremise 1.2: The Working title \"The Secret Dude Society\" was used for Badults.\nPremise 2.1: Andrew Collins was the script editor for Badults.\nConclusion 1: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nAnswer: A. Yes.", "logic_premises": "[[0, 1, 2]]", "logic_conclusion": "[3]", "correspondance": [{"0": "badults piloted in July 2013 on BBC Three .", "1": "The Working title \" The Secret Dude Society \" was used for badults .", "2": "Andrew Collins was the script editor for badults .", "3": "Andrew Collins was the script editor for a series with the working title \" The Secret Dude Society \" ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that No members of Pappy's have starred for a show piloting on BBC Two or BBC Three?", "id": "70", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Badults is a British Sitcom series, starring members of Pappy's.\nPremise 1.2: Badults piloted in July 2013 on BBC Three.\nConclusion 1: Members of Pappy's have starred for a show (Badults) that piloted on BBC Three.\nAnswer: B. No.\n\nNote: The passage states that Badults piloted on BBC Three, and that members of Pappy's starred in Badults. Therefore, it is false that no members of Pappy's have starred for a show piloting on BBC Two or BBC Three.", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "Badults is a British Sitcom series , starring members of Pappy 's 's .", "1": "Badults piloted in July 2013 on BBC Three .", "2": "Members of Pappy 's 's have starred for a show ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that KO is a company stock?", "id": "71", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Some companies’ stocks are growth companies’ stocks.\nPremise 1.2: KO is a mature company’s stock.\nPremise 1.3: All mature companies’ stocks are suitable for a retirement fund.\nPremise 1.4: KO is a stock of a mature company and thus suitable for a retirement fund.\nConclusion 1: KO is a company stock.\nAnswer: A. Yes.\n\nExplanation:\n\n* From Premise 1.2, we know that KO is a stock of a mature company.\n* From Premise 1.3, we know that all mature companies’ stocks are suitable for a retirement fund.\n* From Premise 1.4, we can infer that KO is a stock of a mature company and thus suitable for a retirement fund.\n* Therefore, KO is a company stock.", "logic_premises": "[[0, 1, (6→7), 4]]", "logic_conclusion": "[5]", "correspondance": [{"0": "Some companies ’ stocks are growth companies ’ stocks .", "1": "KO is a mature company ’s stock .", "2": "X is a mature company ’ stocks .", "3": "X is suitable for a retirement fund .", "4": "KO is a stock of a mature company and thus suitable for a retirement fund .", "5": "KO is a company stock .", "6": "KO is a mature company ’ stocks .", "7": "KO is suitable for a retirement fund ."}], "errors": [[]], "entailments_dict": [{"1": ["6"]}], "predicted_steps": [false]}
{"text": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that KO is a company stock and a growth company’s stock?", "id": "72", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All growth companies’ stocks are volatile.\nPremise 1.2: If the stock price is volatile, then it is not suitable for a retirement fund.\nPremise 1.3: Some companies’ stocks are growth companies’ stocks.\nPremise 1.4: All mature companies’ stocks are suitable for a retirement fund.\nPremise 1.5: KO is a mature company’s stock.\nConclusion 1: KO is not a growth company's stock.\nPremise 2.1: KO is a mature company’s stock.\nPremise 2.2: All mature companies’ stocks are suitable for a retirement fund.\nConclusion 2: KO is a company stock suitable for a retirement fund.\nPremise 3.1: Some companies’ stocks are growth companies’ stocks.\nPremise 3.2: KO is not a growth company's stock.\nConclusion 3: KO is not a growth company's stock and not one of the companies referred in the premise 3.1\nPremise 4.1: KO is a company stock.\nPremise 4.2: Conclusion 3: KO is not a growth company's stock.\nAnswer: B. No.\n\nExplanation:\n\n* From the passage, we can deduce that KO is a mature company's stock and mature company's stocks are not growth companies' stocks.\n* Also, KO is suitable for a retirement fund, which means that it is not volatile, and therefore not a growth company's stock.\n* Therefore, KO is not a growth company's stock.", "logic_premises": "[[((9→a)∪(b→c)), (2→3), 4, ((d→e)∪(f→g)), 7], [0, (4→5)], [0, 1]]", "logic_conclusion": "[8, 3, (2∧3)]", "correspondance": [{"0": "X is growth a company ’ stocks .", "1": "X is volatile .", "2": "the stock price is volatile .", "3": "the stock price is not suitable for a retirement fund .", "4": "Some companies ’ stocks are growth companies ’ stocks .", "5": "X is a mature company ’ stocks .", "6": "X is suitable for a retirement fund .", "7": "KO is a mature company ’s stock .", "8": "KO is not a growth company 's stock .", "9": "the stock price is growth a company ’ stocks .", "a": "the stock price is volatile .", "b": "KO is growth a company ’ stocks .", "c": "KO is volatile .", "d": "the stock price is a mature company ’ stocks .", "e": "the stock price is suitable for a retirement fund .", "f": "KO is a mature company ’ stocks .", "g": "KO is suitable for a retirement fund ."}, {"0": "KO is a mature company ’s stock .", "1": "X is a mature company ’ stocks .", "2": "X is suitable for a retirement fund .", "3": "KO is a company stock suitable for a retirement fund .", "4": "KO is a mature company ’ stocks .", "5": "KO is suitable for a retirement fund ."}, {"0": "Some companies ’ stocks are growth companies ’ stocks .", "1": "KO is not a growth company 's stock .", "2": "KO is not a growth company 's stock", "3": "KO is not one of the companies referred in the premise 3.1"}], "errors": [[]], "entailments_dict": [{"a": ["2"], "7": ["f"], "e": ["(¬3)"], "3": ["(¬e)"]}, {"0": ["4"]}, {}], "predicted_steps": [false, false, false]}
{"text": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If KO is a growth company’s stock or if its price is volatile, then KO is neither a company’s stock nor is its price volatile?", "id": "73", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If the stock price is volatile, then it is not suitable for a retirement fund.\nPremise 1.2: All growth companies’ stocks are volatile.\nConclusion 1: Growth companies’ stocks are not suitable for a retirement fund.\nPremise 2.1: Some companies’ stocks are growth companies’ stocks.\nPremise 2.2: KO is a mature company’s stock.\nPremise 2.3: All mature companies’ stocks are suitable for a retirement fund.\nConclusion 2: KO is suitable for a retirement fund.\nPremise 3.1: KO is suitable for a retirement fund.\nPremise 3.2: If KO is a growth company’s stock or if its price is volatile, then KO is not suitable for a retirement fund.\nConclusion 3: KO is not a growth company’s stock and its price is not volatile.\nPremise 4.1: KO is not a growth company’s stock and its price is not volatile.\nAnswer: B. No.\n\nExplanation:\nThe passage states that KO is a mature company’s stock, which means it is not a growth company’s stock. Additionally, the passage states that KO is suitable for a retirement fund, which contradicts the assumption that KO’s price is volatile. Therefore, KO is not a growth company’s stock and its price is not volatile.", "logic_premises": "[[(0→1), (6→7)], [0, 1, (5→6)], [0, 1]]", "logic_conclusion": "[(8→9), 4, (2∧3)]", "correspondance": [{"0": "the stock price is volatile .", "1": "the stock price is not suitable for a retirement fund .", "2": "X is growth a company ’ stocks .", "3": "X is volatile .", "4": "X is a Growth company ’ a stock .", "5": "X is not suitable for a retirement fund .", "6": "the stock price is growth a company ’ stocks .", "7": "the stock price is volatile .", "8": "the stock price is a Growth company ’ a stock .", "9": "the stock price is not suitable for a retirement fund ."}, {"0": "Some companies ’ stocks are growth companies ’ stocks .", "1": "KO is a mature company ’s stock .", "2": "X is a mature company ’ stocks .", "3": "X is suitable for a retirement fund .", "4": "KO is suitable for a retirement fund .", "5": "KO is a mature company ’ stocks .", "6": "KO is suitable for a retirement fund ."}, {"0": "KO is suitable for a retirement fund .", "1": "If KO is a growth company ’s stock or if KO 's price is volatile that then KO is not suitable for a retirement fund .", "2": "KO is not a growth company ’s stock .", "3": "KO 's price is not volatile ."}], "errors": [[]], "entailments_dict": [{"7": ["0"], "8": ["6"], "1": ["9"]}, {"1": ["5"], "6": ["4"]}, {}], "predicted_steps": [true, true, false]}
{"text": "All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul. Joe's vehicle registration plate is from Istanbul. Tom's license plate begins with the number 35. [BG] If a license plate begins with the number 35, then it does not begin with the number 34.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Joe's license plate begins with the number 34?", "id": "74", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All vehicle registration plates in Istanbul begin with the number 34.\nPremise 1.2: Joe's vehicle registration plate is from Istanbul.\nConclusion 1: Joe's license plate begins with the number 34.\nPremise 2.1: If a license plate begins with the number 35, then it does not begin with the number 34.\nPremise 2.2: Tom's license plate begins with the number 35.\nConclusion 2: Tom's license plate does not begin with the number 34.\nPremise 3.1: Joe's license plate begins with the number 34.\nAnswer: A. Yes.\n\nExplanation:\n\n* From the first two premises, we can conclude that Joe's license plate begins with the number 34.\n* From the third premise, we can conclude that Tom's license plate does not begin with the number 34.\n* Since the question asks about Joe's license plate, the information about Tom's license plate is not relevant to the answer.", "logic_premises": "[[((4→5)∪((6→7)∪((8→9)∪(a→b)))), 2], [(((5∧6)→7)∪(((8∧9)→a)∪((b∧c)→d))), 3]]", "logic_conclusion": "[3, 4]", "correspondance": [{"0": "X is a vehicle registration a plate in Istanbul .", "1": "X begins with the number 34 .", "2": "Joe 's 's vehicle registration plate is from Istanbul .", "3": "Joe 's 's license plate begins with the number 34 .", "4": "Joes vehicle registration plate is a vehicle registration a plate in Istanbul .", "5": "Joes vehicle registration plate begins with the number 34 .", "6": "Istanbul is a vehicle registration a plate in Istanbul .", "7": "Istanbul begins with the number 34 .", "8": "the number 34 is a vehicle registration a plate in Istanbul .", "9": "the number 34 begins with the number 34 .", "a": "Joes license plate is a vehicle registration a plate in Istanbul .", "b": "Joes license plate begins with the number 34 ."}, {"0": "X is a license plate", "1": "X begins with the number 35 .", "2": "X does not begin with the number 34 .", "3": "Tom 's 's license plate begins with the number 35 .", "4": "Tom 's 's license plate does not begin with the number 34 .", "5": "the number 35 is a license plate", "6": "the number 35 begins with the number 35 .", "7": "the number 35 does not begin with the number 34 .", "8": "the number 34 is a license plate", "9": "the number 34 begins with the number 35 .", "a": "the number 34 does not begin with the number 34 .", "b": "Toms license plate is a license plate", "c": "Toms license plate begins with the number 35 .", "d": "Toms license plate does not begin with the number 34 ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul. Joe's vehicle registration plate is from Istanbul. Tom's license plate begins with the number 35. [BG] If a license plate begins with the number 35, then it does not begin with the number 34.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom's license plate is from Istanbul?", "id": "75", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All vehicle registration plates in Istanbul begin with the number 34.\nPremise 1.2: Plates that do not begin with the number 34 are not from Istanbul.\nPremise 2.1: Joe's vehicle registration plate is from Istanbul.\nPremise 2.2: Joe's vehicle registration plate begins with the number 34.\nPremise 3.1: Tom's license plate begins with the number 35.\nPremise 4.1: If a license plate begins with the number 35, then it does not begin with the number 34.\nConclusion 1: Tom's license plate is not from Istanbul.\nAnswer: B. No.\n\nExplanation:\n\n* From Premise 1.1 and 1.2, we can conclude that a license plate beginning with 34 is from Istanbul and a license plate not beginning with 34 is not from Istanbul.\n* From Premise 2.1 and 2.2, we can conclude that Joe's license plate is from Istanbul and it begins with 34.\n* From Premise 3.1, we know that Tom's license plate begins with 35.\n* From Premise 4.1, we can conclude that Tom's license plate does not begin with 34.\n* Therefore, from Conclusion 1, we can answer that Tom's license plate is not from Istanbul.", "logic_premises": "[[((b→c)∪((d→e)∪((f→g)∪((h→i)∪(j→k))))), ((l→m)∪((n→o)∪((p→q)∪((r→s)∪(t→u))))), 4, 5, 6, (((v∧w)→x)∪(((y∧z)→A)∪(((B∧C)→D)∪(((E∧F)→G)∪((H∧I)→J)))))]]", "logic_conclusion": "[a]", "correspondance": [{"0": "X is a vehicle registration a plate in Istanbul .", "1": "X begins with the number 34 .", "2": "X is a Plate that do not begin with the number 34 .", "3": "X is not from Istanbul .", "4": "Joe 's 's vehicle registration plate is from Istanbul .", "5": "Joe 's 's vehicle registration plate begins with the number 34 .", "6": "Tom 's 's license plate begins with the number 35 .", "7": "X is a license plate", "8": "X begins with the number 35 .", "9": "X does not begin with the number 34 .", "a": "Tom 's 's license plate is not from Istanbul .", "b": "Istanbul is a vehicle registration a plate in Istanbul .", "c": "Istanbul begins with the number 34 .", "d": "the number 35 is a vehicle registration a plate in Istanbul .", "e": "the number 35 begins with the number 34 .", "f": "the number 34 is a vehicle registration a plate in Istanbul .", "g": "the number 34 begins with the number 34 .", "h": "Joes vehicle registration plate is a vehicle registration a plate in Istanbul .", "i": "Joes vehicle registration plate begins with the number 34 .", "j": "Toms license plate is a vehicle registration a plate in Istanbul .", "k": "Toms license plate begins with the number 34 .", "l": "Istanbul is a Plate that do not begin with the number 34 .", "m": "Istanbul is not from Istanbul .", "n": "the number 35 is a Plate that do not begin with the number 34 .", "o": "the number 35 is not from Istanbul .", "p": "the number 34 is a Plate that do not begin with the number 34 .", "q": "the number 34 is not from Istanbul .", "r": "Joes vehicle registration plate is a Plate that do not begin with the number 34 .", "s": "Joes vehicle registration plate is not from Istanbul .", "t": "Toms license plate is a Plate that do not begin with the number 34 .", "u": "Toms license plate is not from Istanbul .", "v": "Istanbul is a license plate", "w": "Istanbul begins with the number 35 .", "x": "Istanbul does not begin with the number 34 .", "y": "the number 35 is a license plate", "z": "the number 35 begins with the number 35 .", "A": "the number 35 does not begin with the number 34 .", "B": "the number 34 is a license plate", "C": "the number 34 begins with the number 35 .", "D": "the number 34 does not begin with the number 34 .", "E": "Joes vehicle registration plate is a license plate", "F": "Joes vehicle registration plate begins with the number 35 .", "G": "Joes vehicle registration plate does not begin with the number 34 .", "H": "Toms license plate is a license plate", "I": "Toms license plate begins with the number 35 .", "J": "Toms license plate does not begin with the number 34 ."}], "errors": [[]], "entailments_dict": [{"c": ["(¬x)"], "G": ["(¬i)"], "k": ["(¬J)"], "D": ["(¬g)"], "g": ["(¬D)"], "A": ["(¬e)"], "i": ["(¬G)"], "e": ["(¬A)"], "x": ["(¬c)"], "J": ["(¬k)"]}], "predicted_steps": [false]}
{"text": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Mary needs to earn money to help pay for her college tuition?", "id": "76", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nPremise 1.2: Mary works in student jobs on campus.\nConclusion 1: Mary needs to earn money to help pay for her college tuition.\nPremise 2.1: Mary needs to earn money to help pay for her college tuition.\nAnswer: A. Yes\n\nNote: The second premise in the reasoning is directly derived from the passage, which states \"Mary works in student jobs on campus.\" This, combined with the first premise, leads to the conclusion that Mary needs to earn money to help pay for her college tuition.", "logic_premises": "[[(4→5), 2]]", "logic_conclusion": "[3]", "correspondance": [{"0": "X work in student jobs on campus .", "1": "X need to earn money to help pay for X 's college tuition .", "2": "Mary works in student jobs on campus .", "3": "Mary needs to earn money to help pay for Mary 's college tuition .", "4": "Mary work in student jobs on campus .", "5": "Mary need to earn money to help pay for Mary 's college tuition ."}], "errors": [[]], "entailments_dict": [{"2": ["4"], "5": ["3"]}], "predicted_steps": [true]}
{"text": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls?", "id": "77", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nPremise 1.2: If people order takeout frequently in college, then they work in student jobs on campus.\nPremise 1.3: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nPremise 1.4: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nPremise 1.5: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nPremise 2.1: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition.\nPremise 2.2: Mary is neither picky nor needs to earn money to help pay for her college tuition.\nConclusion 1: Mary is not picky.\nPremise 3.1: Mary is not picky.\nPremise 3.2: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nConclusion 2: Mary spends a lot of her time eating and catching up with friends in the campus dining halls.\nPremise 4.1: Mary spends a lot of her time eating and catching up with friends in the campus dining halls.\nAnswer: A. Yes.", "logic_premises": "[[((m→n)∪((o→p)∪(q→r))), ((s→t)∪((u→v)∪(w→x))), ((y→(z⊻(A∧(B∧C))))∪((D→(E⊻(F∧(G∧H))))∪(I→(J⊻(K∧(L∧M)))))), (((N∧(O∧P))→Q)∪(((R∧(S∧T))→U)∪((V∧(W∧X))→Y))), (((Z∧(!∧\"))→#)∪((($∧(%∧&))→*)∪((+∧(,∧-))→.))), (h∧i), (j∧k)], [0, (((6∧(7∧8))→9)∪(((a∧(b∧c))→d)∪((e∧(f∧g))→h)))]]", "logic_conclusion": "[l, 5]", "correspondance": [{"0": "X work in student jobs on campus .", "1": "X need to earn money to help pay for X 's college tuition .", "2": "X order takeout frequently in college .", "3": "X work in student jobs on campus .", "4": "X is a person .", "5": "X orders takeout frequently in college .", "6": "X enjoys the dining hall .", "7": "X enjoys the meals .", "8": "X enjoys the recipes .", "9": "X enjoy the dining hall .", "a": "X enjoy the meals .", "b": "X enjoy the recipes .", "c": "X are not picky eaters .", "d": "X enjoy the dining hall .", "e": "X enjoy the meals .", "f": "X enjoy the recipes .", "g": "X spend a lot of X 's time eating and catching up with friends in the campus dining halls .", "h": "Mary works in student jobs on campus .", "i": "Mary needs to earn money to help pay for Mary 's college tuition .", "j": "Mary VP .", "k": "Mary does not need to earn money to help pay for Mary 's college tuition .", "l": "Mary is not picky .", "m": "the campus dining halls work in student jobs on campus .", "n": "the campus dining halls need to earn money to help pay for the campus dining halls 's college tuition .", "o": "the dining hall meals and recipes work in student jobs on campus .", "p": "the dining hall meals and recipes need to earn money to help pay for the dining hall meals and recipes 's college tuition .", "q": "Mary work in student jobs on campus .", "r": "Mary need to earn money to help pay for Mary 's college tuition .", "s": "the campus dining halls order takeout frequently in college .", "t": "the campus dining halls work in student jobs on campus .", "u": "the dining hall meals and recipes order takeout frequently in college .", "v": "the dining hall meals and recipes work in student jobs on campus .", "w": "Mary order takeout frequently in college .", "x": "Mary work in student jobs on campus .", "y": "the campus dining halls is a person .", "z": "the campus dining halls orders takeout frequently in college .", "A": "the campus dining halls enjoys the dining hall .", "B": "the campus dining halls enjoys the meals .", "C": "the campus dining halls enjoys the recipes .", "D": "the dining hall meals and recipes is a person .", "E": "the dining hall meals and recipes orders takeout frequently in college .", "F": "the dining hall meals and recipes enjoys the dining hall .", "G": "the dining hall meals and recipes enjoys the meals .", "H": "the dining hall meals and recipes enjoys the recipes .", "I": "Mary is a person .", "J": "Mary orders takeout frequently in college .", "K": "Mary enjoys the dining hall .", "L": "Mary enjoys the meals .", "M": "Mary enjoys the recipes .", "N": "the campus dining halls enjoy the dining hall .", "O": "the campus dining halls enjoy the meals .", "P": "the campus dining halls enjoy the recipes .", "Q": "the campus dining halls are not picky eaters .", "R": "the dining hall meals and recipes enjoy the dining hall .", "S": "the dining hall meals and recipes enjoy the meals .", "T": "the dining hall meals and recipes enjoy the recipes .", "U": "the dining hall meals and recipes are not picky eaters .", "V": "Mary enjoy the dining hall .", "W": "Mary enjoy the meals .", "X": "Mary enjoy the recipes .", "Y": "Mary are not picky eaters .", "Z": "the campus dining halls enjoy the dining hall .", "!": "the campus dining halls enjoy the meals .", "\"": "the campus dining halls enjoy the recipes .", "#": "the campus dining halls spend a lot of the campus dining halls 's time eating and catching up with friends in the campus dining halls .", "$": "the dining hall meals and recipes enjoy the dining hall .", "%": "the dining hall meals and recipes enjoy the meals .", "&": "the dining hall meals and recipes enjoy the recipes .", "*": "the dining hall meals and recipes spend a lot of the dining hall meals and recipes 's time eating and catching up with friends in the campus dining halls .", "+": "Mary enjoy the dining hall .", ",": "Mary enjoy the meals .", "-": "Mary enjoy the recipes .", ".": "Mary spend a lot of Mary 's time eating and catching up with friends in the campus dining halls ."}, {"0": "Mary is not picky .", "1": "X enjoy the dining hall .", "2": "X enjoy the meals .", "3": "X enjoy the recipes .", "4": "X spend a lot of X 's time eating and catching up with friends in the campus dining halls .", "5": "Mary spends a lot of Mary 's time eating and catching up with friends in the campus dining halls .", "6": "the campus dining halls enjoy the dining hall .", "7": "the campus dining halls enjoy the meals .", "8": "the campus dining halls enjoy the recipes .", "9": "the campus dining halls spend a lot of the campus dining halls 's time eating and catching up with friends in the campus dining halls .", "a": "the dining hall meals and recipes enjoy the dining hall .", "b": "the dining hall meals and recipes enjoy the meals .", "c": "the dining hall meals and recipes enjoy the recipes .", "d": "the dining hall meals and recipes spend a lot of the dining hall meals and recipes 's time eating and catching up with friends in the campus dining halls .", "e": "Mary enjoy the dining hall .", "f": "Mary enjoy the meals .", "g": "Mary enjoy the recipes .", "h": "Mary spend a lot of Mary 's time eating and catching up with friends in the campus dining halls ."}], "errors": [[]], "entailments_dict": [{"B": ["O", "!"], "C": ["P", "\""], "G": ["S", "%"], "r": ["i", "(¬k)"], "A": ["Z", "N"], "H": ["T", "&"], "M": ["X", "-"], "K": ["V", "+"], "L": [",", "W"], "F": ["$", "R"], "t": ["m"], "E": ["u"], "x": ["q", "h"], "J": ["w"], "h": ["q"], "z": ["s"], "v": ["o"], "k": ["(¬i)", "(¬r)"], "i": ["(¬k)"], "(¬k)": ["i"], "(¬i)": ["k"]}, {"h": ["5"]}], "predicted_steps": ["Contradiction in the premises", false]}
{"text": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls?", "id": "78", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nPremise 1.2: If people order takeout frequently in college, then they work in student jobs on campus.\nPremise 1.3: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nPremise 1.4: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nPremise 1.5: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nPremise 2.1: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition.\nPremise 2.2: Mary is neither picky nor needs to earn money to help pay for her college tuition.\nPremise 2.3: Mary is not picky implies that she enjoys the dining hall meals and recipes.\nPremise 2.4: Enjoying the dining hall meals and recipes implies that she spends a lot of her time eating and catching up with friends in the campus dining halls.\nConclusion: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nAnswer: A. Yes.", "logic_premises": "[[((q→r)∪((s→t)∪(u→v))), ((w→x)∪((y→z)∪(A→B))), ((C→(D⊻(E∧(F∧G))))∪((H→(I⊻(J∧(K∧L))))∪(M→(N⊻(O∧(P∧Q)))))), (((R∧(S∧T))→U)∪(((V∧(W∧X))→Y)∪((Z∧(!∧\"))→#))), ((($∧(%∧&))→*)∪(((+∧(,∧-))→.)∪((/∧(:∧;))→<))), (h∧i), (j∧k), l, m]]", "logic_conclusion": "[(n⊻(o→p))]", "correspondance": [{"0": "X work in student jobs on campus .", "1": "X need to earn money to help pay for X 's college tuition .", "2": "X order takeout frequently in college .", "3": "X work in student jobs on campus .", "4": "X is a person .", "5": "X orders takeout frequently in college .", "6": "X enjoys the dining hall .", "7": "X enjoys the meals .", "8": "X enjoys the recipes .", "9": "X enjoy the dining hall .", "a": "X enjoy the meals .", "b": "X enjoy the recipes .", "c": "X are not picky eaters .", "d": "X enjoy the dining hall .", "e": "X enjoy the meals .", "f": "X enjoy the recipes .", "g": "X spend a lot of X 's time eating and catching up with friends in the campus dining halls .", "h": "Mary works in student jobs on campus .", "i": "Mary needs to earn money to help pay for Mary 's college tuition .", "j": "Mary VP .", "k": "Mary does not need to earn money to help pay for Mary 's college tuition .", "l": "Mary is not picky implies that Mary enjoys the dining hall meals and recipes .", "m": "Enjoying the dining hall meals and recipes implies that Mary spends a lot of Mary 's time eating and catching up with friends in the campus dining halls .", "n": "Mary is not a picky eater .", "o": "Mary is .", "p": "Mary spends a lot of Mary 's time eating and catching up with friends in the campus dining halls .", "q": "the campus dining halls work in student jobs on campus .", "r": "the campus dining halls need to earn money to help pay for the campus dining halls 's college tuition .", "s": "the dining hall meals and recipes work in student jobs on campus .", "t": "the dining hall meals and recipes need to earn money to help pay for the dining hall meals and recipes 's college tuition .", "u": "Mary work in student jobs on campus .", "v": "Mary need to earn money to help pay for Mary 's college tuition .", "w": "the campus dining halls order takeout frequently in college .", "x": "the campus dining halls work in student jobs on campus .", "y": "the dining hall meals and recipes order takeout frequently in college .", "z": "the dining hall meals and recipes work in student jobs on campus .", "A": "Mary order takeout frequently in college .", "B": "Mary work in student jobs on campus .", "C": "the campus dining halls is a person .", "D": "the campus dining halls orders takeout frequently in college .", "E": "the campus dining halls enjoys the dining hall .", "F": "the campus dining halls enjoys the meals .", "G": "the campus dining halls enjoys the recipes .", "H": "the dining hall meals and recipes is a person .", "I": "the dining hall meals and recipes orders takeout frequently in college .", "J": "the dining hall meals and recipes enjoys the dining hall .", "K": "the dining hall meals and recipes enjoys the meals .", "L": "the dining hall meals and recipes enjoys the recipes .", "M": "Mary is a person .", "N": "Mary orders takeout frequently in college .", "O": "Mary enjoys the dining hall .", "P": "Mary enjoys the meals .", "Q": "Mary enjoys the recipes .", "R": "the campus dining halls enjoy the dining hall .", "S": "the campus dining halls enjoy the meals .", "T": "the campus dining halls enjoy the recipes .", "U": "the campus dining halls are not picky eaters .", "V": "the dining hall meals and recipes enjoy the dining hall .", "W": "the dining hall meals and recipes enjoy the meals .", "X": "the dining hall meals and recipes enjoy the recipes .", "Y": "the dining hall meals and recipes are not picky eaters .", "Z": "Mary enjoy the dining hall .", "!": "Mary enjoy the meals .", "\"": "Mary enjoy the recipes .", "#": "Mary are not picky eaters .", "$": "the campus dining halls enjoy the dining hall .", "%": "the campus dining halls enjoy the meals .", "&": "the campus dining halls enjoy the recipes .", "*": "the campus dining halls spend a lot of the campus dining halls 's time eating and catching up with friends in the campus dining halls .", "+": "the dining hall meals and recipes enjoy the dining hall .", ",": "the dining hall meals and recipes enjoy the meals .", "-": "the dining hall meals and recipes enjoy the recipes .", ".": "the dining hall meals and recipes spend a lot of the dining hall meals and recipes 's time eating and catching up with friends in the campus dining halls .", "/": "Mary enjoy the dining hall .", ":": "Mary enjoy the meals .", ";": "Mary enjoy the recipes .", "<": "Mary spend a lot of Mary 's time eating and catching up with friends in the campus dining halls ."}], "errors": [[]], "entailments_dict": [{"D": ["w"], "Q": ["\"", ";"], "F": ["S", "%"], "N": ["A"], "O": ["Z", "/"], "E": ["R", "$"], "P": ["!", ":"], "L": ["X", "-"], "J": ["V", "+"], "K": [",", "W"], "B": ["h", "u"], "x": ["q"], "v": ["i", "(¬k)"], "h": ["u"], "G": ["&", "T"], "z": ["s"], "I": ["y"], "o": ["M"], "#": ["n"], "<": ["p"], "k": ["(¬i)", "(¬v)"], "i": ["(¬k)"], "(¬k)": ["i"], "(¬i)": ["k"]}], "predicted_steps": ["Contradiction in the premises"]}
{"text": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dried Thai chilies are a product of Baked by Melissa?", "id": "79", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: No bakery is spicy.\nPremise 1.2: All cupcakes are bakeries.\nPremise 1.3: All products of Baked by Melissa are cupcakes.\nConclusion 1: Products of Baked by Melissa are not spicy.\nPremise 2.1: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nPremise 2.2: Dried Thai chilies are spicy.\nConclusion 2: Dried Thai chilies are not a bakery.\nPremise 3.1: Dried Thai chilies are not a bakery.\nPremise 3.2: Products of Baked by Melissa are not spicy.\nPremise 3.3: Dried Thai chilies are spicy.\nConclusion 3: Dried Thai chilies are not a product of Baked by Melissa.\nPremise 4.1: Dried Thai chilies are not a product of Baked by Melissa.\nAnswer: B. No.\n\nNote: The conclusion is based on the premises, and the answer is derived from the conclusion. The premises are derived from the passage, and the conclusion is deduced from the premises.", "logic_premises": "[[(0→1), (2→3), (4→5)], [(0→(1∨2)), (3→4)], [(0→1), (2→3), (4→5)]]", "logic_conclusion": "[(6→7), (5→6), (6→7)]", "correspondance": [{"0": "X is a bakery .", "1": "X is not spicy .", "2": "X is a cupcake .", "3": "X is a bakery .", "4": "X is a product of Baked by Melissa .", "5": "X is a cupcake .", "6": "X is a Product of Baked by Melissa .", "7": "X is not spicy ."}, {"0": "dried Thai chilies are spicy or a bakery .", "1": "dried Thai chilies are a hotpot .", "2": "dried Thai chilies are spicy .", "3": "X is Dried a Thai chile .", "4": "X is spicy .", "5": "X is Dried a Thai chile .", "6": "X is not a bakery ."}, {"0": "X is Dried a Thai chile .", "1": "X is not a bakery .", "2": "X is a Product of Baked by Melissa .", "3": "X is not spicy .", "4": "X is Dried a Thai chile .", "5": "X is spicy .", "6": "X is Dried a Thai chile .", "7": "X is not a product of Baked by Melissa ."}], "errors": [[]], "entailments_dict": [{"5": ["2"], "3": ["0"], "6": ["4"], "1": ["7"]}, {"5": ["3"]}, {"6": ["0", "4"], "3": ["(¬5)"], "5": ["(¬3)"], "(¬7)": ["2"]}], "predicted_steps": [true, false, true]}
{"text": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dried Thai chilies are not a product of Baked by Melissa?", "id": "80", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: No bakery is spicy.\nPremise 1.2: All cupcakes are bakeries.\nPremise 1.3: All products of Baked by Melissa are cupcakes.\nConclusion 1: Products of Baked by Melissa are not spicy.\nPremise 2.1: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nPremise 2.2: Dried Thai chilies are spicy.\nPremise 2.3: Dried Thai chilies are not a bakery.\nPremise 2.4: Dried Thai chilies are not a hotpot.\nConclusion 2: Dried Thai chilies are not spicy or a bakery.\nPremise 3.1: Dried Thai chilies are not spicy or a bakery.\nPremise 3.2: Products of Baked by Melissa are not spicy.\nConclusion 3: Dried Thai chilies are not a product of Baked by Melissa.\nPremise 4.1: Dried Thai chilies are not a product of Baked by Melissa.\nAnswer: A. Yes.\n\nThe reasoning is based on the premises that no bakery is spicy, all products of Baked by Melissa are cupcakes, and cupcakes are bakeries. Therefore, products of Baked by Melissa are not spicy. The passage also states that if dried Thai chilies are spicy or a bakery, then they are a hotpot or are spicy. However, dried Thai chilies are not spicy or a bakery, so they are not a hotpot. Since they are not spicy, not a bakery, and not a hotpot, they cannot be a product of Baked by Melissa.", "logic_premises": "[[(0→1), (2→3), (4→5)], [(0→(1∨2)), (3→4), (5→6), (7→8)], [(0→1), (2→3)]]", "logic_conclusion": "[(6→7), (9→a), (4→5)]", "correspondance": [{"0": "X is a bakery .", "1": "X is not spicy .", "2": "X is a cupcake .", "3": "X is a bakery .", "4": "X is a product of Baked by Melissa .", "5": "X is a cupcake .", "6": "X is a Product of Baked by Melissa .", "7": "X is not spicy ."}, {"0": "dried Thai chilies are spicy or a bakery .", "1": "dried Thai chilies are a hotpot .", "2": "dried Thai chilies are spicy .", "3": "X is Dried a Thai chile .", "4": "X is spicy .", "5": "X is Dried a Thai chile .", "6": "X is not a bakery .", "7": "X is Dried a Thai chile .", "8": "X is not a hotpot .", "9": "X is Dried a Thai chile .", "a": "X is not spicy or a bakery ."}, {"0": "X is Dried a Thai chile .", "1": "X is not spicy or a bakery .", "2": "X is a Product of Baked by Melissa .", "3": "X is not spicy .", "4": "X is Dried a Thai chile .", "5": "X is not a product of Baked by Melissa ."}], "errors": [[]], "entailments_dict": [{"5": ["2"], "3": ["0"], "6": ["4"], "1": ["7"]}, {"9": ["3", "5", "7"]}, {"4": ["0"], "(¬5)": ["2"]}], "predicted_steps": [true, false, false]}
{"text": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dried Thai chilies are a hotpot?", "id": "81", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: No bakery is spicy.\nPremise 1.2: All cupcakes are bakeries.\nPremise 1.3: All hotpots are spicy.\nPremise 1.4: All products of Baked by Melissa are cupcakes.\nPremise 2.1: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nConclusion 1: Dried Thai chilies are not bakeries (from Premise 1.1 and 1.2)\nConclusion 2: Dried Thai chilies are not spicy (from Premise 1.1 and 1.2)\nConclusion 3: Dried Thai chilies are not a hotpot (from Conclusion 1 and 2)\nAnswer: B. No.\n\nNote: The passage states that no bakery is spicy, and all cupcakes are bakeries. Therefore, cupcakes are not spicy. The passage also states that all products of Baked by Melissa are cupcakes, so products of Baked by Melissa are not spicy. Dried Thai chilies are not mentioned as a product of Baked by Melissa, so it is not possible to determine if they are a hotpot or not. However, since they are not spicy, they cannot be a hotpot.", "logic_premises": "[[(d→e), (f→g), (h→i), (j→k), (8→(9∨a))]]", "logic_conclusion": "[(l→m)]", "correspondance": [{"0": "X is a bakery .", "1": "X is not spicy .", "2": "X is a cupcake .", "3": "X is a bakery .", "4": "X is a hotpot .", "5": "X is spicy .", "6": "X is a product of Baked by Melissa .", "7": "X is a cupcake .", "8": "dried Thai chilies are spicy or a bakery .", "9": "dried Thai chilies are a hotpot .", "a": "dried Thai chilies are spicy .", "b": "X is Dried a Thai chile .", "c": "X is not a bakery .", "d": "Melissa is a bakery .", "e": "Melissa is not spicy .", "f": "Melissa is a cupcake .", "g": "Melissa is a bakery .", "h": "Melissa is a hotpot .", "i": "Melissa is spicy .", "j": "Melissa is a product of Baked by Melissa .", "k": "Melissa is a cupcake .", "l": "Melissa is Dried a Thai chile .", "m": "Melissa is not a bakery ."}], "errors": [[]], "entailments_dict": [{"k": ["f"], "g": ["d"], "e": ["(¬i)"], "i": ["(¬e)"], "(¬m)": ["d"]}], "predicted_steps": [false]}
{"text": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dried Thai chilies are neither a product of Baked by Melissa nor a bakery?", "id": "82", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: No bakery is spicy.\nPremise 1.2: All cupcakes are bakeries.\nPremise 1.3: All products of Baked by Melissa are cupcakes.\nConclusion 1: All products of Baked by Melissa are bakeries.\nPremise 2.1: Dried Thai chilies are spicy or a bakery.\nPremise 2.2: Dried Thai chilies are not a product of Baked by Melissa.\nPremise 2.3: From Conclusion 1, Dried Thai chilies are not bakeries.\nConclusion 2: Dried Thai chilies are not a product of Baked by Melissa nor a bakery.\nPremise 3.1: Dried Thai chilies are spicy or a bakery.\nPremise 3.2: Dried Thai chilies are not a hotpot.\nPremise 3.3: From Premise 2.1, if Dried Thai chilies are not a hotpot, then Dried Thai chilies are spicy.\nConclusion 3: Dried Thai chilies are spicy.\nAnswer: A. Yes.", "logic_premises": "[[(0→1), (2→3), (4→5)], [(0→1), (2→3), (4→5)], [(0→1), (2→3), (4→5)]]", "logic_conclusion": "[(6→7), (6→(7∧8)), (6→7)]", "correspondance": [{"0": "X is a bakery .", "1": "X is not spicy .", "2": "X is a cupcake .", "3": "X is a bakery .", "4": "X is a product of Baked by Melissa .", "5": "X is a cupcake .", "6": "X is a product of Baked by Melissa .", "7": "X is a bakery ."}, {"0": "X is Dried a Thai chile .", "1": "X is spicy or a bakery .", "2": "X is Dried a Thai chile .", "3": "X is not a product of Baked by Melissa .", "4": "X is a Dried Thai chile .", "5": "From Conclusion 1 , X is not a bakery .", "6": "X is Dried a Thai chile .", "7": "X is not a product of Baked by Melissa .", "8": "X is a bakery ."}, {"0": "X is dried a Thai chile .", "1": "X is spicy or a bakery .", "2": "X is dried a Thai chile .", "3": "X is not a hotpot .", "4": "Dried Thai chilies are not a hotpot .", "5": "Dried Thai chilies are spicy .", "6": "X is Dried a Thai chile .", "7": "X is spicy ."}], "errors": [[]], "entailments_dict": [{"5": ["2"], "3": ["0", "7"], "6": ["4"]}, {"6": ["0", "2", "4"], "3": ["7"]}, {"6": ["0", "2"]}], "predicted_steps": [true, false, false]}
{"text": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dried Thai chilies are cupcakes and a product of Baked by Melissa?", "id": "83", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: No bakery is spicy.\nPremise 1.2: All cupcakes are bakeries.\nPremise 1.3: All products of Baked by Melissa are cupcakes.\nConclusion 1: Products of Baked by Melissa are not spicy.\nPremise 2.1: Dried Thai chilies are spicy or a bakery.\nPremise 2.2: Dried Thai chilies are not a bakery.\nConclusion 2: Dried Thai chilies are spicy.\nPremise 3.1: Dried Thai chilies are spicy.\nPremise 3.2: All hotpots are spicy.\nConclusion 3: Dried Thai chilies are hotpots.\nPremise 4.1: Dried Thai chilies are hotpots.\nPremise 4.2: All hotpots are not cupcakes.\nConclusion 4: Dried Thai chilies are not cupcakes.\nPremise 5.1: Dried Thai chilies are not cupcakes.\nAnswer: B. No.\n\nNote: The reasoning steps 1, 2, 3, and 4 are based on the premises and conclusions from the passage. The conclusion of step 4 is the final answer.", "logic_premises": "[[(0→1), (2→3), (4→5)], [(0→1), (2→3)], [(0→1), (2→3)], [(0→1), (2→3)]]", "logic_conclusion": "[(6→7), (4→5), (4→5), (4→5)]", "correspondance": [{"0": "X is a bakery .", "1": "X is not spicy .", "2": "X is a cupcake .", "3": "X is a bakery .", "4": "X is a product of Baked by Melissa .", "5": "X is a cupcake .", "6": "X is a Product of Baked by Melissa .", "7": "X is not spicy ."}, {"0": "X is Dried a Thai chile .", "1": "X is spicy or a bakery .", "2": "X is Dried a Thai chile .", "3": "X is not a bakery .", "4": "X is Dried a Thai chile .", "5": "X is spicy ."}, {"0": "X is Dried a Thai chile .", "1": "X is spicy .", "2": "X is a hotpot .", "3": "X is spicy .", "4": "X is a Dried Thai chile .", "5": "X is a hotpot ."}, {"0": "X is a Dried Thai chile .", "1": "X is a hotpot .", "2": "X is a hotpot .", "3": "X is not a cupcake .", "4": "X is Dried a Thai chile .", "5": "X is not a cupcake ."}], "errors": [[]], "entailments_dict": [{"5": ["2"], "3": ["0"], "6": ["4"], "1": ["7"]}, {"4": ["0", "2"]}, {"4": ["0"]}, {"1": ["2"], "4": ["0"], "3": ["5"]}], "predicted_steps": [true, false, false, true]}
{"text": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service?", "id": "84", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\nPremise 1.2: All restaurants with a rating greater than", "logic_premises": "[]", "logic_conclusion": "[]", "correspondance": [], "errors": ["No steps found in reasoning.", []], "entailments_dict": [], "predicted_steps": []}
{"text": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Subway provides take-out service and does not receive many negative reviews?", "id": "85", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\nPremise 1.2: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\nConclusion 1: Subway has a rating greater than 9 or is popular among local residents, which means it does not receive many negative reviews.\n\nPremise 2.1: Some restaurants that do not provide take-out service receive many negative reviews.\nPremise 2.2: The passage does not provide information about Subway's take-out service.\nConclusion 2: We cannot determine if Subway provides take-out service or not.\n\nAnswer: C. Uncertain. We cannot determine if Subway provides take-out service and does not receive many negative reviews, as the passage does not provide enough information about Subway's take-out service.", "logic_premises": "[[((7→8)∪((9→a)∪(b→c))), (2→3)], [0, 1]]", "logic_conclusion": "[((4∧5)∨6), 2]", "correspondance": [{"0": "X is a restaurant with a rating greater than 9 .", "1": "X is listed in Yelp ’s 's recommendations .", "2": "the restaurant is listed in Yelp ’s 's recommendations .", "3": "the restaurant does not receive many negative reviews .", "4": "Subway has a rating greater than 9 .", "5": "a rating greater than 9 means that Subway does not receive many negative reviews .", "6": "Subway is popular among local residents that means Subway does not receive many negative reviews .", "7": "the restaurant is a restaurant with a rating greater than 9 .", "8": "the restaurant is listed in Yelp ’s 's recommendations .", "9": "Yelp’s recommendations is a restaurant with a rating greater than 9 .", "a": "Yelp’s recommendations is listed in Yelp ’s 's recommendations .", "b": "Subway is a restaurant with a rating greater than 9 .", "c": "Subway is listed in Yelp ’s 's recommendations ."}, {"0": "Some restaurants that do not provide take - out service receive many negative reviews .", "1": "The passage does not provide information about Subway 's 's take - out service .", "2": "We can not determine that Subway 's provides take - out service ."}], "errors": [[]], "entailments_dict": [{"8": ["2"]}, {}], "predicted_steps": [false, false]}
{"text": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Subway does not provide take-out service?", "id": "86", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\nPremise 1.2: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\nPremise 1.3: Some restaurants that do not provide take-out service receive many negative reviews.\nPremise 1.4: All restaurants that are popular among local residents have ratings greater than 9.\nPremise 1.5: Subway has a rating greater than 9 or is popular among local residents.\nConclusion 1: Subway does not receive many negative reviews.\nPremise 2.1: Some restaurants that do not provide take-out service receive many negative reviews.\nPremise 2.2: Subway does not receive many negative reviews.\nConclusion 2: Subway provides take-out service.\nPremise 3.1: Subway provides take-out service.\nAnswer: B. No.\n\nNote: The conclusion that Subway does not provide take-out service cannot be deduced from the premises. The premises only allow us to conclude that Subway does not receive many negative reviews, but it does not provide any information about Subway's take-out service.", "logic_premises": "[[(0→1), ((a→b)∪((c→d)∪(e→f))), 4, ((g→h)∪((i→j)∪(k→l))), (7∨8)], [0, 1]]", "logic_conclusion": "[9, 2]", "correspondance": [{"0": "the restaurant is listed in Yelp ’s 's recommendations .", "1": "the restaurant does not receive many negative reviews .", "2": "X is a restaurant with a rating greater than 9 .", "3": "X is listed in Yelp ’s 's recommendations .", "4": "Some restaurants that do not provide take - out service receive many negative reviews .", "5": "X is a restaurant that is popular among local a resident .", "6": "X has ratings greater than 9 .", "7": "Subway has a rating greater than 9 .", "8": "Subway is popular among local residents .", "9": "Subway does not receive many negative reviews .", "a": "the restaurant is a restaurant with a rating greater than 9 .", "b": "the restaurant is listed in Yelp ’s 's recommendations .", "c": "Yelp’s recommendations is a restaurant with a rating greater than 9 .", "d": "Yelp’s recommendations is listed in Yelp ’s 's recommendations .", "e": "Subway is a restaurant with a rating greater than 9 .", "f": "Subway is listed in Yelp ’s 's recommendations .", "g": "the restaurant is a restaurant that is popular among local a resident .", "h": "the restaurant has ratings greater than 9 .", "i": "Yelp’s recommendations is a restaurant that is popular among local a resident .", "j": "Yelp’s recommendations has ratings greater than 9 .", "k": "Subway is a restaurant that is popular among local a resident .", "l": "Subway has ratings greater than 9 ."}, {"0": "Some restaurants that do not provide take - out service receive many negative reviews .", "1": "Subway does not receive many negative reviews .", "2": "Subway provides take - out service ."}], "errors": [[]], "entailments_dict": [{"b": ["0"], "l": ["7"]}, {}], "predicted_steps": [false, false]}
{"text": "In superhero movies, the good guys always win. The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie. Good guys fight bad guys and vice versa. Sir Digby fights his nemesis. If a superhero movie is named after a character, that character is a good guy. The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby. If somebody wins a fight, the person they are fighting loses. If a superhero movie is named after a character, that character appears in the movie.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Sir Digby’s nemesis loses?", "id": "87", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: In superhero movies, the good guys always win.\nPremise 1.2: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\nConclusion 1: Sir Digby is a good guy.\nPremise 2.1: Good guys fight bad guys and vice versa.\nPremise 2.2: Sir Digby fights his nemesis.\nConclusion 2: Sir Digby's nemesis is a bad guy.\nPremise 3.1: If a superhero movie is named after a character, that character is a good guy.\nPremise 3.2: The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\nConclusion 3: Sir Digby is a good guy.\nPremise 4.1: If somebody wins a fight, the person they are fighting loses.\nPremise 4.2: Sir Digby is a good guy.\nPremise 4.3: Sir Digby fights his nemesis.\nPremise 4.4: Sir Digby's nemesis is a bad guy.\nConclusion 4: Sir Digby's nemesis loses.\nAnswer: A. Yes.\n\nNote: The reasoning step 3 is not necessary for the conclusion, but it is included to show that Sir Digby is a good guy, and his nemesis is a bad guy, which is consistent with the conclusion.", "logic_premises": "[[0, 1], [0, 1], [(((5∧6)→2)∪((7∧8)→2)), 3], [((6→7)∪((8→9)∪(a→b))), 2, 3, 4]]", "logic_conclusion": "[2, 2, 4, 5]", "correspondance": [{"0": "In superhero movies , the good guys always win .", "1": "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie .", "2": "Sir Digby Chicken Caesar is a good guy ."}, {"0": "Good guys fight bad guys and vice versa .", "1": "Sir Digby fights Sir Digby 's nemesis .", "2": "Sir Digby 's nemesis is a bad guy ."}, {"0": "X is a superhero movie", "1": "X is named after a character .", "2": "a character is a good guy .", "3": "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby .", "4": "Sir Digby is a good guy .", "5": "Sir Digby is a superhero movie", "6": "Sir Digby is named after a character .", "7": "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie", "8": "The Surprising Adventures of Sir Digby Chicken Caesar is named after a character ."}, {"0": "X wins a fight .", "1": "the person X are fighting loses .", "2": "Sir Digby is a good guy .", "3": "Sir Digby fights Sir Digby 's nemesis .", "4": "Sir Digby 's nemesis is a bad guy .", "5": "Sir Digby 's nemesis loses .", "6": "the person they are fighting wins a fight .", "7": "the person the person they are fighting are fighting loses .", "8": "Sir Digby wins a fight .", "9": "the person Sir Digby are fighting loses .", "a": "Sir Digbys nemesis wins a fight .", "b": "the person Sir Digbys nemesis are fighting loses ."}], "errors": [[]], "entailments_dict": [{}, {}, {}, {}], "predicted_steps": [false, false, false, false]}
{"text": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Walden contains knowledge?", "id": "88", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Books contain tons of knowledge.\nConclusion 1: \"Walden\" by Henry Thoreau contains knowledge.\nAnswer: A. Yes.\n\nNote: The passage states that books contain knowledge, and \"Walden\" is a book. Therefore, \"Walden\" contains knowledge. The other statements in the passage are not relevant to the question.", "logic_premises": "[[(3→4)]]", "logic_conclusion": "[2]", "correspondance": [{"0": "X is a Book .", "1": "X contains tons of knowledge .", "2": "\" Walden \" by Henry Thoreau contains knowledge .", "3": "\"Walden\" by Henry Thoreau is a Book .", "4": "\"Walden\" by Henry Thoreau contains tons of knowledge ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Harry is smarter than before?", "id": "89", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: When a person reads a book, that person gains knowledge.\nPremise 1.2: Harry read the book “Walden” by Henry Thoreau.\nConclusion 1: Harry gained knowledge.\nPremise 2.1: If a person gains knowledge, they become smarter.\nPremise 2.2: Harry gained knowledge.\nConclusion 2: Harry is smarter than before.\nAnswer: A. Yes.\n\nExplanation:\n\n1. Harry read a book, which means he falls under the category of \"a person\" in the first premise.\n2. Therefore, Harry gained knowledge from reading the book.\n3. According to the second premise, gaining knowledge leads to becoming smarter.\n4. Hence, Harry is smarter than before.", "logic_premises": "[[(0→1), 2], [((5∧6)→7), 3]]", "logic_conclusion": "[3, 4]", "correspondance": [{"0": "a person reads a book .", "1": "a person gains knowledge .", "2": "Harry read the book “ Walden ” by Henry Thoreau .", "3": "Harry gained knowledge ."}, {"0": "X is a person", "1": "X gains knowledge .", "2": "X become smarter .", "3": "Harry gained knowledge .", "4": "Harry is smarter than before .", "5": "Harry is a person", "6": "Harry gains knowledge .", "7": "Harry become smarter ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A person who is smarter has gained knowledge?", "id": "90", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: When a person reads a book, that person gains knowledge.\nPremise 1.2: Harry read the book “Walden” by Henry Thoreau.\nConclusion 1: Harry gained knowledge.\nPremise 2.1: If a person gains knowledge, they become smarter.\nPremise 2.2: Harry gained knowledge.\nConclusion 2: Harry is smarter.\nPremise 3.1: A person who is smarter has gained knowledge.\nPremise 3.2: Harry is smarter.\nAnswer: A. Yes.\n\nNote: The answer is A because the premises support that Harry gained knowledge and became smarter, and the question asks if it is true that a person who is smarter has gained knowledge, not if a person who is smarter will always gain knowledge.", "logic_premises": "[[(0→1), 2], [((5∧6)→7), 3]]", "logic_conclusion": "[3, 4]", "correspondance": [{"0": "a person reads a book .", "1": "a person gains knowledge .", "2": "Harry read the book “ Walden ” by Henry Thoreau .", "3": "Harry gained knowledge ."}, {"0": "X is a person", "1": "X gains knowledge .", "2": "X become smarter .", "3": "Harry gained knowledge .", "4": "Harry is smarter .", "5": "Harry is a person", "6": "Harry gains knowledge .", "7": "Harry become smarter ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Machine translation is a language generation task?", "id": "91", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nPremise 1.2: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nPremise 2.1: Machine translation is a natural language processing task.\nPremise 2.2: The output of machine translation is a text sequence.\nConclusion 1: Machine translation is a language generation task.\nPremise 3.1: Machine translation is a language generation task.\nAnswer: A. Yes.\n\nThe answer is A, Yes, because machine translation is a natural language processing task, and the output of machine translation is a text sequence, which, according to the premises, means that machine translation is a language generation task.", "logic_premises": "[[(0⊻1), (((8∧9)→a)∪((b∧c)→d)), 5, 6]]", "logic_conclusion": "[7]", "correspondance": [{"0": "Natural language processing tasks can be categorized as language generation task .", "1": "Natural language processing tasks can be categorized as language understanding task .", "2": "X is a natural language processing task", "3": "the output of X is a text sequence .", "4": "X is a language generation task .", "5": "Machine translation is a natural language processing task .", "6": "The output of machine translation is a text sequence .", "7": "Machine translation is a language generation task .", "8": "The output of machine translation is a natural language processing task", "9": "the output of The output of machine translation is a text sequence .", "a": "The output of machine translation is a language generation task .", "b": "the output of a natural language processing task is a natural language processing task", "c": "the output of the output of a natural language processing task is a text sequence .", "d": "the output of a natural language processing task is a language generation task ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Machine translation is a language understanding task?", "id": "92", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nPremise 1.2: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nPremise 2.1: Machine translation is a natural language processing task.\nPremise 2.2: The output of machine translation is a text sequence.\nConclusion 1: Machine translation is a language generation task. (From Premise 1.2, 2.1, 2.2)\nPremise 3.1: Language generation tasks are not language understanding tasks. (From Premise 1.1)\nConclusion 2: Machine translation is not a language understanding task. (From Conclusion 1, Premise 3.1)\nAnswer: B. No.", "logic_premises": "[[(0⊻1), (((8∧9)→a)∪((b∧c)→d)), 5, 6], [(0→1)]]", "logic_conclusion": "[7, 2]", "correspondance": [{"0": "Natural language processing tasks can be categorized as language generation task .", "1": "Natural language processing tasks can be categorized as language understanding task .", "2": "X is a natural language processing task", "3": "the output of X is a text sequence .", "4": "X is a language generation task .", "5": "Machine translation is a natural language processing task .", "6": "The output of machine translation is a text sequence .", "7": "Machine translation is a language generation task . .", "8": "The output of machine translation is a natural language processing task", "9": "the output of The output of machine translation is a text sequence .", "a": "The output of machine translation is a language generation task .", "b": "the output of a natural language processing task is a natural language processing task", "c": "the output of the output of a natural language processing task is a text sequence .", "d": "the output of a natural language processing task is a language generation task ."}, {"0": "X is Language generation a task .", "1": "X is not language understanding tasks . .", "2": "Machine translation is not a language understanding task . ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom will rent an apartment in The Olive Garden?", "id": "93", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Pets are allowed in some managed buildings.\nPremise 1.2: The Olive Garden is a managed building.\nConclusion 1: Pets are allowed in The Olive Garden.\nPremise 2.1: Cats are pets.\nPremise 2.2: Fluffy is Tom's cat.\nConclusion 2: Tom is allowed to move in with Fluffy in The Olive Garden.\nPremise 3.1: The security deposit in a managed building is equal to one month's rent or more.\nPremise 3.2: The monthly rent at the Olive Garden is $2000.\nConclusion 3: The security deposit at the Olive Garden is more than $150", "logic_premises": "[[0, 1], [((4→5)∪((6→7)∪((8→9)∪(a→b)))), 2], [0, 1]]", "logic_conclusion": "[2, 3, 2]", "correspondance": [{"0": "Pets are allowed in some managed buildings .", "1": "The Olive Garden is a managed building .", "2": "Pets are allowed in The Olive Garden ."}, {"0": "X is a Cat .", "1": "X is a pet .", "2": "Fluffy is Tom 's 's cat .", "3": "Tom 's is allowed to move in with Fluffy in The Olive Garden .", "4": "Toms cat is a Cat .", "5": "Toms cat is a pet .", "6": "The Olive Garden is a Cat .", "7": "The Olive Garden is a pet .", "8": "Fluffy is a Cat .", "9": "Fluffy is a pet .", "a": "Tom is a Cat .", "b": "Tom is a pet ."}, {"0": "The security deposit in a managed building is equal to one month 's rent or more .", "1": "The monthly rent at the Olive Garden is $ 2000 .", "2": "The security deposit at the Olive Garden is more than $ 150"}], "errors": [[]], "entailments_dict": [{}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom is allowed to move in an apartment in The Olive Garden with Fluffy?", "id": "94", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Pets are allowed in some managed buildings.\nPremise 1.2: The Olive Garden is a managed building.\nConclusion 1: Pets are allowed in The Olive Garden.\nPremise 2.1: Cats are pets.\nPremise 2.2: Fluffy is Tom's cat.\nConclusion 2: Fluffy is allowed in The Olive Garden.\nPremise 3.1: The Olive Garden allows pets, and Fluffy is a pet.\nPremise 3.2: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy.\nPremise 3.3: The monthly rent at the Olive Garden is $2000, and Tom requires the security deposit to be no more than $1500.\nConclusion 3: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nAnswer: A. Yes.\n\nExplanation:\n\n* The Olive Garden is a managed building, and pets are allowed in some managed buildings. Therefore, pets are allowed in The Olive Garden.\n* Fluffy is Tom's cat, and cats are pets. Therefore, Fluffy is allowed in The Olive Garden.\n* Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy. Since Fluffy is allowed in The Olive Garden, Tom is allowed to move in an apartment in The Olive Garden with Fluffy.", "logic_premises": "[[0, 1], [((4→5)∪((6→7)∪(8→9))), 2], [(0∧1), 2, ((3∧(8→(9∨6)))∪((3∧(a→(b∨6)))∪((3∧(c→(d∨6)))∪((3∧(e→(f∨6)))∪(3∧(g→(h∨6)))))))]]", "logic_conclusion": "[2, 3, 7]", "correspondance": [{"0": "Pets are allowed in some managed buildings .", "1": "The Olive Garden is a managed building .", "2": "Pets are allowed in The Olive Garden ."}, {"0": "X is a Cat .", "1": "X is a pet .", "2": "Fluffy is Tom 's cat .", "3": "Fluffy is allowed in The Olive Garden .", "4": "Toms cat is a Cat .", "5": "Toms cat is a pet .", "6": "The Olive Garden is a Cat .", "7": "The Olive Garden is a pet .", "8": "Fluffy is a Cat .", "9": "Fluffy is a pet ."}, {"0": "the Olive Garden allows pets .", "1": "Fluffy is a pet .", "2": "Tom will rent an apartment in a managed building that Tom is allowed to move in with Fluffy .", "3": "The monthly rent at the Olive Garden is $ 2000 .", "4": "X is a more than $ 1500 .", "5": "Is not X .", "6": "Tom does not require the security deposit .", "7": "Tom is allowed to move in an apartment in the Olive Garden with Fluffy .", "8": "Tom is a more than $ 1500 .", "9": "Is not Tom .", "a": "The monthly rent at the Olive Garden is a more than $ 1500 .", "b": "Is not The monthly rent at the Olive Garden .", "c": "The Olive Garden is a more than $ 1500 .", "d": "Is not The Olive Garden .", "e": "the security deposit is a more than $ 1500 .", "f": "Is not the security deposit .", "g": "Fluffy is a more than $ 1500 .", "h": "Is not Fluffy ."}], "errors": [[]], "entailments_dict": [{}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The security deposit at the Olive Garden is either $2000 or more?", "id": "95", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more.\nPremise 1.2: The monthly rent at the Olive Garden is $2000.\nConclusion 1: The security deposit at the Olive Garden is $2000 or more.\nPremise 2.1: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nPremise 2.2: $2000 is more than $1500.\nConclusion 2: Tom will not rent an apartment at the Olive Garden.\nSince the passage does not provide information about the security deposit at the Olive Garden, we cannot conclude if the security deposit is $2000 or more.\nAnswer: C. Uncertain.", "logic_premises": "[[], [((5→(1∨6))∪((7→(1∨8))∪((9→(1∨a))∪(b→(1∨c))))), 3]]", "logic_conclusion": "['-1', 4]", "correspondance": [{}, {"0": "X is a more than $ 1500 .", "1": "Tom will not rent an apartment in a managed building that Tom is allowed to move in with Fluffy .", "2": "Tom will not rent an apartment in a managed building that the security deposit is X .", "3": "$ 2000 is more than $ 1500 .", "4": "Tom will not rent an apartment at the Olive Garden .", "5": "Tom is a more than $ 1500 .", "6": "Tom will not rent an apartment in a managed building that the security deposit is Tom .", "7": "the security deposit is a more than $ 1500 .", "8": "Tom will not rent an apartment in a managed building that the security deposit is the security deposit .", "9": "the Olive Garden is a more than $ 1500 .", "a": "Tom will not rent an apartment in a managed building that the security deposit is the Olive Garden .", "b": "Fluffy is a more than $ 1500 .", "c": "Tom will not rent an apartment in a managed building that the security deposit is Fluffy ."}], "errors": ["Logic Transform Error -  Step n°: 0 The given 'sentence' contains more than one sentence. A ConstituentTree object can process only one sentence at a time.", ["Entailments Error -  Step n°: 0 'str' object has no attribute 'get_variables_implications'"]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Koalas love to sleep?", "id": "96", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If animals are loved by tourists, then they are Max's favorite animals.\nPremise 1.2: All animals from Australia are loved by tourists.\nConclusion 1: All animals from Australia are Max's favorite animals.\nPremise 2.1: All quokka are animals from Australia.\nConclusion 2: All quokka are Max's favorite animals.\nPremise 3.1: All of Max's favorite animals love to sleep.\nConclusion 3: All quokka love to sleep.\nPremise 4.1: If a koala is very fluffy, then the koala is not a quokka.\nPremise 4.2: Koalas are very fluffy.\nConclusion 4: Koalas are not quokka.\nPremise 5.1: Koalas are not quokka.\nPremise 5.2: All quokka love to sleep.\nConclusion 5: Koalas may or may not love to sleep, but it is not explicitly stated.\nAnswer: C. Uncertain.\n\nNote: The answer is uncertain because the passage does not explicitly state that koalas love to sleep, and it also states that koalas are not quokkas, which are known to love to sleep.", "logic_premises": "[[(0→1), ((6→7)∪(8→9))], [(0→1)], [(0→1)], [((0∧1)→2), (3→4)], [(0→1), (2→3)]]", "logic_conclusion": "[((a→b)∪(c→d)), (2→3), (2→3), (5→6), ((4→(5∨6))∧7)]", "correspondance": [{"0": "animals are loved by tourists .", "1": "animals are Max 's 's favorite animals .", "2": "X is an animal from Australia .", "3": "X is loved by tourists .", "4": "X is an animal from Australia .", "5": "X is Max 's 's favorite animals .", "6": "Maxs favorite animals is an animal from Australia .", "7": "Maxs favorite animals is loved by tourists .", "8": "Australia is an animal from Australia .", "9": "Australia is loved by tourists .", "a": "Maxs favorite animals is an animal from Australia .", "b": "Maxs favorite animals is Max 's 's favorite animals .", "c": "Australia is an animal from Australia .", "d": "Australia is Max 's 's favorite animals ."}, {"0": "X is a quokka .", "1": "X is an animal from Australia .", "2": "X is a quokka .", "3": "X is Max 's favorite animals ."}, {"0": "X is of a Max 's favorite animals .", "1": "X loves to sleeps .", "2": "X is a quokka .", "3": "X loves to sleeps ."}, {"0": "X is a koala", "1": "X is very fluffy .", "2": "X is not a quokka .", "3": "X is a Koala .", "4": "X is very fluffy .", "5": "X is a Koala .", "6": "X is not quokka ."}, {"0": "X is a koala .", "1": "X is not quokka .", "2": "X is a quokka .", "3": "X loves to sleeps .", "4": "X is a koala .", "5": "X may .", "6": "X love to sleep .", "7": "it is not explicitly stated ."}], "errors": [[]], "entailments_dict": [{"a": ["6"], "c": ["8"]}, {"2": ["0"]}, {"1": ["3"]}, {"4": ["1"], "5": ["3"], "2": ["6"]}, {"4": ["0"]}], "predicted_steps": [false, false, false, false, false]}
{"text": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Koalas love to sleep and are quokka?", "id": "97", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If animals are loved by tourists, then they are Max's favorite animals.\nPremise 1.2: All animals from Australia are loved by tourists.\nPremise 1.3: All quokka are animals from Australia.\nConclusion 1: All quokka are Max's favorite animals.\nPremise 2.1: All of Max's favorite animals love to sleep.\nPremise 2.2: All quokka are Max's favorite animals.\nConclusion 2: Quokka love to sleep.\nPremise 3.1: If a koala is very fluffy, then the koala is not a quokka.\nPremise 3.2: All of Max's favorite animals are very fluffy.\nPremise 3.3: Koalas are very fluffy.\nConclusion 3: Koalas are not quokka.\nPremise 4.1: Koalas are not quokka.\nPremise 4.2: Quokka love to sleep.\nAnswer: B. No.", "logic_premises": "[[(0→1), ((8→9)∪(a→b)), ((c→d)∪(e→f))], [((5→6)∪(7→8)), ((9→a)∪(b→c))], [((0∧1)→2), (3→4), (5→6)]]", "logic_conclusion": "[((g→h)∪(i→j)), 4, (7→8)]", "correspondance": [{"0": "animals are loved by tourists .", "1": "animals are Max 's 's favorite animals .", "2": "X is an animal from Australia .", "3": "X is loved by tourists .", "4": "X is a quokka .", "5": "X is an animal from Australia .", "6": "X is a quokka .", "7": "X is Max 's 's favorite animals .", "8": "Maxs favorite animals is an animal from Australia .", "9": "Maxs favorite animals is loved by tourists .", "a": "Australia is an animal from Australia .", "b": "Australia is loved by tourists .", "c": "Maxs favorite animals is a quokka .", "d": "Maxs favorite animals is an animal from Australia .", "e": "Australia is a quokka .", "f": "Australia is an animal from Australia .", "g": "Maxs favorite animals is a quokka .", "h": "Maxs favorite animals is Max 's 's favorite animals .", "i": "Australia is a quokka .", "j": "Australia is Max 's 's favorite animals ."}, {"0": "X is of a Max 's 's favorite animals .", "1": "X loves to sleeps .", "2": "X is a quokka .", "3": "X is Max 's 's favorite animals .", "4": "Quokka love to sleep .", "5": "Quokka is of a Max 's 's favorite animals .", "6": "Quokka loves to sleeps .", "7": "Maxs favorite animals is of a Max 's 's favorite animals .", "8": "Maxs favorite animals loves to sleeps .", "9": "Quokka is a quokka .", "a": "Quokka is Max 's 's favorite animals .", "b": "Maxs favorite animals is a quokka .", "c": "Maxs favorite animals is Max 's 's favorite animals ."}, {"0": "X is a koala", "1": "X is very fluffy .", "2": "X is not a quokka .", "3": "X is of a Max 's favorite animals .", "4": "X is very fluffy .", "5": "X is a Koala .", "6": "X is very fluffy .", "7": "X is a Koala .", "8": "X is not quokka ."}], "errors": [[]], "entailments_dict": [{"f": ["a"], "d": ["8"], "g": ["c"], "i": ["e"]}, {}, {"4": ["1"], "6": ["1"], "7": ["5"], "2": ["8"]}], "predicted_steps": [false, false, false]}
{"text": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If a koala is a quokka, then the koala either loves to sleep or is very fluffy?", "id": "98", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If animals are loved by tourists, then they are Max's favorite animals.\nPremise 1.2: All animals from Australia are loved by tourists.\nPremise 1.3: All quokka are animals from Australia.\nConclusion 1: All quokka are Max's favorite animals.\nPremise 2.1: All of Max's favorite animals are very fluffy.\nPremise 2.2: All of Max's favorite animals love to sleep.\nPremise 3.1: If a koala is very fluffy, then the koala is not a quokka.\nPremise 3.2: Quokkas are a subset of Max's favorite animals, which are very fluffy.\nPremise 3.3: Koalas are not a subset of Max's favorite animals, as they are not quokkas.\nConclusion 2: Koalas are not Max's favorite animals, and thus not necessarily fluffy or loving to sleep.\nPremise 4.1: A koala is a quokka.\nPremise 4.2: Conclusion 1 states that all quokkas are Max's favorite animals.\nPremise 4.3: Conclusion 2 states that koalas are not Max's favorite animals.\nConclusion 3: The premises contradict each other, so it is uncertain if a koala that is a quokka would love to sleep or be fluffy.\nAnswer: C. Uncertain.", "logic_premises": "[[(0→1), ((8→9)∪(a→b)), ((c→d)∪(e→f))], [], [(0→1), (2→3), (4→5)]]", "logic_conclusion": "[((g→h)∪(i→j)), '-1', ((6→7)∧(8∨9))]", "correspondance": [{"0": "animals are loved by tourists .", "1": "animals are Max 's 's favorite animals .", "2": "X is an animal from Australia .", "3": "X is loved by tourists .", "4": "X is a quokka .", "5": "X is an animal from Australia .", "6": "X is a quokka .", "7": "X is Max 's 's favorite animals .", "8": "Maxs favorite animals is an animal from Australia .", "9": "Maxs favorite animals is loved by tourists .", "a": "Australia is an animal from Australia .", "b": "Australia is loved by tourists .", "c": "Maxs favorite animals is a quokka .", "d": "Maxs favorite animals is an animal from Australia .", "e": "Australia is a quokka .", "f": "Australia is an animal from Australia .", "g": "Maxs favorite animals is a quokka .", "h": "Maxs favorite animals is Max 's 's favorite animals .", "i": "Australia is a quokka .", "j": "Australia is Max 's 's favorite animals ."}, {"0": "X is of a Max 's 's favorite animals .", "1": "X is very fluffy .", "2": "X is of a Max 's 's favorite animals .", "3": "X loves to sleeps .", "4": "X is a koala", "5": "X is very fluffy .", "6": "X is not a quokka .", "7": "X is a Quokka .", "8": "X is a subset of Max 's 's favorite animals .", "9": "Max 's 's favorite animals are very fluffy ."}, {"0": "X is A koala", "1": "X is a quokka .", "2": "X is a quokka .", "3": "Conclusion 1 states that X is Max 's 's favorite animals .", "4": "Conclusion 2 states that X is a koala .", "5": "Conclusion 2 states that X is not Max 's 's favorite animals .", "6": "X is an other .", "7": "The premises contradicts X .", "8": "it is uncertain that a koala that is a quokka would love to sleep .", "9": "it is uncertain that a koala that is a quokka would be fluffy ."}], "errors": ["Logic Transform Error -  Step n°: 1 list index out of range", ["Entailments Error -  Step n°: 1 'str' object has no attribute 'get_variables_implications'"]], "entailments_dict": [{"f": ["a"], "d": ["8"], "g": ["c"], "i": ["e"]}, {}, {"1": ["2"]}], "predicted_steps": [false, false, false]}
{"text": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Harry is a CEO?", "id": "99", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: A man is either kind or evil.\nPremise 1.2: Harry is a gentleman.\nPremise 2.1: All gentlemen are handsome.\nPremise 2.2: All CEOs are gentlemen.\nPremise 3.1: Harry is a gentleman, so Harry is handsome.\nPremise 3.2: No ugly person is handsome.\nPremise 3.3: All evil people are ugly.\nConclusion 1: Harry is not evil.\nPremise 4.1: Harry is not evil, so Harry is kind.\nPremise 5.1: All CEOs are gentlemen.\nPremise 5.2: Harry is a gentleman.\nConclusion 2: Harry is a CEO.\nPremise 6.1: Harry is a CEO.\nAnswer: A. Yes.\n\nNote: The premises are logically deduced from the passage, and the conclusion is drawn from the premises. The answer is then selected based on the final conclusion.", "logic_premises": "[[(0⊻1), 2, (e→f), (g→h), (7∧8), (i→j), (k→l)], [(0∧1), (6→7), 4]]", "logic_conclusion": "[d, 5]", "correspondance": [{"0": "A man is kind .", "1": "A man is evil .", "2": "Harry is a gentleman .", "3": "X is a gentleman .", "4": "X is handsome .", "5": "X is a CEO .", "6": "X is a gentleman .", "7": "Harry is a gentleman .", "8": "Harry is handsome .", "9": "X is an ugly person .", "a": "X is not handsome .", "b": "X is an evil person .", "c": "X is ugly .", "d": "Harry is not evil .", "e": "Harry is a gentleman .", "f": "Harry is handsome .", "g": "Harry is a CEO .", "h": "Harry is a gentleman .", "i": "Harry is an ugly person .", "j": "Harry is not handsome .", "k": "Harry is an evil person .", "l": "Harry is ugly ."}, {"0": "Harry is not evil .", "1": "Harry is kind .", "2": "X is a CEO .", "3": "X is a gentleman .", "4": "Harry is a gentleman .", "5": "Harry is a CEO .", "6": "Harry is a CEO .", "7": "Harry is a gentleman ."}], "errors": [[]], "entailments_dict": [{"2": ["7", "e"], "f": ["8", "(¬j)"], "h": ["e", "2", "7"], "7": ["e", "2"], "j": ["(¬8)", "(¬f)"], "8": ["(¬j)"]}, {"7": ["4"], "5": ["6"]}], "predicted_steps": [false, false]}
{"text": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Harry is kind or a CEO?", "id": "100", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: A man is either kind or evil.\nPremise 1.2: All evil people are ugly.\nPremise 1.3: All gentlemen are handsome.\nPremise 1.4: All CEOs are gentlemen.\nPremise 1.5: Harry is a gentleman.\nConclusion 1: Harry is handsome.\nPremise 2.1: Harry is handsome.\nPremise 2.2: No ugly person is handsome.\nConclusion 2: Harry is not ugly.\nPremise 3.1: Harry is not ugly.\nPremise 3.2: A man is either kind or evil.\nConclusion 3: Harry is kind.\nPremise 4.1: Harry is a gentleman.\nPremise 4.2: All CEOs are gentlemen.\nConclusion 4: Harry is a CEO.\nPremise 5.1: Harry is kind.\nPremise 5.2: Harry is a CEO.\nConclusion 5: Harry is kind or a CEO.\nAnswer: A. Yes.\n\nNote: The conclusion is based on the premises that Harry is kind and Harry is a CEO, which are both logically possible based on the given passage. However, it is also possible that Harry is not evil but not kind either, or that Harry is a CEO but not kind. The answer is \"Yes\" because the passage does not provide any information that contradicts the possibility that Harry is kind or a CEO.", "logic_premises": "[[(0⊻1), (a→b), (c→d), (e→f), 8], [0, (4→5)], [0, (1⊻2)], [0, (4→5)], [0, 1]]", "logic_conclusion": "[9, 3, 3, 3, (2∨3)]", "correspondance": [{"0": "A man is kind .", "1": "A man is evil .", "2": "X is an evil person .", "3": "X is ugly .", "4": "X is a gentleman .", "5": "X is handsome .", "6": "X is a CEO .", "7": "X is a gentleman .", "8": "Harry is a gentleman .", "9": "Harry is handsome .", "a": "Harry is an evil person .", "b": "Harry is ugly .", "c": "Harry is a gentleman .", "d": "Harry is handsome .", "e": "Harry is a CEO .", "f": "Harry is a gentleman ."}, {"0": "Harry is handsome .", "1": "X is an ugly person .", "2": "X is not handsome .", "3": "Harry is not ugly .", "4": "Harry is an ugly person .", "5": "Harry is not handsome ."}, {"0": "Harry is not ugly .", "1": "A man is kind .", "2": "A man is evil .", "3": "Harry is kind ."}, {"0": "Harry is a gentleman .", "1": "X is a CEO .", "2": "X is a gentleman .", "3": "Harry is a CEO .", "4": "Harry is a CEO .", "5": "Harry is a gentleman ."}, {"0": "Harry is kind .", "1": "Harry is a CEO .", "2": "Harry is kind .", "3": "Harry is a CEO ."}], "errors": [[]], "entailments_dict": [{"f": ["8", "c"], "8": ["c"], "d": ["9"]}, {"0": ["(¬5)"], "5": ["(¬0)"]}, {}, {"5": ["0"], "3": ["4"]}, {"3": ["1"], "2": ["0"], "0": ["2"], "1": ["3"]}], "predicted_steps": [true, false, false, false, true]}
{"text": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO?", "id": "101", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: A man is either kind or evil.\nPremise 1.2: Harry is a gentleman.\nPremise 1.3: All CEOs are gentlemen.\nPremise 1.4: Harry is a CEO.\nConclusion 1: Harry is a kind person and an CEO.\nPremise 2.1: All evil people are ugly.\nPremise 2.2: No ugly person is handsome.\nPremise 2.3: All gentlemen are handsome.\nConclusion 2: Harry is not evil and not ugly.\nPremise 3.1: Harry is not evil and not ugly.\nPremise 3.2: Harry is kind and an CEO.\nConclusion 3: Harry is neither kind nor a CEO is not a valid conclusion.\nAnswer: B. No.\n\nExplanation:\nThe passage states that Harry is a gentleman, and all CEOs are gentlemen. It also states that Harry is a CEO. Therefore, Harry is both a gentleman and a CEO. The passage also states that all gentlemen are handsome, and Harry is a gentleman, so Harry is handsome. The passage also states that no ugly person is handsome, and Harry is handsome, so Harry is not ugly. The passage states that all evil people are ugly, so Harry is not evil. Since Harry is not evil, the premise \"If Harry is either both evil and ugly, or neither evil nor ugly\" is not true. Therefore, the conclusion \"then Harry is neither kind nor a CEO\" cannot be drawn.", "logic_premises": "[[(0⊻1), 2, (8→9), 5], [(8→9), (a→b), (c→d)], [(0∧1), 2]]", "logic_conclusion": "[(6∧7), (6∧7), 3]", "correspondance": [{"0": "A man is kind .", "1": "A man is evil .", "2": "Harry is a gentleman .", "3": "X is a CEO .", "4": "X is a gentleman .", "5": "Harry is a CEO .", "6": "Harry is a kind person .", "7": "Harry is an CEO .", "8": "Harry is a CEO .", "9": "Harry is a gentleman ."}, {"0": "X is an evil person .", "1": "X is ugly .", "2": "X is an ugly person .", "3": "X is not handsome .", "4": "X is a gentleman .", "5": "X is handsome .", "6": "Harry is not evil .", "7": "Harry is not ugly .", "8": "Harry is an evil person .", "9": "Harry is ugly .", "a": "Harry is an ugly person .", "b": "Harry is not handsome .", "c": "Harry is a gentleman .", "d": "Harry is handsome ."}, {"0": "Harry is not evil .", "1": "Harry is not ugly .", "2": "Harry is kind and an CEO .", "3": "Harry is neither kind nor a CEO is not a valid conclusion ."}], "errors": [[]], "entailments_dict": [{"5": ["8"], "9": ["2"]}, {"d": ["(¬b)"], "b": ["(¬d)"], "7": ["(¬9)"]}, {}], "predicted_steps": [false, false, false]}
{"text": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Luke spends a lot of time hanging out and playing with his siblings?", "id": "102", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nPremise 1.2: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nConclusion 1: If Luke is a twin or triplet, then he spends a lot of time hanging out with and playing with his siblings.\nPremise 2.1: If people have siblings who are the same age, then they are twins or triplets.\nPremise 2.2: Luke spends a lot of time hanging out with and playing with his siblings.\nConclusion 2: Luke has siblings who are the same age.\nPremise 3.1: Luke has siblings who are the same age.\nConclusion 3: Luke is a twin or triplet.\nPremise 4.1: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nPremise 4.2: Luke often did not live at home regularly.\nConclusion 4: Luke spends a lot of time hanging out with and playing with his siblings.\nPremise 5.1: Luke spends a lot of time hanging out with and playing with his siblings.\nAnswer: A. Yes.\n\nNote: The answer is A because Luke is a twin or triplet, and therefore, he spends a lot of time hanging out with and playing with his siblings. The other premises and conclusions are included to show the logical reasoning that leads to the answer.", "logic_premises": "[[((a∨b)→c), ((3∧4)⊻(5∧6))], [((5→(1∨2))∪(6→(1∨2))), 3], [0], [(4→5), 2]]", "logic_conclusion": "[((7∨8)→9), 4, (1∨2), 3]", "correspondance": [{"0": "X are twins .", "1": "X are triplets .", "2": "X spend a lot of time hanging out with and playing with X 's siblings .", "3": "Luke is a twin or triplet .", "4": "Luke develops strong bonds with Luke 's family members .", "5": "Luke is not a twin or triplet .", "6": "Luke does not develop strong bonds with Luke 's family members .", "7": "Luke is a twin .", "8": "Luke is a triplet .", "9": "Luke spends a lot of time hanging out with and playing with Luke 's siblings .", "a": "Luke are twins .", "b": "Luke are triplets .", "c": "Luke spend a lot of time hanging out with and playing with Luke 's siblings ."}, {"0": "X have siblings who are the same age .", "1": "they are twins .", "2": "they are triplets .", "3": "Luke spends a lot of time hanging out with and playing with Luke 's siblings .", "4": "Luke has siblings who are the same age .", "5": "Luke have siblings who are the same age .", "6": "the same age have siblings who are the same age ."}, {"0": "Luke has siblings who are the same age .", "1": "Luke is a twin .", "2": "Luke is a triplet ."}, {"0": "X spend a lot of time hanging out with and playing with people 's siblings .", "1": "X often did not live at home regularly .", "2": "Luke often did not live at home regularly .", "3": "Luke spends a lot of time hanging out with and playing with Luke 's siblings .", "4": "Luke spend a lot of time hanging out with and playing with people 's siblings .", "5": "Luke often did not live at home regularly ."}], "errors": [[]], "entailments_dict": [{"7": ["a"], "8": ["b"], "c": ["9"], "3": ["(¬5)"], "4": ["(¬6)"]}, {}, {}, {"5": ["2"]}], "predicted_steps": [true, false, false, false]}
{"text": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Luke complains often about annoying siblings?", "id": "103", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nPremise 1.2: Luke spends a lot of time hanging out with and playing with his siblings.\nConclusion 1: Luke often did not live at home regularly.\nPremise 2.1: If people complain often about annoying siblings, then they have siblings who are the same age.\nPremise 2.2: Luke does not live at home regularly.\nConclusion 2: Luke does not complain often about annoying siblings.\nPremise 3.1: Luke does not complain often about annoying siblings.\nAnswer: B. No.\n\nNote: The conclusion that Luke does not complain often about annoying siblings is based on the premise that people who complain often about annoying siblings live at home regularly, and the conclusion that Luke often did not live at home regularly. Therefore, it is unlikely that Luke complains often about annoying siblings.", "logic_premises": "[[(4→5), 2], [((4→5)∪(6→7)), 2]]", "logic_conclusion": "[3, 3]", "correspondance": [{"0": "X spend a lot of time hanging out with and playing with people 's siblings .", "1": "X often did not live at home regularly .", "2": "Luke spends a lot of time hanging out with and playing with Luke 's siblings .", "3": "Luke often did not live at home regularly .", "4": "Luke spend a lot of time hanging out with and playing with people 's siblings .", "5": "Luke often did not live at home regularly ."}, {"0": "X complain often about annoying siblings .", "1": "X have siblings who are the same age .", "2": "Luke does not live at home regularly .", "3": "Luke does not complain often about annoying siblings .", "4": "Luke complain often about annoying siblings .", "5": "Luke have siblings who are the same age .", "6": "the same age complain often about annoying siblings .", "7": "the same age have siblings who are the same age ."}], "errors": [[]], "entailments_dict": [{"5": ["3"]}, {"(¬3)": ["4"]}], "predicted_steps": [false, false]}
{"text": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Luke is neither a twin nor triplet nor complains often about annoying siblings?", "id": "104", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nPremise 1.2: If people have siblings who are the same age, then they are twins or triplets.\nPremise 1.3: If people complain often about annoying siblings, then they have siblings who are the same age.\nPremise 2.1: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nPremise 2.2: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nPremise 3.1: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nConclusion 1: Luke is a twin or triplet if and only if he spends a lot of time hanging out with and playing with his siblings.\nConclusion 2: Luke spends a lot of time hanging out with and playing with his siblings if and only if he did not live at home regularly.\nConclusion 3: Luke did not live at home regularly if and only if he does not develop strong bonds with his family members.\nConclusion 4: Luke is not a twin or triplet nor complains often about annoying siblings if and only if he does not develop strong bonds with his family members.\nAnswer: A. Yes.", "logic_premises": "[[(((h∨i)→j)∪((k∨l)→m)), ((n→(o∨p))∪(q→(r∨s))), ((t→u)∪(v→w)), ((x→y)∪(z→A)), ((B→C)∪(D→E)), ((c∧d)⊻(e∧f))]]", "logic_conclusion": "[g]", "correspondance": [{"0": "X are twins .", "1": "X are triplets .", "2": "X spend a lot of time hanging out with and playing with X 's siblings .", "3": "X have siblings who are the same age .", "4": "X are twins .", "5": "X are triplets .", "6": "X complain often about annoying siblings .", "7": "X have siblings who are the same age .", "8": "X do not live at home regularly .", "9": "X do not develop strong bonds with X 's family members .", "a": "X spend a lot of time hanging out with and playing with people 's siblings .", "b": "X often did not live at home regularly .", "c": "Luke is a twin or triplet .", "d": "Luke develops strong bonds with Luke 's family members .", "e": "Luke is not a twin or triplet .", "f": "Luke does not develop strong bonds with Luke 's family members .", "g": "Luke is a twin . Luke is a triplet that Luke spends a lot of time hanging out with and playing with Luke 's siblings .", "h": "Luke are twins .", "i": "Luke are triplets .", "j": "Luke spend a lot of time hanging out with and playing with Luke 's siblings .", "k": "the same age are twins .", "l": "the same age are triplets .", "m": "the same age spend a lot of time hanging out with and playing with the same age 's siblings .", "n": "Luke have siblings who are the same age .", "o": "Luke are twins .", "p": "Luke are triplets .", "q": "the same age have siblings who are the same age .", "r": "the same age are twins .", "s": "the same age are triplets .", "t": "Luke complain often about annoying siblings .", "u": "Luke have siblings who are the same age .", "v": "the same age complain often about annoying siblings .", "w": "the same age have siblings who are the same age .", "x": "Luke do not live at home regularly .", "y": "Luke do not develop strong bonds with Luke 's family members .", "z": "the same age do not live at home regularly .", "A": "the same age do not develop strong bonds with the same age 's family members .", "B": "Luke spend a lot of time hanging out with and playing with people 's siblings .", "C": "Luke often did not live at home regularly .", "D": "the same age spend a lot of time hanging out with and playing with people 's siblings .", "E": "the same age often did not live at home regularly ."}], "errors": [[]], "entailments_dict": [{"y": ["f", "(¬d)"], "o": ["h"], "s": ["l"], "u": ["n"], "p": ["i"], "w": ["q"], "r": ["k"], "d": ["(¬y)", "(¬f)"], "c": ["(¬e)"]}], "predicted_steps": [false]}
{"text": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom can apply for financial aid from ETS to take the GRE test?", "id": "105", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: It costs US $205 to take the GRE test.\nPremise 1.2: ETS provides financial aid to those GRE applicants who prove economic hardship.\nPremise 2.1: Economic hardship refers to difficulty caused by having too little money or too few resources.\nPremise 2.2: Tom lives in a single-parent family.\nPremise 2.3: His dad has been out of work for more than a year.\nConclusion 1: Tom's family is experiencing financial difficulty due to lack of resources.\nConclusion 2: Tom's family is experiencing financial difficulty due to lack of income.\nConclusion 3: Tom's family is experiencing economic hardship.\nConclusion 4: Tom can apply for financial aid from ETS to take the GRE test.\nAnswer: A. Yes.\n\nNote: The reasoning steps are based on the premises provided in the passage, and the conclusion is drawn from those premises. The answer is A, Yes, Tom can apply for financial aid from ETS to take the GRE test.", "logic_premises": "[[(0∧1), 2, (3∨4), 5, 6]]", "logic_conclusion": "[7]", "correspondance": [{"0": "take the GRE test .", "1": "It costs US $ 205 .", "2": "ETS provides financial aid to those GRE applicants who prove economic hardship .", "3": "Economic hardship refers to difficulty caused by having too little money .", "4": "Economic hardship refers to difficulty caused by having too few resources .", "5": "Tom lives in a single - parent family .", "6": "Tom 's dad has been out of work for more than a year .", "7": "Tom 's family is experiencing financial difficulty due to lack of resources ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that It cost below US $300 to take the GRE test?", "id": "106", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: It costs US $205 to take the GRE test.\nConclusion 1: Taking the GRE test costs less than US $300.\nAnswer: A. Yes.\n\nExplanation:\nThe passage states that the GRE test costs US $205, which is less than US $300. Therefore, the answer is A. Yes. The passage does not provide any information about ETS providing financial aid to Tom or Tom's dad, so that information is not relevant to the answer.", "logic_premises": "[[(0∧1)]]", "logic_conclusion": "[2]", "correspondance": [{"0": "take the GRE test .", "1": "It costs US $ 205 .", "2": "Taking the GRE test costs less than US $ 300 ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that There is no financial aid available for the GRE test?", "id": "107", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: It costs US $205 to take the GRE test.\nPremise 1.2: ETS provides financial aid to those GRE applicants who prove economic hardship.\nPremise 2.1: Economic hardship refers to difficulty caused by having too little money or too few resources.\nPremise 2.2: Tom lives in a single-parent family.\nPremise 2.3: Tom's dad has been out of work for more than a year.\nConclusion 1: Tom's family is experiencing economic hardship.\nConclusion 2: Tom is a GRE applicant.\nConclusion 3: Tom can prove economic hardship.\nConclusion 4: Financial aid is available for the GRE test for Tom.\nAnswer: B. No.", "logic_premises": "[[(0∧1), 2, (3∨4), 5, 6]]", "logic_conclusion": "[7]", "correspondance": [{"0": "take the GRE test .", "1": "It costs US $ 205 .", "2": "ETS provides financial aid to those GRE applicants who prove economic hardship .", "3": "Economic hardship refers to difficulty caused by having too little money .", "4": "Economic hardship refers to difficulty caused by having too few resources .", "5": "Tom lives in a single - parent family .", "6": "Tom 's dad has been out of work for more than a year .", "7": "Tom 's family is experiencing economic hardship ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Peter tidies his space consistently and enjoys the process of cleaning?", "id": "108", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\nPremise 1.2: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nConclusion 1: Peter spills a lot of food on his clothing.\nPremise 2.1: Peter spills a lot of food on his clothing.\nPremise 2.2: People who spill a lot of food on their clothing do not tidy their spaces consistently and enjoy the process of cleaning.\nConclusion 2: Peter does not tidy his spaces consistently and enjoy the process of cleaning.\nPremise 3.1: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\nPremise 3.2: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nConclusion 3: Peter did not grow up as an only child with no siblings.\nPremise 4.1: Peter did not grow up as an only child with no siblings.\nPremise 4.2: If people did not grow up as an only child with no siblings, then they do not tidy their spaces consistently and enjoy the process of cleaning.\nConclusion 4: Peter does not tidy his spaces consistently and enjoy the process of cleaning.\nAnswer: B. No.\n\nNote: The conclusion is reached by combining premises 1, 2, 3, and 4. The passage states that Peter spills a lot of food on his clothing, and people who spill a lot of food on their clothing do not tidy their spaces consistently and enjoy the process of cleaning. Additionally, the passage states that Peter did not grow up as an only child with no siblings, and people who did not grow up as an only child with no siblings do not tidy their spaces consistently and enjoy the process of cleaning. Therefore, it can be concluded that Peter does not tidy his spaces consistently and enjoy the process of cleaning.", "logic_premises": "[[((6→(7∧8))∪(9→(a∧b))), ((c→d)∪(e→f))], [0, ((6→(7∧8))∪(9→(a∧b)))], [(0→(1∧2)), ((3→4)⊻(5→6))], [((7→8)∪(9→a)), ((b→(c∧d))∪(e→(f∧g)))]]", "logic_conclusion": "[5, (4∧5), (7→8), (5∧6)]", "correspondance": [{"0": "X spill a lot of food on people 's clothing .", "1": "X do not tidy X 's spaces consistently .", "2": "X do not enjoy the process of cleaning .", "3": "X is a foody who goes out frequently to finds new food restaurants to tries .", "4": "X is a people who spills a lot of food on their clothing .", "5": "Peter spills a lot of food on Peter 's clothing .", "6": "Peter spill a lot of food on people 's clothing .", "7": "Peter do not tidy Peter 's spaces consistently .", "8": "Peter do not enjoy the process of cleaning .", "9": "the process of cleaning spill a lot of food on people 's clothing .", "a": "the process of cleaning do not tidy the process of cleaning 's spaces consistently .", "b": "the process of cleaning do not enjoy the process of cleaning .", "c": "Peter is a foody who goes out frequently to finds new food restaurants to tries .", "d": "Peter is a people who spills a lot of food on their clothing .", "e": "the process of cleaning is a foody who goes out frequently to finds new food restaurants to tries .", "f": "the process of cleaning is a people who spills a lot of food on their clothing ."}, {"0": "Peter spills a lot of food on Peter 's clothing .", "1": "X is a person who spills a lot of food on their clothing .", "2": "X does not tidies their spaces consistently .", "3": "X does not enjoys the process of cleaning .", "4": "Peter does not tidy Peter 's spaces consistently .", "5": "Peter does not enjoy the process of cleaning .", "6": "the process of cleaning is a person who spills a lot of food on their clothing .", "7": "the process of cleaning does not tidies their spaces consistently .", "8": "the process of cleaning does not enjoys the process of cleaning .", "9": "Peter is a person who spills a lot of food on their clothing .", "a": "Peter does not tidies their spaces consistently .", "b": "Peter does not enjoys the process of cleaning ."}, {"0": "X grew up as only children with no siblings .", "1": "X tidy X 's spaces consistently .", "2": "X enjoy the process of cleaning .", "3": "X is both an a person who spills a lot of food on Peter 's clothing and grew up as an only child with a sibling .", "4": "Peter is not X .", "5": "X is neither an a person who spills a lot of food on Peter 's clothing nor grew up as an only child with a sibling .", "6": "Peter is not X .", "7": "X is an only child with a sibling .", "8": "Peter growsed up as X ."}, {"0": "X is an only child with a sibling .", "1": "Peter growsed up as X .", "2": "X did not grow up as an only child with no siblings .", "3": "X do not tidy X 's spaces consistently .", "4": "X do not enjoy the process of cleaning .", "5": "Peter does not tidy Peter 's spaces consistently .", "6": "Peter does not enjoy the process of cleaning .", "7": "the process of cleaning is an only child with a sibling .", "8": "Peter growsed up as the process of cleaning .", "9": "Peter is an only child with a sibling .", "a": "Peter growsed up as Peter .", "b": "the process of cleaning did not grow up as an only child with no siblings .", "c": "the process of cleaning do not tidy the process of cleaning 's spaces consistently .", "d": "the process of cleaning do not enjoy the process of cleaning .", "e": "Peter did not grow up as an only child with no siblings .", "f": "Peter do not tidy Peter 's spaces consistently .", "g": "Peter do not enjoy the process of cleaning ."}], "errors": [[]], "entailments_dict": [{}, {"b": ["5"]}, {}, {"f": ["5"], "g": ["6"]}], "predicted_steps": [false, false, false, false]}
{"text": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income?", "id": "109", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\nPremise 1.2: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nConclusion 1: If Peter is a foodie who goes out frequently to find new food restaurants to try, then he spills a lot of food on his clothing.\nPremise 2.1: If Peter spills a lot of food on his clothing, then he does not tidy his spaces consistently and enjoy the process of cleaning.\nPremise 2.2: All households with a high net income have people who have parents who are very busy with their regular jobs.\nPremise 2.3: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\nPremise 2.4: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nConclusion 2: If Peter is a person who grew up as an only child with no siblings, then he does not have a high net income.\nPremise 3.1: Conclusion 1 and Conclusion 2\nConclusion 3: Peter is not a foodie who goes out frequently to find new food restaurants to try and does not belong to a household with a high net income.\nAnswer: B. No.\n\nNote: The conclusion is based on the information provided in the passage, but it is not explicitly stated that Peter is not a foodie or does not belong to a household with a high net income. It is only implied.", "logic_premises": "[[((7→(8∧9))∪(a→(b∧c))), ((d→e)∪(f→g))], [(0→(1∧2)), ((d→e)∪(f→g)), ((h→i)∪(j→k)), (((l→m)⊻(n→o))∪((p→q)⊻(r→s)))], [0]]", "logic_conclusion": "[(5→6), (b→c), (1∧2)]", "correspondance": [{"0": "X spill a lot of food on people 's clothing .", "1": "X do not tidy X 's spaces consistently .", "2": "X do not enjoy the process of cleaning .", "3": "X is a foody who goes out frequently to finds new food restaurants to tries .", "4": "X is a people who spills a lot of food on their clothing .", "5": "Peter is a foodie who goes out frequently to find new food restaurants to try .", "6": "Peter spills a lot of food on Peter 's clothing .", "7": "Peter spill a lot of food on people 's clothing .", "8": "Peter do not tidy Peter 's spaces consistently .", "9": "Peter do not enjoy the process of cleaning .", "a": "the process of cleaning spill a lot of food on people 's clothing .", "b": "the process of cleaning do not tidy the process of cleaning 's spaces consistently .", "c": "the process of cleaning do not enjoy the process of cleaning .", "d": "Peter is a foody who goes out frequently to finds new food restaurants to tries .", "e": "Peter is a people who spills a lot of food on their clothing .", "f": "the process of cleaning is a foody who goes out frequently to finds new food restaurants to tries .", "g": "the process of cleaning is a people who spills a lot of food on their clothing ."}, {"0": "Peter spills a lot of food on Peter 's clothing .", "1": "Peter does not tidy Peter 's spaces consistently .", "2": "Peter does not enjoy the process of cleaning .", "3": "X is a household with a high net income .", "4": "X has people who has parents who is very busy with their regular jobs .", "5": "X have parents who are very busy with people 's regular jobs .", "6": "X grew up as only children with no siblings .", "7": "X is both an a person who spills a lot of food on Peter 's clothing and grew up as an only child with a sibling .", "8": "Peter is not X .", "9": "X is neither an a person who spills a lot of food on Peter 's clothing nor grew up as an only child with a sibling .", "a": "Peter is not X .", "b": "Peter is a person who grew up as an only child with no siblings .", "c": "Peter does not have a high net income .", "d": "the process of cleaning is a household with a high net income .", "e": "the process of cleaning has people who has parents who is very busy with their regular jobs .", "f": "Peter is a household with a high net income .", "g": "Peter has people who has parents who is very busy with their regular jobs .", "h": "the process of cleaning have parents who are very busy with people 's regular jobs .", "i": "the process of cleaning grew up as only children with no siblings .", "j": "Peter have parents who are very busy with people 's regular jobs .", "k": "Peter grew up as only children with no siblings .", "l": "the process of cleaning is both an a person who spills a lot of food on Peter 's clothing and grew up as an only child with a sibling .", "m": "Peter is not the process of cleaning .", "n": "the process of cleaning is neither an a person who spills a lot of food on Peter 's clothing nor grew up as an only child with a sibling .", "o": "Peter is not the process of cleaning .", "p": "Peter is both an a person who spills a lot of food on Peter 's clothing and grew up as an only child with a sibling .", "q": "Peter is not Peter .", "r": "Peter is neither an a person who spills a lot of food on Peter 's clothing nor grew up as an only child with a sibling .", "s": "Peter is not Peter ."}, {"0": "Conclusion 1 and Conclusion 2", "1": "Peter is not a foodie who goes out frequently to find new food restaurants to try .", "2": "Peter does not belong to a household with a high net income ."}], "errors": [[]], "entailments_dict": [{}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income?", "id": "110", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\nPremise 1.2: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nConclusion 1: Peter is a foodie who goes out frequently to find new food restaurants to try if and only if he spills a lot of food on his clothing.\nPremise 2.1: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\nPremise 2.2: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nConclusion 2: Peter did not grow up as an only child with no siblings if and only if he spills a lot of food on his clothing.\nPremise 3.1: All households with a high net income have people who have parents who are very busy with their regular jobs.\nPremise 3.2: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\nConclusion 3: Peter belongs to a household with a high net income if and only if he grew up as an only child with no siblings.\nPremise 4.1: Peter is a foodie who goes out frequently to find new food restaurants to try if and only if he spills a lot of food on his clothing.\nPremise 4.2: Peter did not grow up as an only child with no siblings if and only if he spills a lot of food on his clothing.\nPremise 4.3: Peter belongs to a household with a high net income if and only if he grew up as an only child with no siblings.\nConclusion 4: Peter is a foodie who goes out frequently to find new food restaurants to try and belongs to a household with a high net income if and only if he spills a lot of food on his clothing and grew up as an only child with no siblings.\nPremise 5.1: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nConclusion 5: Peter is a foodie who goes out frequently to find new food restaurants to try and belongs to a household with a high net income if and only if he is both a person who spills a lot of food on his clothing and grew up as an only child with no siblings.\nAnswer: A. Yes.", "logic_premises": "[[((6→(7∧8))∪(9→(a∧b))), ((c→d)∪(e→f))], [(0→(1∧2)), ((3→4)⊻(5→6))], [(0→1), (2→3)], [0, (9→a), (b→c)], [((0→1)⊻(2→3))]]", "logic_conclusion": "[5, (7→8), (4→5), (d→(6∨(7∨e))), (4→(5∨6))]", "correspondance": [{"0": "X spill a lot of food on people 's clothing .", "1": "X do not tidy X 's spaces consistently .", "2": "X do not enjoy the process of cleaning .", "3": "X is a foody who goes out frequently to finds new food restaurants to tries .", "4": "X is a people who spills a lot of food on their clothing .", "5": "Peter is a foodie who goes out frequently to find new food restaurants to try if and only if Peter spills a lot of food on Peter 's clothing .", "6": "Peter spill a lot of food on people 's clothing .", "7": "Peter do not tidy Peter 's spaces consistently .", "8": "Peter do not enjoy the process of cleaning .", "9": "the process of cleaning spill a lot of food on people 's clothing .", "a": "the process of cleaning do not tidy the process of cleaning 's spaces consistently .", "b": "the process of cleaning do not enjoy the process of cleaning .", "c": "Peter is a foody who goes out frequently to finds new food restaurants to tries .", "d": "Peter is a people who spills a lot of food on their clothing .", "e": "the process of cleaning is a foody who goes out frequently to finds new food restaurants to tries .", "f": "the process of cleaning is a people who spills a lot of food on their clothing ."}, {"0": "X grew up as only children with no siblings .", "1": "X tidy X 's spaces consistently .", "2": "X enjoy the process of cleaning .", "3": "X is both an a person who spills a lot of food on Peter 's clothing and grew up as an only child with a sibling .", "4": "Peter is not X .", "5": "X is neither an a person who spills a lot of food on Peter 's clothing nor grew up as an only child with a sibling .", "6": "Peter is not X .", "7": "X is an only child with a sibling .", "8": "Peter growsed up as X that Peter spills a lot of food on Peter 's clothing ."}, {"0": "X is a household with a high net income .", "1": "X has people who has parents who is very busy with their regular jobs .", "2": "X have parents who are very busy with people 's regular jobs .", "3": "X grew up as only children with no siblings .", "4": "X is an only child with a sibling .", "5": "Peter does not belong to a household with a high net income that Peter grew up as X ."}, {"0": "Peter is a foodie who goes out frequently to find new food restaurants to try if and only if Peter spills a lot of food on Peter 's clothing .", "1": "X is an only child with a sibling .", "2": "Peter growsed up as X that Peter spills a lot of food on Peter 's clothing .", "3": "X is an only child with a sibling .", "4": "Peter does not belong to a household with a high net income that Peter grew up as X .", "5": "X is an only child with a sibling .", "6": "Peter is not a foodie who goes out frequently to finds new food restaurants to tries .", "7": "Peter does not belong to a household with a high net income that Peter spills a lot of food on Peter 's clothing .", "8": "Peter does not belong to a household with a high net income that Peter grew up as X .", "9": "Peter is an only child with a sibling .", "a": "Peter growsed up as Peter that Peter spills a lot of food on Peter 's clothing .", "b": "Peter is an only child with a sibling .", "c": "Peter does not belong to a household with a high net income that Peter grew up as Peter .", "d": "Peter is an only child with a sibling .", "e": "Peter does not belong to a household with a high net income that Peter grew up as Peter ."}, {"0": "X is both an a person who spills a lot of food on Peter 's clothing and grew up as an only child with a sibling .", "1": "Peter is not X .", "2": "X is neither an a person who spills a lot of food on Peter 's clothing nor grew up as an only child with a sibling .", "3": "Peter is not X .", "4": "X is both an a person who spills a lot of food on Peter 's clothing and grew up as an only child with a sibling .", "5": "Peter is not a foodie who goes out frequently to finds new food restaurants to tries .", "6": "Peter does not belong to a household with a high net income that Peter is X ."}], "errors": [[]], "entailments_dict": [{}, {}, {}, {"d": ["9", "b"], "c": ["e"]}, {"4": ["0"]}], "predicted_steps": [false, false, false, true, false]}
{"text": "All fir trees are evergreens. Some objects of worship are fir trees.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some evergreens are not objects of worship?", "id": "111", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: All fir trees are evergreens.\nPremise 1.2: Some objects of worship are fir trees.\nConclusion 1: Some evergreens are objects of worship.\nPremise 2.1: Some evergreens are objects of worship.\nAnswer: B. No.\n\nExplanation:\n\n1. From the passage, we know that all fir trees are evergreens and some objects of worship are fir trees.\n2. From this information, we can deduce that some evergreens are objects of worship.\n3. Since some evergreens are objects of worship, it is not true that some evergreens are not objects of worship.\n4. Therefore, the answer is B. No.", "logic_premises": "[[(0→1), 2]]", "logic_conclusion": "[3]", "correspondance": [{"0": "X is fir a tree .", "1": "X is an evergreen .", "2": "Some objects of worship are fir trees .", "3": "Some evergreens are objects of worship ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Juan de Onate visited a mountain range in New Mexico?", "id": "112", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: The Picuris Mountains are a mountain range in New Mexico or Texas.\nPremise 1.2: Juan de Onate visited the Picuris Mountains.\nPremise 2.1: There are no mountain ranges in Texas that have mines which have been donated.\nPremise 2.2: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nConclusion 1: The Picuris Mountains are not in Texas.\nConclusion 2: The Picuris Mountains are in New Mexico.\nConclusion 3: Juan de Onate visited a mountain range in New Mexico.\nAnswer: A. Yes.", "logic_premises": "[[(0∨1), 2, ((7→8)∪((9→a)∪((b→c)∪((d→e)∪((f→g)∪(h→i)))))), 5]]", "logic_conclusion": "[6]", "correspondance": [{"0": "the Picuris Mountains are a mountain range in New Mexico .", "1": "the Picuris Mountains are a mountain range in Texas .", "2": "Juan de Onate visited the Picuris Mountains .", "3": "X is mountain an a range in Texas that has mines which has been donated .", "4": "There is not X .", "5": "The Harding Pegmatite Mine , located in the Picuris Mountains , was donated .", "6": "the Picuris Mountains are not in Texas .", "7": "New Mexico or Texas is mountain an a range in Texas that has mines which has been donated .", "8": "There is not New Mexico or Texas .", "9": "The Picuris Mountains is mountain an a range in Texas that has mines which has been donated .", "a": "There is not The Picuris Mountains .", "b": "The Harding Pegmatite Mine, located in the Picuris Mountains, is mountain an a range in Texas that has mines which has been donated .", "c": "There is not The Harding Pegmatite Mine, located in the Picuris Mountains, .", "d": "Texas is mountain an a range in Texas that has mines which has been donated .", "e": "There is not Texas .", "f": "the Picuris Mountains is mountain an a range in Texas that has mines which has been donated .", "g": "There is not the Picuris Mountains .", "h": "Juan de Onate is mountain an a range in Texas that has mines which has been donated .", "i": "There is not Juan de Onate ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Juan de Onate visited a mountain range in Texas?", "id": "113", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: The Picuris Mountains are a mountain range in New Mexico or Texas.\nPremise 1.2: Juan de Onate visited the Picuris Mountains.\nPremise 2.1: There are no mountain ranges in Texas that have mines which have been donated.\nPremise 2.2: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nConclusion 1: The Picuris Mountains are in New Mexico (since there are no donated mines in Texas' mountain ranges).\nConclusion 2: Juan de Onate visited the Picuris Mountains in New Mexico.\nAnswer: B. No.", "logic_premises": "[[(0∨1), 2, ((7→8)∪((9→a)∪((b→c)∪((d→e)∪((f→g)∪((h→i)∪(j→k))))))), 5]]", "logic_conclusion": "[6]", "correspondance": [{"0": "the Picuris Mountains are a mountain range in New Mexico .", "1": "the Picuris Mountains are a mountain range in Texas .", "2": "Juan de Onate visited the Picuris Mountains .", "3": "X is mountain an a range in Texas that has mines which has been donated .", "4": "There is not X .", "5": "The Harding Pegmatite Mine , located in the Picuris Mountains , was donated .", "6": "the Picuris Mountains are in New Mexico .", "7": "New Mexico or Texas is mountain an a range in Texas that has mines which has been donated .", "8": "There is not New Mexico or Texas .", "9": "The Picuris Mountains is mountain an a range in Texas that has mines which has been donated .", "a": "There is not The Picuris Mountains .", "b": "The Harding Pegmatite Mine, located in the Picuris Mountains, is mountain an a range in Texas that has mines which has been donated .", "c": "There is not The Harding Pegmatite Mine, located in the Picuris Mountains, .", "d": "New Mexico is mountain an a range in Texas that has mines which has been donated .", "e": "There is not New Mexico .", "f": "Texas is mountain an a range in Texas that has mines which has been donated .", "g": "There is not Texas .", "h": "the Picuris Mountains is mountain an a range in Texas that has mines which has been donated .", "i": "There is not the Picuris Mountains .", "j": "Juan de Onate is mountain an a range in Texas that has mines which has been donated .", "k": "There is not Juan de Onate ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The Harding Pegmatite Mine is not located in a mountain range in New Mexico?", "id": "114", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: The Harding Pegmatite Mine is located in the Picuris Mountains.\nPremise 1.2: The Picuris Mountains are in New Mexico or Texas.\nPremise 2.1: There are no mountain ranges in Texas that have donated mines.\nPremise 2.2: The Harding Pegmatite Mine was donated.\nConclusion 1: The Harding Pegmatite Mine is not located in a mountain range in Texas.\nPremise 3.1: The Picuris Mountains are in New Mexico or Texas.\nPremise 3.2: The Harding Pegmatite Mine is not located in a mountain range in Texas.\nConclusion 2: The Harding Pegmatite Mine is located in a mountain range in New Mexico.\nAnswer: C. Uncertain.\n\nThe passage does not explicitly state that the Picuris Mountains in New Mexico do not have donated mines, so it is uncertain if the Harding Pegmatite Mine is located in the Picuris Mountains of New Mexico.", "logic_premises": "[[0, (1∨2), ((7→8)∪((9→a)∪((b→c)∪((d→e)∪(f→g))))), 5], [(0∨1), 2]]", "logic_conclusion": "[6, 3]", "correspondance": [{"0": "the Harding Pegmatite Mine is located in the Picuris Mountains .", "1": "the Picuris Mountains are in New Mexico .", "2": "the Picuris Mountains are in Texas .", "3": "X is mountain an a range in Texas that has donated mines .", "4": "There is not X .", "5": "the Harding Pegmatite Mine was donated .", "6": "the Harding Pegmatite Mine is not located in a mountain range in Texas .", "7": "New Mexico or Texas is mountain an a range in Texas that has donated mines .", "8": "There is not New Mexico or Texas .", "9": "The Picuris Mountains is mountain an a range in Texas that has donated mines .", "a": "There is not The Picuris Mountains .", "b": "The Harding Pegmatite Mine is mountain an a range in Texas that has donated mines .", "c": "There is not The Harding Pegmatite Mine .", "d": "Texas is mountain an a range in Texas that has donated mines .", "e": "There is not Texas .", "f": "the Picuris Mountains is mountain an a range in Texas that has donated mines .", "g": "There is not the Picuris Mountains ."}, {"0": "The Picuris Mountains are in New Mexico .", "1": "The Picuris Mountains are in Texas .", "2": "The Harding Pegmatite Mine is not located in a mountain range in Texas .", "3": "The Harding Pegmatite Mine is located in a mountain range in New Mexico ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Peter is shorter than a man in Michael's class?", "id": "115", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If a man is taller than another man, the taller one can block the other's shooting.\nPremise 1.2: Michael is a man who is taller than everyone else in his class.\nPremise 1.3: Michael cannot block Windy's shooting.\nPremise 1.4: Every shooter who can jump when shooting is a great shooter.\nPremise 2.1: Michael is taller than every man in his class.\nPremise 2.2: Peter is taller than Michael.\nConclusion 2: Peter is taller than every man in Michael's class.\nPremise 3.1: Peter is taller than every man in Michael's class.\nAnswer: B. No.", "logic_premises": "[[(((d∧e)→f)∪(((g∧h)→i)∪(((j∧k)→l)∪(((m∧n)→o)∪((p∧q)→r))))), ((s→t)∪((u→v)∪((w→x)∪((y→z)∪(A→B))))), 5, ((C→D)∪((E→F)∪((G→H)∪((I→J)∪(K→L))))), ((M→N)∪((O→P)∪((Q→R)∪((S→T)∪(U→V))))), a]]", "logic_conclusion": "[((W→X)∪((Y→Z)∪((!→\")∪((#→$)∪(%→&)))))]", "correspondance": [{"0": "X is a man", "1": "X is taller than another man .", "2": "X can block another man 's shooting .", "3": "X is a person man who is taller than else in Michael 's class .", "4": "Michael is X .", "5": "Michael can not block Windy 's shooting .", "6": "X is a shooter who can jump when shooting .", "7": "X is a great shooter .", "8": "X is a man in Michael 's class .", "9": "Michael is taller than X .", "a": "Peter is taller than Michael .", "b": "X is a man in Michael 's class .", "c": "Peter is taller than X .", "d": "Michael is a man", "e": "Michael is taller than another man .", "f": "Michael can block another man 's shooting .", "g": "Michaels class is a man", "h": "Michaels class is taller than another man .", "i": "Michaels class can block another man 's shooting .", "j": "the others shooting is a man", "k": "the others shooting is taller than another man .", "l": "the others shooting can block another man 's shooting .", "m": "Peter is a man", "n": "Peter is taller than another man .", "o": "Peter can block another man 's shooting .", "p": "Windys shooting is a man", "q": "Windys shooting is taller than another man .", "r": "Windys shooting can block another man 's shooting .", "s": "Michael is a person man who is taller than else in Michael 's class .", "t": "Michael is Michael .", "u": "Michaels class is a person man who is taller than else in Michael 's class .", "v": "Michael is Michaels class .", "w": "the others shooting is a person man who is taller than else in Michael 's class .", "x": "Michael is the others shooting .", "y": "Peter is a person man who is taller than else in Michael 's class .", "z": "Michael is Peter .", "A": "Windys shooting is a person man who is taller than else in Michael 's class .", "B": "Michael is Windys shooting .", "C": "Michael is a shooter who can jump when shooting .", "D": "Michael is a great shooter .", "E": "Michaels class is a shooter who can jump when shooting .", "F": "Michaels class is a great shooter .", "G": "the others shooting is a shooter who can jump when shooting .", "H": "the others shooting is a great shooter .", "I": "Peter is a shooter who can jump when shooting .", "J": "Peter is a great shooter .", "K": "Windys shooting is a shooter who can jump when shooting .", "L": "Windys shooting is a great shooter .", "M": "Michael is a man in Michael 's class .", "N": "Michael is taller than Michael .", "O": "Michaels class is a man in Michael 's class .", "P": "Michael is taller than Michaels class .", "Q": "the others shooting is a man in Michael 's class .", "R": "Michael is taller than the others shooting .", "S": "Peter is a man in Michael 's class .", "T": "Michael is taller than Peter .", "U": "Windys shooting is a man in Michael 's class .", "V": "Michael is taller than Windys shooting .", "W": "Michael is a man in Michael 's class .", "X": "Peter is taller than Michael .", "Y": "Michaels class is a man in Michael 's class .", "Z": "Peter is taller than Michaels class .", "!": "the others shooting is a man in Michael 's class .", "\"": "Peter is taller than the others shooting .", "#": "Peter is a man in Michael 's class .", "$": "Peter is taller than Peter .", "%": "Windys shooting is a man in Michael 's class .", "&": "Peter is taller than Windys shooting ."}], "errors": [[]], "entailments_dict": [{"W": ["M"], "!": ["Q"], "#": ["S"], "%": ["U"], "Y": ["O"], "a": ["X"]}], "predicted_steps": [false]}
{"text": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Windy is a great shooter?", "id": "116", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If a man is taller than another man, the taller one can block the other's shooting.\nPremise 1.2: Michael can block any shooting from a person as long as the person does not jump when shooting.\nPremise 1.3: Michael cannot block Windy's shooting.\nConclusion 1: Windy is taller than Michael.\nPremise 2.1: Windy is taller than Michael.\nPremise 2.2: Peter is a man who is taller than Michael.\nConclusion 2: Peter cannot block Windy's shooting.\nPremise 3.1: Every shooter who can jump when shooting is a great shooter.\nPremise 3.2: The passage does not mention Windy jumping when shooting.\nAnswer: C. Uncertain.\n\nExplanation:\nThe reasoning here is that the passage does not provide enough information to determine whether Windy is a great shooter or not. The passage states that Windy cannot be blocked by Michael, which implies that Windy is taller than Michael, but it does not mention whether Windy can jump when shooting. Therefore, it is uncertain whether Windy is a great shooter.", "logic_premises": "[[(((7∧8)→2)∪(((9∧a)→2)∪(((b∧c)→2)∪(((d∧e)→2)∪((f∧g)→2))))), ((h→i)∪((j→k)∪((l→m)∪((n→o)∪(p→q))))), 5], [0, 1]]", "logic_conclusion": "[6, 2]", "correspondance": [{"0": "X is a man", "1": "X is taller than another man .", "2": "another man can block another man 's shooting .", "3": "X is a shooting from a person .", "4": "Michael can block X as long as a person does not jump when shooting .", "5": "Michael can not block Windy 's 's shooting .", "6": "Windy 's is taller than Michael .", "7": "Michael is a man", "8": "Michael is taller than another man .", "9": "Windy is a man", "a": "Windy is taller than another man .", "b": "the others shooting is a man", "c": "the others shooting is taller than another man .", "d": "Windys shooting is a man", "e": "Windys shooting is taller than another man .", "f": "the person is a man", "g": "the person is taller than another man .", "h": "Michael is a shooting from a person .", "i": "Michael can block Michael as long as a person does not jump when shooting .", "j": "Windy is a shooting from a person .", "k": "Michael can block Windy as long as a person does not jump when shooting .", "l": "the others shooting is a shooting from a person .", "m": "Michael can block the others shooting as long as a person does not jump when shooting .", "n": "Windys shooting is a shooting from a person .", "o": "Michael can block Windys shooting as long as a person does not jump when shooting .", "p": "the person is a shooting from a person .", "q": "Michael can block the person as long as a person does not jump when shooting ."}, {"0": "Windy is taller than Michael .", "1": "Peter is a man who is taller than Michael .", "2": "Peter can not block Windy 's shooting ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Peter can block Windy's shooting?", "id": "117", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If a man is taller than another man, the taller one can block the other's shooting.\nPremise 1.2: Michael is taller than everyone else in his class and can block any shooting from a person as long as the person does not jump when shooting.\nPremise 1.3: Michael cannot block Windy's shooting.\nConclusion 1: Windy is taller than Michael.\nPremise 2.1: Windy is taller than Michael.\nPremise 2.2: Peter is a man who is taller than Michael.\nConclusion 2: Peter is taller than Windy.\nPremise 3.1: If a man is taller than another man, the taller one can block the other's shooting.\nPremise 3.2: Every shooter who can jump when shooting is a great shooter.\nPremise 3.3: The passage does not mention if Windy can jump when shooting.\nConclusion 3: There is not enough information to determine if Peter can block Windy's shooting.\nAnswer: C. Uncertain.\n\nExplanation:\n\n* First, we establish that Windy is taller than Michael, and Peter is taller than Michael.\n* From this, we can infer that Peter is taller than Windy.\n* However, the passage states that Michael cannot block Windy's shooting, and Michael is taller than Peter.\n* The passage also states that if a man is taller than another man, the taller one can block the other's shooting.\n* But, the passage also states that Michael can block any shooting from a person as long as the person does not jump when shooting.\n* It is not clear if Windy can jump when shooting, and the passage does not provide enough information to determine if Peter can block Windy's shooting.\n* Therefore, the answer is uncertain.", "logic_premises": "[[(((8∧9)→2)∪(((a∧b)→2)∪(((c∧d)→2)∪(((e∧f)→2)∪((g∧h)→2))))), ((i→(j∧5))∪((k→(l∧5))∪((m→(n∧5))∪((o→(p∧5))∪(q→(r∧5)))))), 6], [0, 1], [(((7∧8)→9)∪(((a∧b)→c)∪(((d∧e)→f)∪(((g∧h)→i)∪((j∧k)→l))))), ((m→n)∪((o→p)∪((q→r)∪((s→t)∪(u→v))))), 5]]", "logic_conclusion": "[7, 2, 6]", "correspondance": [{"0": "X is a man", "1": "X is taller than another man .", "2": "another man can block another man 's shooting .", "3": "X is a person else in Michael 's class .", "4": "Michael is taller than X .", "5": "Michael can block any shooting from a person as long as a person does not jump when shooting .", "6": "Michael can not block Windy 's 's shooting .", "7": "Windy 's is taller than Michael .", "8": "Michael is a man", "9": "Michael is taller than another man .", "a": "Windy is a man", "b": "Windy is taller than another man .", "c": "the others shooting is a man", "d": "the others shooting is taller than another man .", "e": "Windys shooting is a man", "f": "Windys shooting is taller than another man .", "g": "the person is a man", "h": "the person is taller than another man .", "i": "Michael is a person else in Michael 's class .", "j": "Michael is taller than Michael .", "k": "Windy is a person else in Michael 's class .", "l": "Michael is taller than Windy .", "m": "the others shooting is a person else in Michael 's class .", "n": "Michael is taller than the others shooting .", "o": "Windys shooting is a person else in Michael 's class .", "p": "Michael is taller than Windys shooting .", "q": "the person is a person else in Michael 's class .", "r": "Michael is taller than the person ."}, {"0": "Windy is taller than Michael .", "1": "Peter is a man who is taller than Michael .", "2": "Peter is taller than Windy ."}, {"0": "X is a man", "1": "X is taller than another man .", "2": "X can block another man 's shooting .", "3": "X is a shooter who can jump when shooting .", "4": "X is a great shooter .", "5": "The passage does not mention that Windy can jump that The passage does not mention that shooting .", "6": "There is not enough information to determine if Peter can block Windy 's shooting .", "7": "Windy is a man", "8": "Windy is taller than another man .", "9": "Windy can block another man 's shooting .", "a": "The passage is a man", "b": "The passage is taller than another man .", "c": "The passage can block another man 's shooting .", "d": "the others shooting is a man", "e": "the others shooting is taller than another man .", "f": "the others shooting can block another man 's shooting .", "g": "Peter is a man", "h": "Peter is taller than another man .", "i": "Peter can block another man 's shooting .", "j": "Windys shooting is a man", "k": "Windys shooting is taller than another man .", "l": "Windys shooting can block another man 's shooting .", "m": "Windy is a shooter who can jump when shooting .", "n": "Windy is a great shooter .", "o": "The passage is a shooter who can jump when shooting .", "p": "The passage is a great shooter .", "q": "the others shooting is a shooter who can jump when shooting .", "r": "the others shooting is a great shooter .", "s": "Peter is a shooter who can jump when shooting .", "t": "Peter is a great shooter .", "u": "Windys shooting is a shooter who can jump when shooting .", "v": "Windys shooting is a great shooter ."}], "errors": [[]], "entailments_dict": [{}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Barutin is named after all islands in Antarctica?", "id": "118", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Barutin Cove is named after the Bulgarian settlement of Barutin.\nPremise 1.2: Barutin Cove is on the southwest coast of Snow Island.\nPremise 1.3: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nPremise 1.4: The South Shetland Islands are considered part of Antarctica.\nPremise 1.5: If A is located in B and B is located in C, then A is located in C.\nConclusion 1: Barutin Cove is located in Snow Island, which is located in the South Shetland Islands, which is located in Antarctica.\n\nPremise 2.1: Barutin Cove is named after the Bulgarian settlement of Barutin.\nPremise 2.2: Conclusion 1: Barutin Cove is located in Antarctica.\nConclusion 2: Barutin Cove is named after a Bulgarian settlement, not after all islands in Antarctica.\nAnswer: B. No.\n\nNote: The answer is no because Barutin Cove is named after a Bulgarian settlement, not after all islands in Antarctica. The location of Barutin Cove in Antarctica is not relevant to the name of the cove.", "logic_premises": "[[0, 1, (2∧(3∧4)), 5, ((6∧7)→8)], [0, 1]]", "logic_conclusion": "[(9∧(a∧b)), ((4→5)∪((6→7)∪(8→9)))]", "correspondance": [{"0": "Barutin Cove is named after the Bulgarian settlement of Barutin .", "1": "Barutin Cove is on the southwest coast of Snow Island .", "2": "The South Shetland Islands include Snow Island .", "3": "The South Shetland Islands include Greenwich Island .", "4": "The South Shetland Islands include Deception Island .", "5": "The South Shetland Islands are considered part of Antarctica .", "6": "A is located in B .", "7": "B is located in C .", "8": "A is located in C", "9": "Barutin Cove is located in Snow Island .", "a": "Snow Island is located in The South Shetland Islands .", "b": "The South Shetland Islands is located in Antarctica ."}, {"0": "Barutin Cove is named after the Bulgarian settlement of Barutin .", "1": "Conclusion 1 : Barutin Cove is located in Antarctica .", "2": "X is an island in Antarctica .", "3": "Barutin Cove is named after the Bulgarian settlement of Barutin , not after X .", "4": "the Bulgarian settlement of Barutin is an island in Antarctica .", "5": "Barutin Cove is named after the Bulgarian settlement of Barutin , not after the Bulgarian settlement of Barutin .", "6": "Barutin Cove is an island in Antarctica .", "7": "Barutin Cove is named after the Bulgarian settlement of Barutin , not after Barutin Cove .", "8": "Antarctica is an island in Antarctica .", "9": "Barutin Cove is named after the Bulgarian settlement of Barutin , not after Antarctica ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that There is at least one cove in Antarctica named after a place in Bulgaria?", "id": "119", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Barutin Cove is named after the Bulgarian settlement of Barutin.\nPremise 1.2: Barutin Cove is on the southwest coast of Snow Island.\nPremise 1.3: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nPremise 1.4: The South Shetland Islands are considered part of Antarctica.\nPremise 2.1: If A is located in B and B is located in C, then A is located in C.\nPremise 2.2: Barutin Cove is located in Snow Island.\nPremise 2.3: Snow Island is located in the South Shetland Islands.\nPremise 2.4: The South Shetland Islands are located in Antarctica.\nConclusion 1: Barutin Cove is located in Antarctica.\nPremise 2.5: Barutin Cove is named after the Bulgarian settlement of Barutin.\nConclusion 2: There is at least one cove in Antarctica named after a place in Bulgaria.\nAnswer: A. Yes.", "logic_premises": "[[0, 1, (2∧(3∧4)), 5, ((6∧7)→8), 9, a, b], [0]]", "logic_conclusion": "[c, 1]", "correspondance": [{"0": "Barutin Cove is named after the Bulgarian settlement of Barutin .", "1": "Barutin Cove is on the southwest coast of Snow Island .", "2": "The South Shetland Islands include Snow Island .", "3": "The South Shetland Islands include Greenwich Island .", "4": "The South Shetland Islands include Deception Island .", "5": "The South Shetland Islands are considered part of Antarctica .", "6": "A is located in B .", "7": "B is located in C .", "8": "A is located in C.", "9": "Barutin Cove is located in Snow Island .", "a": "Snow Island is located in The South Shetland Islands .", "b": "The South Shetland Islands are located in Antarctica .", "c": "Barutin Cove is located in Antarctica ."}, {"0": "Barutin Cove is named after the Bulgarian settlement of Barutin .", "1": "There is at least one cove in Antarctica named after a place in Bulgaria ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Barutin is not located in Antarctica?", "id": "120", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Barutin Cove is named after the Bulgarian settlement of Barutin.\nPremise 1.2: Barutin Cove is on the southwest coast of Snow Island.\nPremise 1.3: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nPremise 1.4: The South Shetland Islands are considered part of Antarctica.\nPremise 1.5: If A is located in B and B is located in C, then A is located in C.\nConclusion 1: Barutin Cove is located in Snow Island, which is located in the South Shetland Islands, which are located in Antarctica.\nConclusion 2: Barutin Cove is located in Antarctica.\nPremise 2.1: Barutin Cove is located in Antarctica.\nAnswer: C. Uncertain\n\nExplanation:\nThe question asks if it is true that Barutin is not located in Antarctica, which is a negative statement. The reasoning process starts by establishing that Barutin Cove is indeed located in Antarctica, which contradicts the negative statement in the question. Therefore, the answer is uncertain, as the question asks for the truth of a negative statement that has been shown to be false.", "logic_premises": "[[0, 1, (2∧(3∧4)), 5, ((6∧7)→8)]]", "logic_conclusion": "[(9∧(a∧b))]", "correspondance": [{"0": "Barutin Cove is named after the Bulgarian settlement of Barutin .", "1": "Barutin Cove is on the southwest coast of Snow Island .", "2": "The South Shetland Islands include Snow Island .", "3": "The South Shetland Islands include Greenwich Island .", "4": "The South Shetland Islands include Deception Island .", "5": "The South Shetland Islands are considered part of Antarctica .", "6": "A is located in B .", "7": "B is located in C .", "8": "A is located in C", "9": "Barutin Cove is located in Snow Island .", "a": "Snow Island is located in the South Shetland Islands .", "b": "the South Shetland Islands are located in Antarctica ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Some affection is love. Some love is positive.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some affection is positive?", "id": "121", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Some affection is love.\nPremise 1.2: Some love is positive.\nConclusion 1: There is a subset of love that is positive.\nPremise 2.1: Some affection is a subset of love.\nConclusion 2: The subset of affection that is love is a subset of the positive love.\nAnswer: A. Yes.\n\nExplanation:\n\n* Premise 1.1 states that some affection is a form of love.\n* Premise 1.2 states that some love is positive.\n* Conclusion 1 follows from premise 1.2, that there is a subset of love that is positive.\n* Premise 2.1 states that some affection is a subset of love.\n* Conclusion 2 follows from premise 2.1 and conclusion 1, that the subset of affection that is love is a subset of the positive love.\n* Therefore, some affection is positive.", "logic_premises": "[[0, 1], [0]]", "logic_conclusion": "[2, 1]", "correspondance": [{"0": "Some affection is love .", "1": "Some love is positive .", "2": "There is a subset of love that is positive ."}, {"0": "Some affection is a subset of love .", "1": "love is a subset of the positive love ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Greyhound is an airline?", "id": "122", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If something can transport multiple passengers, then they are not empty.\nPremise 1.2: All airlines can transport multiple passengers.\nPremise 1.3: All planes are empty.\nPremise 1.4: All Boeing 707s are planes.\nPremise 2.1: If Greyhound is not an airline, then there are no Greyhound planes.\nPremise 2.2: There are Greyhound planes.\nConclusion 1: Greyhound is an airline.\nPremise 3.1: Greyhound is an airline.\nAnswer: A. Yes.\n\nExplanation:\n\n1. From Premise 1.2, we know that airlines can transport multiple passengers.\n2. From Premise 1.1, we know that if something can transport multiple passengers, then they are not empty.\n3. From Premise 1.3, we know that all planes are empty.\n4. From Premise 1.4, we know that all Boeing 707s are planes.\n5. Therefore, Boeing 707s are empty planes.\n6. From Premise 2.1, we know that if Greyhound is not an airline, then there are no Greyhound planes.\n7. From Premise 2.2, we know that there are Greyhound planes.\n8. Therefore, Greyhound is an airline.\n\nNote: This reasoning assumes that the only type of planes that can transport multiple passengers are airlines. If Greyhound planes are not airlines, but can transport multiple passengers, then the conclusion would be uncertain.", "logic_premises": "[[((c→d)∪((e→f)∪((g→h)∪(i→j)))), ((k→l)∪((m→n)∪((o→p)∪(q→r)))), ((s→t)∪((u→v)∪((w→x)∪(y→z)))), ((A→B)∪((C→D)∪((E→F)∪(G→H)))), (8→9), a]]", "logic_conclusion": "[b]", "correspondance": [{"0": "X can transport multiple passengers .", "1": "X are not empty .", "2": "X is an airline .", "3": "X can transport multiple passengers .", "4": "X is a plane .", "5": "X is empty .", "6": "X is Boeing a 707 .", "7": "X is a plane .", "8": "Greyhound is not an airline .", "9": "there are no Greyhound planes .", "a": "There are Greyhound planes .", "b": "Greyhound is an airline .", "c": "All Boeing 707s can transport multiple passengers .", "d": "All Boeing 707s are not empty .", "e": "Greyhound can transport multiple passengers .", "f": "Greyhound are not empty .", "g": "Greyhound planes can transport multiple passengers .", "h": "Greyhound planes are not empty .", "i": "no Greyhound planes can transport multiple passengers .", "j": "no Greyhound planes are not empty .", "k": "All Boeing 707s is an airline .", "l": "All Boeing 707s can transport multiple passengers .", "m": "Greyhound is an airline .", "n": "Greyhound can transport multiple passengers .", "o": "Greyhound planes is an airline .", "p": "Greyhound planes can transport multiple passengers .", "q": "no Greyhound planes is an airline .", "r": "no Greyhound planes can transport multiple passengers .", "s": "All Boeing 707s is a plane .", "t": "All Boeing 707s is empty .", "u": "Greyhound is a plane .", "v": "Greyhound is empty .", "w": "Greyhound planes is a plane .", "x": "Greyhound planes is empty .", "y": "no Greyhound planes is a plane .", "z": "no Greyhound planes is empty .", "A": "All Boeing 707s is Boeing a 707 .", "B": "All Boeing 707s is a plane .", "C": "Greyhound is Boeing a 707 .", "D": "Greyhound is a plane .", "E": "Greyhound planes is Boeing a 707 .", "F": "Greyhound planes is a plane .", "G": "no Greyhound planes is Boeing a 707 .", "H": "no Greyhound planes is a plane ."}], "errors": [[]], "entailments_dict": [{"p": ["g"], "F": ["w"], "n": ["e"], "r": ["i"], "B": ["s"], "D": ["u"], "l": ["c"], "H": ["y"], "b": ["m"], "h": ["(¬x)"], "z": ["(¬j)"], "j": ["(¬z)"], "f": ["(¬v)"], "x": ["(¬h)"], "d": ["(¬t)"], "v": ["(¬f)"], "t": ["(¬d)"], "(¬b)": ["8"], "(¬8)": ["m"], "(¬m)": ["8"]}], "predicted_steps": [false]}
{"text": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A Greyhound is a Boeing 707?", "id": "123", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If something can transport multiple passengers, then they are not empty.\nPremise 1.2: All airlines can transport multiple passengers.\nPremise 1.3: All planes are empty.\nPremise 1.4: All Boeing 707s are planes.\nPremise 2.1: If Greyhound is not an airline, then there are no Greyhound planes.\nConclusion 1: If Greyhound is not an airline, then Greyhound planes are empty planes.\nPremise 2.2: Greyhound is not an airline.\nConclusion 2: Greyhound planes are empty planes.\nPremise 3.1: All Boeing 707s are planes.\nPremise 3.2: Greyhound planes are planes.\nConclusion 3: Greyhound planes are Boeing 707s.\nPremise 4.1: Greyhound planes are Boeing 707s.\nPremise 4.2: Boeing 707s are not empty.\nConclusion 4: Greyhound planes are not empty.\nPremise 5.1: If something can transport multiple passengers, then they are not empty.\nPremise 5.2: Greyhound planes are not empty.\nConclusion 5: Greyhound planes can transport multiple passengers.\n\nFrom the above reasoning, there is no information that directly states that a Greyhound is a Boeing 707, so the answer is:\n\nAnswer: C. Uncertain.", "logic_premises": "[[((c→d)∪((e→f)∪(g→h))), ((i→j)∪((k→l)∪(m→n))), ((o→p)∪((q→r)∪(s→t))), ((u→v)∪((w→x)∪(y→z))), (8→9)], [0], [((5→6)∪((7→8)∪(9→a))), ((b→c)∪((d→e)∪(f→g)))], [0, 1], [(4→5), 2]]", "logic_conclusion": "[(a→b), 1, 4, 2, 3]", "correspondance": [{"0": "X can transport multiple passengers .", "1": "X are not empty .", "2": "X is an airline .", "3": "X can transport multiple passengers .", "4": "X is a plane .", "5": "X is empty .", "6": "X is Boeing a 707 .", "7": "X is a plane .", "8": "Greyhound is not an airline .", "9": "there are no Greyhound planes .", "a": "Greyhound is not an airline .", "b": "Greyhound planes are empty planes .", "c": "All Boeing 707s can transport multiple passengers .", "d": "All Boeing 707s are not empty .", "e": "Greyhound planes can transport multiple passengers .", "f": "Greyhound planes are not empty .", "g": "no Greyhound planes can transport multiple passengers .", "h": "no Greyhound planes are not empty .", "i": "All Boeing 707s is an airline .", "j": "All Boeing 707s can transport multiple passengers .", "k": "Greyhound planes is an airline .", "l": "Greyhound planes can transport multiple passengers .", "m": "no Greyhound planes is an airline .", "n": "no Greyhound planes can transport multiple passengers .", "o": "All Boeing 707s is a plane .", "p": "All Boeing 707s is empty .", "q": "Greyhound planes is a plane .", "r": "Greyhound planes is empty .", "s": "no Greyhound planes is a plane .", "t": "no Greyhound planes is empty .", "u": "All Boeing 707s is Boeing a 707 .", "v": "All Boeing 707s is a plane .", "w": "Greyhound planes is Boeing a 707 .", "x": "Greyhound planes is a plane .", "y": "no Greyhound planes is Boeing a 707 .", "z": "no Greyhound planes is a plane ."}, {"0": "Greyhound is not an airline .", "1": "Greyhound planes are empty planes ."}, {"0": "X is Boeing a 707 .", "1": "X is a plane .", "2": "X is Greyhound a plane .", "3": "X is a plane .", "4": "Greyhound planes are Boeing 707s .", "5": "All Boeing 707s is Boeing a 707 .", "6": "All Boeing 707s is a plane .", "7": "Boeing 707s is Boeing a 707 .", "8": "Boeing 707s is a plane .", "9": "Greyhound planes is Boeing a 707 .", "a": "Greyhound planes is a plane .", "b": "All Boeing 707s is Greyhound a plane .", "c": "All Boeing 707s is a plane .", "d": "Boeing 707s is Greyhound a plane .", "e": "Boeing 707s is a plane .", "f": "Greyhound planes is Greyhound a plane .", "g": "Greyhound planes is a plane ."}, {"0": "Greyhound planes are Boeing 707s .", "1": "Boeing 707s are not empty .", "2": "Greyhound planes are not empty ."}, {"0": "X can transport multiple passengers .", "1": "X are not empty .", "2": "Greyhound planes are not empty .", "3": "Greyhound planes can transport multiple passengers .", "4": "Greyhound planes can transport multiple passengers .", "5": "Greyhound planes are not empty ."}], "errors": [[]], "entailments_dict": [{"l": ["e"], "v": ["o"], "n": ["g"], "x": ["q"], "j": ["c"], "z": ["s"], "a": ["8"], "f": ["(¬r)"], "h": ["(¬t)"], "r": ["(¬f)"], "d": ["(¬p)"], "t": ["(¬h)"], "p": ["(¬d)"]}, {}, {"4": ["9"]}, {}, {"5": ["2"], "3": ["4"]}], "predicted_steps": [false, false, false, false, false]}
{"text": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A Greyhound is not a Boeing 707?", "id": "124", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If something can transport multiple passengers, then they are not empty.\nPremise 1.2: All airlines can transport multiple passengers.\nPremise 1.3: All planes are empty.\nPremise 1.4: All Boeing 707s are planes.\nPremise 2.1: If Greyhound is not an airline, then there are no Greyhound planes.\nConclusion 1: If Greyhound is not an airline, then Greyhound planes are empty planes.\nPremise 2.2: But, Greyhound is not an airline.\nConclusion 2: Therefore, there are no Greyhound planes.\nPremise 3.1: All Boeing 707s are planes.\nPremise 3.2: There are no Greyhound planes.\nConclusion 3: A Greyhound is not a Boeing 707.\nAnswer: A. Yes.\n\nExplanation:\n\n* From the passage, we know that if something can transport multiple passengers, then they are not empty.\n* We also know that all planes are empty.\n* And we know that all Boeing 707s are planes.\n* From this, we can conclude that if something is a Boeing 707, then it is empty.\n* The passage also states that if Greyhound is not an airline, then there are no Greyhound planes.\n* And we know that Greyhound is not an airline.\n* Therefore, there are no Greyhound planes.\n* Since all Boeing 707s are planes, and there are no Greyhound planes, it follows that a Greyhound is not a Boeing 707.", "logic_premises": "[[((c→d)∪((e→f)∪(g→h))), ((i→j)∪((k→l)∪(m→n))), ((o→p)∪((q→r)∪(s→t))), ((u→v)∪((w→x)∪(y→z))), (8→9)], [0], [(0→1), (2→3)]]", "logic_conclusion": "[(a→b), ((3→4)∪(5→6)), (4→5)]", "correspondance": [{"0": "X can transport multiple passengers .", "1": "X are not empty .", "2": "X is an airline .", "3": "X can transport multiple passengers .", "4": "X is a plane .", "5": "X is empty .", "6": "X is Boeing a 707 .", "7": "X is a plane .", "8": "Greyhound is not an airline .", "9": "there are no Greyhound planes .", "a": "Greyhound is not an airline .", "b": "Greyhound planes are empty planes .", "c": "All Boeing 707s can transport multiple passengers .", "d": "All Boeing 707s are not empty .", "e": "Greyhound planes can transport multiple passengers .", "f": "Greyhound planes are not empty .", "g": "no Greyhound planes can transport multiple passengers .", "h": "no Greyhound planes are not empty .", "i": "All Boeing 707s is an airline .", "j": "All Boeing 707s can transport multiple passengers .", "k": "Greyhound planes is an airline .", "l": "Greyhound planes can transport multiple passengers .", "m": "no Greyhound planes is an airline .", "n": "no Greyhound planes can transport multiple passengers .", "o": "All Boeing 707s is a plane .", "p": "All Boeing 707s is empty .", "q": "Greyhound planes is a plane .", "r": "Greyhound planes is empty .", "s": "no Greyhound planes is a plane .", "t": "no Greyhound planes is empty .", "u": "All Boeing 707s is Boeing a 707 .", "v": "All Boeing 707s is a plane .", "w": "Greyhound planes is Boeing a 707 .", "x": "Greyhound planes is a plane .", "y": "no Greyhound planes is Boeing a 707 .", "z": "no Greyhound planes is a plane ."}, {"0": "But , Greyhound is not an airline .", "1": "X is Greyhound an a plane .", "2": "Therefore , there is not X .", "3": "Greyhound is Greyhound an a plane .", "4": "Therefore , there is not Greyhound .", "5": "no Greyhound planes is Greyhound an a plane .", "6": "Therefore , there is not no Greyhound planes ."}, {"0": "X is Boeing a 707 .", "1": "X is a plane .", "2": "X is Greyhound an a plane .", "3": "There is not X .", "4": "X is A Greyhound", "5": "X is not a Boeing 707 ."}], "errors": [[]], "entailments_dict": [{"l": ["e"], "v": ["o"], "n": ["g"], "x": ["q"], "j": ["c"], "z": ["s"], "a": ["8"], "f": ["(¬r)"], "h": ["(¬t)"], "r": ["(¬f)"], "d": ["(¬p)"], "t": ["(¬h)"], "p": ["(¬d)"]}, {}, {"(¬5)": ["0"]}], "predicted_steps": [false, false, false]}
{"text": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rock is a monkey?", "id": "125", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: All mammals are animals.\nPremise 1.2: All monkeys are mammals.\nConclusion 1: All monkeys are animals.\nPremise 2.1: An animal is either a monkey or a bird.\nPremise 2.2: Rock is neither a fly nor a bird.\nConclusion 2: Rock is not a monkey.\nPremise 3.1: Rock is not a monkey.\nAnswer: B. No.\n\nNote: We can also reach the conclusion by using the premise \"If Rock is neither a fly nor a bird, then Rock neither flies nor breathes\" and the fact that all monkeys are animals and animals breathe, but Rock doesn't breathe.\n\nPremise 4.1: All monkeys are animals.\nPremise 4.2: Animals breathe.\nPremise 4.3: Rock is neither a fly nor a bird.\nPremise 4.4: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nConclusion 4: Rock is not a monkey.\nPremise 5.1: Rock is not a monkey.\nAnswer: B. No.\n\nAlso,\n\nPremise 6.1: Rock is not a bird.\nPremise 6.2: All birds fly.\nPremise 6.3: If something can fly, then it has wings.\nConclusion 6: Rock doesn't fly.\nPremise 7.1: Rock doesn't fly.\nPremise 7.2: All monkeys are animals and animals breathe.\nPremise 7.3: Rock doesn't breathe.\nConclusion 7: Rock is not a monkey.\nPremise 8.1: Rock is not a monkey.\nAnswer: B. No.\n\nAll the reasoning paths lead to the same conclusion, Rock is not a monkey.", "logic_premises": "[[(0→1), (2→3)], [(6→(7⊻8)), (3∧4)], [0, (b→c), (d→e), (5∧6), ((7∧8)→9)], [0, 1, (7→8), (9→a)], [0, ((7→8)∧(9→a)), 5]]", "logic_conclusion": "[(4→5), 5, a, 6, 6]", "correspondance": [{"0": "X is a mammal .", "1": "X is an animal .", "2": "X is a monkey .", "3": "X is a mammal .", "4": "X is a monkey .", "5": "X is an animal ."}, {"0": "X is An animal", "1": "X is a monkey .", "2": "X is a bird .", "3": "Rock is not a fly .", "4": "Rock is not a bird .", "5": "Rock is not a monkey .", "6": "Rock is An animal", "7": "Rock is a monkey .", "8": "Rock is a bird ."}, {"0": "Rock is not a monkey .", "1": "X is a monkey .", "2": "X is an animal .", "3": "X is an Animal .", "4": "X breathes .", "5": "Rock is not a fly .", "6": "Rock is not a bird .", "7": "Rock is not a fly .", "8": "Rock is not a bird .", "9": "Rock neither flies nor breathes .", "a": "Rock is not a monkey .", "b": "Rock is a monkey .", "c": "Rock is an animal .", "d": "Rock is an Animal .", "e": "Rock breathes ."}, {"0": "Rock is not a monkey .", "1": "Rock is not a bird .", "2": "X is a bird .", "3": "X flies .", "4": "X can fly .", "5": "X has wings .", "6": "Rock does n't fly .", "7": "Rock is a bird .", "8": "Rock flies .", "9": "Rock can fly .", "a": "Rock has wings ."}, {"0": "rock does n't fly .", "1": "X is a monkey .", "2": "X is an animal .", "3": "X is an animal .", "4": "X breathes .", "5": "rock does n't breathe .", "6": "rock is not a monkey .", "7": "Rock is a monkey .", "8": "Rock is an animal .", "9": "Rock is an animal .", "a": "Rock breathes ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["2"], "1": ["5"]}, {"8": ["(¬4)"], "4": ["(¬8)"], "5": ["(¬7)"]}, {"5": ["7"], "c": ["d"], "6": ["8"], "a": ["0"], "0": ["a"], "(¬a)": ["b"], "(¬b)": ["0"], "(¬0)": ["b"]}, {"(¬7)": ["1"], "(¬1)": ["7"]}, {"(¬6)": ["7"]}], "predicted_steps": [true, false, true, false, false]}
{"text": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rock has wings?", "id": "126", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All mammals are animals.\nPremise 1.2: All monkeys are mammals.\nPremise 1.3: An animal is either a monkey or a bird.\nPremise 1.4: All birds fly.\nPremise 1.5: If something can fly, then it has wings.\nPremise 2.1: Rock is neither a fly nor a bird.\nPremise 2.2: Therefore, Rock neither flies nor breathes.\nConclusion 1: Rock is not an animal.\nConclusion 2: Rock is not a monkey, a mammal, or a bird.\nConclusion 3: Rock cannot fly.\nPremise 3.1: If something can fly, then it has wings.\nConclusion 4: Rock does not have wings.\nAnswer: B. No.", "logic_premises": "[[(f→g), (h→i), (j→(k⊻l)), (m→n), (o→p), (b∧c), d], [(0→1)]]", "logic_conclusion": "[e, 2]", "correspondance": [{"0": "X is a mammal .", "1": "X is an animal .", "2": "X is a monkey .", "3": "X is a mammal .", "4": "X is An animal", "5": "X is a monkey .", "6": "X is a bird .", "7": "X is a bird .", "8": "X flies .", "9": "X can fly .", "a": "X has wings .", "b": "Rock is not a fly .", "c": "Rock is not a bird .", "d": "Therefore , Rock neither flies nor breathes .", "e": "Rock is not an animal .", "f": "Rock is a mammal .", "g": "Rock is an animal .", "h": "Rock is a monkey .", "i": "Rock is a mammal .", "j": "Rock is An animal", "k": "Rock is a monkey .", "l": "Rock is a bird .", "m": "Rock is a bird .", "n": "Rock flies .", "o": "Rock can fly .", "p": "Rock has wings ."}, {"0": "X can fly .", "1": "X has wings .", "2": "Rock does not have wings ."}], "errors": [[]], "entailments_dict": [{"k": ["h"], "i": ["f"], "l": ["m", "(¬c)"], "c": ["(¬l)"], "e": ["(¬g)"], "(¬m)": ["c"], "(¬c)": ["m"]}, {}], "predicted_steps": [false, false]}
{"text": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rock does not have wings?", "id": "127", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All mammals are animals.\nPremise 1.2: All monkeys are mammals.\nPremise 1.3: An animal is either a monkey or a bird.\nPremise 1.4: All birds fly.\nPremise 1.5: If something can fly, then it has wings.\nPremise 2.1: Rock is neither a fly nor a bird.\nPremise 2.2: Therefore, Rock does not fly.\nPremise 2.3: If Rock does not fly, then Rock does not have wings.\nConclusion: Rock does not have wings.\nAnswer: A. Yes.", "logic_premises": "[[(h→i), (j→k), (l→(m⊻n)), (o→p), (q→r), (b∧c), d, (e→f)]]", "logic_conclusion": "[g]", "correspondance": [{"0": "X is a mammal .", "1": "X is an animal .", "2": "X is a monkey .", "3": "X is a mammal .", "4": "X is An animal", "5": "X is a monkey .", "6": "X is a bird .", "7": "X is a bird .", "8": "X flies .", "9": "X can fly .", "a": "X has wings .", "b": "Rock is not a fly .", "c": "Rock is not a bird .", "d": "Therefore , Rock does not fly .", "e": "Rock does not fly .", "f": "Rock does not have wings .", "g": "Rock does not have wings .", "h": "Rock is a mammal .", "i": "Rock is an animal .", "j": "Rock is a monkey .", "k": "Rock is a mammal .", "l": "Rock is An animal", "m": "Rock is a monkey .", "n": "Rock is a bird .", "o": "Rock is a bird .", "p": "Rock flies .", "q": "Rock can fly .", "r": "Rock has wings ."}], "errors": [[]], "entailments_dict": [{"k": ["h"], "n": ["o", "(¬c)"], "m": ["j"], "f": ["g"], "c": ["(¬n)"], "(¬o)": ["c"], "(¬c)": ["o"]}], "predicted_steps": [false]}
{"text": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that John has a wedding that is well-attended?", "id": "128", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nPremise 1.2: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nPremise 2.1: Some weddings in July are well-attended.\nPremise 2.2: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nConclusion 2: If John has a wedding that is well-attended, then John has a wedding in July and does not travel to Paris for their honeymoon.\nPremise 3.1: John has a wedding that is well-attended.\nConclusion 3: John has a wedding in July and does not travel to Paris for their honeymoon.\nPremise 4.1: John has a wedding in July and does not travel to Paris for their honeymoon.\nPremise 4.2: Some weddings in July are well-attended.\nConclusion 4: John's wedding is well-attended.\nAnswer: A. Yes.\n\nNote: The conclusion is based on the premises, but the passage does not explicitly state that John's wedding is well-attended. The answer is uncertain based on the information provided.", "logic_premises": "[[(0→(1∧2)), (3→4), 5, ((b→c)∪((d→e)∪(f→g)))], [0], [(0∧1), 2]]", "logic_conclusion": "[(8→(9∧a)), (1∧2), 3]", "correspondance": [{"0": "John has at least one child .", "1": "John does not travel to Paris for John 's honeymoon .", "2": "John does not have a wedding .", "3": "John has a wedding that is well - attended .", "4": "John has a wedding in July or , if not , then John travels to Paris for their honeymoon .", "5": "Some weddings in July are well - attended .", "6": "X is a wedding that occurs in July .", "7": "X belongs to people who travels to Paris for their honeymoon .", "8": "John has a wedding that is well - attended .", "9": "John has a wedding in July .", "a": "John does not travel to Paris for their honeymoon .", "b": "John is a wedding that occurs in July .", "c": "John belongs to people who travels to Paris for their honeymoon .", "d": "Paris is a wedding that occurs in July .", "e": "Paris belongs to people who travels to Paris for their honeymoon .", "f": "July is a wedding that occurs in July .", "g": "July belongs to people who travels to Paris for their honeymoon ."}, {"0": "John has a wedding that is well - attended .", "1": "John has a wedding in July .", "2": "John does not travel to Paris for their honeymoon ."}, {"0": "John has a wedding in July .", "1": "John does not travel to Paris for their honeymoon .", "2": "Some weddings in July are well - attended .", "3": "John 's wedding is well - attended ."}], "errors": [[]], "entailments_dict": [{"8": ["3"]}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that John does not have a wedding that is well-attended?", "id": "129", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All people who have a wedding have at least one child.\nPremise 1.2: If John has at least one child, then John does not have a wedding.\nConclusion 1: If John has at least one child, then John does not have a wedding that is well-attended.\nPremise 2.1: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nPremise 2.2: Some weddings in July are well-attended.\nConclusion 2: John's well-attended wedding, if he has one, would be in July.\nPremise 3.1: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nPremise 3.2: John does not travel to Paris for his honeymoon.\nConclusion 3: If John has a well-attended wedding, it would be in July.\nPremise 4.1: All people who travel to Paris for their honeymoon are people who have a wedding.\nPremise 4.2: John does not travel to Paris for his honeymoon.\nConclusion 4: John has a wedding.\nPremise 5.1: John has a wedding.\nPremise 5.2: Some weddings in July are well-attended.\nConclusion 5: John's wedding could be well-attended.\nAnswer: C. Uncertain.\n\nThe conclusion is uncertain because the passage does not explicitly state that John's wedding is not well-attended, nor does it provide enough information to definitively conclude that it is.", "logic_premises": "[[(6→7), (2→3)], [((4→5)∪((6→7)∪(8→9))), 2], [(0→1), 2], [((4→5)∪(6→7)), 2], [0, 1]]", "logic_conclusion": "[(4→5), 3, (3→4), 3, 2]", "correspondance": [{"0": "X is a person who has a wedding .", "1": "X has at least one child .", "2": "John has at least one child .", "3": "John does not have a wedding .", "4": "John has at least one child .", "5": "John does not have a wedding that is well - attended .", "6": "John is a person who has a wedding .", "7": "John has at least one child ."}, {"0": "X is a wedding that occurs in July .", "1": "X belongs to people who travels to Paris for their honeymoon .", "2": "Some weddings in July are well - attended .", "3": "John 's 's well - attended wedding , if John 's has one , would be in July .", "4": "Johns well-attended wedding is a wedding that occurs in July .", "5": "Johns well-attended wedding belongs to people who travels to Paris for their honeymoon .", "6": "Paris is a wedding that occurs in July .", "7": "Paris belongs to people who travels to Paris for their honeymoon .", "8": "July is a wedding that occurs in July .", "9": "July belongs to people who travels to Paris for their honeymoon ."}, {"0": "John has a wedding that is well - attended .", "1": "John has a wedding in July or , if not , then John travels to Paris for their honeymoon .", "2": "John does not travel to Paris for John 's honeymoon .", "3": "John has a well - attended wedding .", "4": "a well - attended wedding would be in July ."}, {"0": "X is a person who travels to Paris for their honeymoon .", "1": "X is a people who has a wedding .", "2": "John does not travel to Paris for John 's honeymoon .", "3": "John has a wedding .", "4": "John is a person who travels to Paris for their honeymoon .", "5": "John is a people who has a wedding .", "6": "Paris is a person who travels to Paris for their honeymoon .", "7": "Paris is a people who has a wedding ."}, {"0": "John has a wedding .", "1": "Some weddings in July are well - attended .", "2": "John 's wedding could be well - attended ."}], "errors": [[]], "entailments_dict": [{"7": ["2"], "4": ["2"]}, {}, {}, {}, {}], "predicted_steps": [false, false, false, false, false]}
{"text": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that John has at least one child?", "id": "130", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nPremise 1.2: John has a wedding that is well-attended.\nPremise 1.3: Some weddings in July are well-attended.\nPremise 1.4: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nConclusion 1: John does not have a wedding in July.\nPremise 2.1: All people who have a wedding are people who have at least one child.\nPremise 2.2: John has a wedding that is well-attended.\nConclusion 2: John has at least one child.\nPremise 3.1: Conclusion 2 is not true.\nAnswer: B. No.\n\nNote: The conclusion that John has at least one child is not supported by the premises, as it contradicts the information that if John has at least one child, then John does not have a wedding.", "logic_premises": "[[(0→(1∧2)), 3, 4, ((8→9)∪((a→b)∪(c→d)))], [(4→5), 2]]", "logic_conclusion": "[7, 3]", "correspondance": [{"0": "John has at least one child .", "1": "John does not travel to Paris for John 's honeymoon .", "2": "John does not have a wedding .", "3": "John has a wedding that is well - attended .", "4": "Some weddings in July are well - attended .", "5": "X is a wedding that occurs in July .", "6": "X belongs to people who travels to Paris for their honeymoon .", "7": "John does not have a wedding in July .", "8": "John is a wedding that occurs in July .", "9": "John belongs to people who travels to Paris for their honeymoon .", "a": "Paris is a wedding that occurs in July .", "b": "Paris belongs to people who travels to Paris for their honeymoon .", "c": "July is a wedding that occurs in July .", "d": "July belongs to people who travels to Paris for their honeymoon ."}, {"0": "X is a person who has a wedding .", "1": "X is a people who has at least one child .", "2": "John has a wedding that is well - attended .", "3": "John has at least one child .", "4": "John is a person who has a wedding .", "5": "John is a people who has at least one child ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon?", "id": "131", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All people who have a wedding are people who have at least one child.\nPremise 1.2: If John has at least one child, then John does not have a wedding.\nConclusion 1: John does not have a wedding.\nPremise 2.1: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nPremise 2.2: John does not have a wedding.\nConclusion 2: John does not have a well-attended wedding.\nPremise 3.1: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nPremise 3.2: Some weddings in July are well-attended.\nPremise 3.3: John does not have a well-attended wedding.\nConclusion 3: John does not travel to Paris for his honeymoon.\nPremise 4.1: John does not have a wedding.\nPremise 4.2: John does not travel to Paris for his honeymoon.\nAnswer: A. Yes.", "logic_premises": "[[(5→6), (2→3)], [(0→1), 2], [((5→6)∪((7→8)∪(9→a))), 2, 3]]", "logic_conclusion": "[4, 3, 4]", "correspondance": [{"0": "X is a person who has a wedding .", "1": "X is a people who has at least one child .", "2": "John has at least one child .", "3": "John does not have a wedding .", "4": "John does not have a wedding .", "5": "John is a person who has a wedding .", "6": "John is a people who has at least one child ."}, {"0": "John has a wedding that is well - attended .", "1": "John has a wedding in July or , if not , then John travels to Paris for their honeymoon .", "2": "John does not have a wedding .", "3": "John does not have a well - attended wedding ."}, {"0": "X is a wedding that occurs in July .", "1": "X belongs to people who travels to Paris for their honeymoon .", "2": "Some weddings in July are well - attended .", "3": "John does not have a well - attended wedding .", "4": "John does not travel to Paris for John 's honeymoon .", "5": "John is a wedding that occurs in July .", "6": "John belongs to people who travels to Paris for their honeymoon .", "7": "Paris is a wedding that occurs in July .", "8": "Paris belongs to people who travels to Paris for their honeymoon .", "9": "July is a wedding that occurs in July .", "a": "July belongs to people who travels to Paris for their honeymoon ."}], "errors": [[]], "entailments_dict": [{"3": ["4"]}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Platypus are mammals with no teeth?", "id": "132", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Some mammals have teeth.\nPremise 1.2: Platypus have no teeth.\nPremise 1.3: Platypus are mammals.\nPremise 1.4: Humans have teeth.\nConclusion 1: Platypus are a type of mammal with no teeth.\nPremise 2.1: Platypus are a type of mammal with no teeth.\nAnswer: A. Yes.\n\nNote: The answer is directly derived from the passage, and no additional reasoning steps are needed.", "logic_premises": "[[0, (8→9), 3, (a→b)]]", "logic_conclusion": "[(c→d)]", "correspondance": [{"0": "Some mammals have teeth .", "1": "X is a tooth .", "2": "Platypus does not have X .", "3": "Platypus are mammals .", "4": "X is a Human .", "5": "X has teeth .", "6": "X is a type of mammal with a tooth .", "7": "Platypus is not X .", "8": "Platypus is a tooth .", "9": "Platypus does not have Platypus .", "a": "Platypus is a Human .", "b": "Platypus has teeth .", "c": "Platypus is a type of mammal with a tooth .", "d": "Platypus is not Platypus ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Platypus are reptiles?", "id": "133", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Some mammals have teeth.\nPremise 1.2: Platypus have no teeth.\nPremise 1.3: Platypus are mammals.\nPremise 2.1: Humans have teeth.\nConclusion 1: Platypus are not reptiles.\nConclusion 2: Platypus are mammals.\nPremise 3.1: Mammals are not reptiles.\nConclusion 3: Platypus are not reptiles.\nAnswer: B. No.", "logic_premises": "[[0, (8→9), 3, (a→b)], [(0→1)]]", "logic_conclusion": "[(c→d), (2→3)]", "correspondance": [{"0": "Some mammals have teeth .", "1": "X is a tooth .", "2": "Platypus does not have X .", "3": "Platypus are mammals .", "4": "X is a Human .", "5": "X has teeth .", "6": "X is a Platypus .", "7": "X is not a reptile .", "8": "Platypus is a tooth .", "9": "Platypus does not have Platypus .", "a": "Platypus is a Human .", "b": "Platypus has teeth .", "c": "Platypus is a Platypus .", "d": "Platypus is not a reptile ."}, {"0": "X is a Mammal .", "1": "X is not a reptile .", "2": "X is a Platypus .", "3": "X is not a reptile ."}], "errors": [[]], "entailments_dict": [{}, {"1": ["3"]}], "predicted_steps": [false, false]}
{"text": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Humans are mammals?", "id": "134", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Some mammals have teeth.\nPremise 1.2: Platypus are mammals.\nPremise 1.3: Platypus have no teeth.\nPremise 2.1: Humans have teeth.\nPremise 2.2: Some mammals have teeth.\nPremise 2.3: Platypus are mammals.\nPremise 2.4: Platypus have no teeth.\nConclusion: Humans are not the same as platypus.\nAnswer: A. Yes.\n\nExplanation:\n\n1. The passage states that some mammals have teeth and platypus are mammals that have no teeth.\n2. It also states that humans have teeth.\n3. Since humans have teeth, they are mammals that have teeth, unlike platypus.\n4. Therefore, it is true that humans are mammals.", "logic_premises": "[[0, 1, (c→d), (e→f), 6, 7, (g→h)]]", "logic_conclusion": "[(i→j)]", "correspondance": [{"0": "Some mammals have teeth .", "1": "Platypus are mammals .", "2": "X is a tooth .", "3": "Platypus does not have X .", "4": "X is a Human .", "5": "X has teeth .", "6": "Some mammals have teeth .", "7": "Platypus are mammals .", "8": "X is a tooth .", "9": "Platypus does not have X .", "a": "X is a Human .", "b": "X is not the same as platypus .", "c": "Platypus is a tooth .", "d": "Platypus does not have Platypus .", "e": "Platypus is a Human .", "f": "Platypus has teeth .", "g": "Platypus is a tooth .", "h": "Platypus does not have Platypus .", "i": "Platypus is a Human .", "j": "Platypus is not the same as platypus ."}], "errors": [[]], "entailments_dict": [{"7": ["1"], "0": ["6"], "6": ["0"], "1": ["7"], "i": ["e"]}], "predicted_steps": [false]}
{"text": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Space sucks?", "id": "135", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Vacuums suck.\nPremise 1.2: Space is a vacuum.\nConclusion 1: Space sucks.\nPremise 2.1: Plungers suck.\nPremise 2.2: A duster is a household appliance that doesn't suck.\nConclusion 2: Space is not a plunger or a duster.\nPremise 3.1: Space sucks.\nAnswer: A. Yes.\n\nNote: The question asks if space \"sucks\" in the same way that the objects mentioned in the passage suck, which is as a vacuum. The passage does not imply that \"sucks\" means something negative, but rather a physical property of vacuum.", "logic_premises": "[[(0→1), 2], [(0→1), (2→3)]]", "logic_conclusion": "[3, (4∨5)]", "correspondance": [{"0": "X is a Vacuum .", "1": "X sucks .", "2": "Space is a vacuum .", "3": "Space sucks ."}, {"0": "X is a Plunger .", "1": "X sucks .", "2": "X is A duster", "3": "X is a household appliance that does n't suck .", "4": "Space is not a plunger .", "5": "Space is not a duster ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Space is a vampire?", "id": "136", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Plungers suck, Vacuums suck, Vampires suck.\nPremise 1.2: Space is a vacuum.\nPremise 1.3: A duster is a household appliance that doesn't suck.\nConclusion 1: Space is not a plunger, Space is not a vacuum cleaner, Space is not a vampire.\nPremise 2.1: Space is a vacuum.\nPremise 2.2: Conclusion 1: Space is not a vampire.\nAnswer: B. No.\n\nExplanation:\n\n* The passage states that plungers, vacuums, and vampires suck. Space is a vacuum, but it is not a plunger or a vacuum cleaner.\n* The passage also states that space is not a household appliance that sucks.\n* The passage does not provide any information about vampires other than that they suck.\n* Therefore, it is not true that space is a vampire.", "logic_premises": "[[((c→d)∧((e→f)∧(g→h))), 6, (i→j)]]", "logic_conclusion": "[(9∧(a∧b))]", "correspondance": [{"0": "X is a Plunger .", "1": "X sucks .", "2": "X is a Vacuum .", "3": "X sucks .", "4": "X is a Vampire .", "5": "X sucks .", "6": "Space is a vacuum .", "7": "X is A duster", "8": "X is a household appliance that does n't suck .", "9": "Space is not a plunger .", "a": "Space is not a vacuum cleaner .", "b": "Space is not a vampire .", "c": "Space is a Plunger .", "d": "Space sucks .", "e": "Space is a Vacuum .", "f": "Space sucks .", "g": "Space is a Vampire .", "h": "Space sucks .", "i": "Space is A duster", "j": "Space is a household appliance that does n't suck ."}], "errors": [[]], "entailments_dict": [{"6": ["e"], "(¬9)": ["c"], "(¬b)": ["g"]}], "predicted_steps": [false]}
{"text": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If something is a household appliance, it sucks?", "id": "137", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Plungers, vacuums, and vampires suck.\nPremise 1.2: Space is a vacuum.\nPremise 1.3: A duster is a household appliance that doesn't suck.\nConclusion 1: Not all things that suck are household appliances.\nPremise 2.1: Not all things that suck are household appliances.\nPremise 2.2: A duster is a household appliance that doesn't suck.\nConclusion 2: Not all household appliances suck.\nPremise 3.1: Not all household appliances suck.\nAnswer: B. No.\n\nNote: The conclusion is based on the premises, which state that a duster is a household appliance that doesn't suck, and that not all things that suck are household appliances. Therefore, it is not true that if something is a household appliance, it sucks.", "logic_premises": "[[((0∧(1∧2))→3), 4, (5→6)], [0, (1→2)]]", "logic_conclusion": "[7, 3]", "correspondance": [{"0": "X is a Plunger .", "1": "X is a vacuum .", "2": "X is a vampire .", "3": "X sucks .", "4": "Space is a vacuum .", "5": "X is A duster", "6": "X is a household appliance that does n't suck .", "7": "Not all things that suck are household appliances ."}, {"0": "Not all things that suck are household appliances .", "1": "X is A duster", "2": "X is a household appliance that does n't suck .", "3": "Not all household appliances suck ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Supervised learning is used to train the state-of-the-art text summarization model?", "id": "138", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\nPremise 1.2: The state-of-the-art text summarization model is trained with machine learning algorithms.\nPremise 1.3: Reinforcement learning is not used to train the state-of-the-art text summarization model.\nPremise 1.4: The Machine Learning algorithm for training text summarization model requires labelled data.\nPremise 2.1: Unsupervised learning doesn't require labelled data.\nConclusion 1: The state-of-the-art text summarization model is not trained using unsupervised learning.\nConclusion 2: The state-of-the-art text summarization model is not trained using reinforcement learning.\nConclusion 3: The state-of-the-art text summarization model is trained using supervised learning.\nAnswer: A. Yes.", "logic_premises": "[[(0∧(1∧2)), 3, 4, 5, 6]]", "logic_conclusion": "[7]", "correspondance": [{"0": "Machine Learning algorithms can be categorized as supervised learning .", "1": "Machine Learning algorithms can be categorized as unsupervised learning .", "2": "Machine Learning algorithms can be categorized as reinforcement learning .", "3": "The state - of - the - art text summarization model is trained with machine learning algorithms .", "4": "Reinforcement learning is not used to train The state - of - the - art text summarization model .", "5": "The Machine Learning algorithm for training text summarization model requires labelled data .", "6": "Unsupervised learning does n't require labelled data .", "7": "The state - of - the - art text summarization model is not trained using unsupervised learning ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Unsupervised learning is used to train the state-of-the-art text summarization model?", "id": "139", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Machine Learning algorithms for training text summarization model require labelled data.\nPremise 1.2: The state-of-the-art text summarization model is trained with machine learning algorithms.\nConclusion 1: The state-of-the-art text summarization model requires labelled data.\nPremise 2.1: Unsupervised learning doesn't require labelled data.\nPremise 2.2: Reinforcement learning is not used to train the state-of-the-art text summarization model.\nConclusion 2: The state-of-the-art text summarization model is not trained with unsupervised learning.\nPremise 3.1: The state-of-the-art text summarization model is not trained with unsupervised learning.\nAnswer: B. No.\n\nNote: The conclusion 1 is derived from premise 1.1 and 1.2, and conclusion 2 is derived from premise 1.1, 1.2, 2.1 and 2.2. Conclusion 2 is then used as a premise to reach the final answer.", "logic_premises": "[[(4→5), 2], [0, 1]]", "logic_conclusion": "[3, 2]", "correspondance": [{"0": "X is a Machine Learning algorithm for training text summarization model .", "1": "X requires labelled data .", "2": "The state - of - the - art text summarization model is trained with machine learning algorithms .", "3": "The state - of - the - art text summarization model requires labelled data .", "4": "The state-of-the-art text summarization model is a Machine Learning algorithm for training text summarization model .", "5": "The state-of-the-art text summarization model requires labelled data ."}, {"0": "Unsupervised learning does n't require labelled data .", "1": "Reinforcement learning is not used to train the state - of - the - art text summarization model .", "2": "the state - of - the - art text summarization model is not trained with unsupervised learning ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ben is loved by children?", "id": "140", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If a cartoon character is from The Simpsons, then it is loved by children.\nPremise 1.2: Ben is either from The Simpsons or funny.\nConclusion 1: Either Ben is from The Simpsons or Ben is funny.\n\nPremise 2.1: If a cartoon character is loved by children, then it is funny.\nPremise 2.2: Ben is either from The Simpsons or funny.\nConclusion 2: Either Ben is loved by children or Ben is from The Simpsons.\n\nPremise 3.1: Ben is loved by children or Ben is from The Simpsons.\nPremise 3.2: If a cartoon character is from The Simpsons, then it is loved by children.\nConclusion 3: Ben is loved by children.\nAnswer: A. Yes.", "logic_premises": "[[(((6∧7)→8)∪((9∧a)→b)), 3], [(((6∧7)→8)∪((9∧a)→b)), 3], [(0∨1), (((6∧7)→8)∪((9∧a)→b))]]", "logic_conclusion": "[(4∨5), (4∨5), 5]", "correspondance": [{"0": "X is a cartoon character", "1": "X is from The Simpsons .", "2": "X is loved by children .", "3": "Ben is either from The Simpsons or funny .", "4": "Either Ben is from The Simpsons .", "5": "Either Ben is funny .", "6": "Ben is a cartoon character", "7": "Ben is from The Simpsons .", "8": "Ben is loved by children .", "9": "The Simpsons is a cartoon character", "a": "The Simpsons is from The Simpsons .", "b": "The Simpsons is loved by children ."}, {"0": "X is a cartoon character", "1": "X is loved by children .", "2": "X is funny .", "3": "Ben is either from The Simpsons or funny .", "4": "Either Ben is loved by children .", "5": "Either Ben is from The Simpsons .", "6": "Ben is a cartoon character", "7": "Ben is loved by children .", "8": "Ben is funny .", "9": "The Simpsons is a cartoon character", "a": "The Simpsons is loved by children .", "b": "The Simpsons is funny ."}, {"0": "Ben is loved by children .", "1": "Ben is from The Simpsons .", "2": "X is a cartoon character", "3": "X is from The Simpsons .", "4": "X is loved by children .", "5": "Ben is loved by children .", "6": "Ben is a cartoon character", "7": "Ben is from The Simpsons .", "8": "Ben is loved by children .", "9": "The Simpsons is a cartoon character", "a": "The Simpsons is from The Simpsons .", "b": "The Simpsons is loved by children ."}], "errors": [[]], "entailments_dict": [{}, {}, {"1": ["7"], "8": ["0", "5"], "5": ["0"], "0": ["5"]}], "predicted_steps": [false, false, false]}
{"text": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ben is ugly or yellow?", "id": "141", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If a cartoon character is funny, then it is popular.\nPremise 1.2: If a cartoon character is ugly, then it is not popular.\nPremise 1.3: If a cartoon character is loved by children, then it is funny.\nPremise 1.4: If a cartoon character is from The Simpsons, then it is loved by children.\nPremise 1.5: If a cartoon character is yellow, then it is from The Simpsons.\nPremise 2.1: Ben is either from The Simpsons or funny.\nPremise 2.2: Ben is not ugly, therefore Ben is not not popular.\nPremise 2.3: Ben is not confirmed to be funny or popular.\nPremise 2.4: Ben is not confirmed to be yellow or from The Simpsons.\nConclusion 1: Ben's popularity status is uncertain.\nPremise 3.1: Ben is not confirmed to be ugly.\nPremise 3.2: Ben is not confirmed to be yellow.\nConclusion 2: Ben's ugliness or yellowness status is uncertain.\nAnswer: C. Uncertain.\n\nNote: The question asks if it is true that Ben is ugly or yellow, but the passage does not provide enough information to confirm this. Therefore, the answer is uncertain.", "logic_premises": "[[(((m∧n)→o)∪(((p∧q)→r)∪((s∧t)→u))), (((v∧w)→x)∪(((y∧z)→A)∪((B∧C)→D))), (((E∧F)→G)∪(((H∧I)→J)∪((K∧L)→M))), (((N∧O)→P)∪(((Q∧R)→S)∪((T∧U)→V))), (((W∧X)→Y)∪(((Z∧!)→\")∪((#∧$)→%))), f, (g∧h), (i∨j), k], [0, 1]]", "logic_conclusion": "[l, 2]", "correspondance": [{"0": "X is a cartoon character", "1": "X is funny .", "2": "X is popular .", "3": "X is a cartoon character", "4": "X is ugly .", "5": "X is not popular .", "6": "X is a cartoon character", "7": "X is loved by children .", "8": "X is funny .", "9": "X is a cartoon character", "a": "X is from The Simpsons .", "b": "X is loved by children .", "c": "X is a cartoon character", "d": "X is yellow .", "e": "X is from The Simpsons .", "f": "Ben is either from The Simpsons or funny .", "g": "Ben is not ugly .", "h": "therefore Ben is not not popular .", "i": "Ben is not confirmed to be funny .", "j": "Ben is not confirmed to be popular .", "k": "Ben is not confirmed to be yellow or from The Simpsons .", "l": "Ben 's popularity status is uncertain .", "m": "Ben is a cartoon character", "n": "Ben is funny .", "o": "Ben is popular .", "p": "The Simpsons is a cartoon character", "q": "The Simpsons is funny .", "r": "The Simpsons is popular .", "s": "Bens popularity status is a cartoon character", "t": "Bens popularity status is funny .", "u": "Bens popularity status is popular .", "v": "Ben is a cartoon character", "w": "Ben is ugly .", "x": "Ben is not popular .", "y": "The Simpsons is a cartoon character", "z": "The Simpsons is ugly .", "A": "The Simpsons is not popular .", "B": "Bens popularity status is a cartoon character", "C": "Bens popularity status is ugly .", "D": "Bens popularity status is not popular .", "E": "Ben is a cartoon character", "F": "Ben is loved by children .", "G": "Ben is funny .", "H": "The Simpsons is a cartoon character", "I": "The Simpsons is loved by children .", "J": "The Simpsons is funny .", "K": "Bens popularity status is a cartoon character", "L": "Bens popularity status is loved by children .", "M": "Bens popularity status is funny .", "N": "Ben is a cartoon character", "O": "Ben is from The Simpsons .", "P": "Ben is loved by children .", "Q": "The Simpsons is a cartoon character", "R": "The Simpsons is from The Simpsons .", "S": "The Simpsons is loved by children .", "T": "Bens popularity status is a cartoon character", "U": "Bens popularity status is from The Simpsons .", "V": "Bens popularity status is loved by children .", "W": "Ben is a cartoon character", "X": "Ben is yellow .", "Y": "Ben is from The Simpsons .", "Z": "The Simpsons is a cartoon character", "!": "The Simpsons is yellow .", "\"": "The Simpsons is from The Simpsons .", "#": "Bens popularity status is a cartoon character", "$": "Bens popularity status is yellow .", "%": "Bens popularity status is from The Simpsons ."}, {"0": "Ben is not confirmed to be ugly .", "1": "Ben is not confirmed to be yellow .", "2": "Ben 's ugliness or yellowness status is uncertain ."}], "errors": [[]], "entailments_dict": [{"P": ["F"], "V": ["L"], "J": ["q"], "Y": ["O"], "%": ["U"], "S": ["I"], "G": ["n"], "\"": ["R"], "M": ["t"], "o": ["(¬x)"], "A": ["(¬r)"], "u": ["(¬D)"], "r": ["(¬A)"], "D": ["(¬u)"], "x": ["(¬o)"], "(¬g)": ["w"], "(¬w)": ["g"]}, {}], "predicted_steps": [false, false]}
{"text": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ben is either yellow and ugly or neither yellow nor ugly?", "id": "142", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If a cartoon character is from The Simpsons, then it is loved by children.\nPremise 1.2: Ben is either from The Simpsons or funny.\nConclusion 1: Ben is loved by children or Ben is funny.\nPremise 2.1: If a cartoon character is loved by children, then it is funny.\nPremise 2.2: Conclusion 1: Ben is loved by children or Ben is funny.\nConclusion 2: Ben is funny.\nPremise 3.1: If a cartoon character is funny, then it is popular.\nPremise 3.2: Conclusion 2: Ben is funny.\nConclusion 3: Ben is popular.\nPremise 4.1: If a cartoon character is ugly, then it is not popular.\nPremise 4.2: Conclusion 3: Ben is popular.\nConclusion 4: Ben is not ugly.\nPremise 5.1: If a cartoon character is from The Simpsons, then it is yellow.\nPremise 5.2: Ben is either from The Simpsons or funny.\nConclusion 5: Ben is either yellow or funny.\nAnswer: A. Yes.\n\nExplanation:\n\n* From the passage, we know that Ben is either from The Simpsons or funny.\n* If Ben is from The Simpsons, then he is yellow.\n* If Ben is funny, then he is popular.\n* If Ben is popular, then he is not ugly.\n* Therefore, Ben is either yellow and not ugly or not yellow and not ugly.\n* Since Ben is either yellow or funny, and being funny implies being popular, Ben is not ugly.\n* So, Ben is either yellow and ugly or neither yellow nor ugly. But since Ben is not ugly, Ben is neither yellow nor ugly.", "logic_premises": "[[(((6∧7)→8)∪((9∧a)→b)), 3], [((5∧6)→7), 3], [((5∧6)→7), 3], [((5∧6)→7), 3], [(((6∧7)→8)∪((9∧a)→b)), 3]]", "logic_conclusion": "[(4∨5), 4, 4, 4, (4⊻5)]", "correspondance": [{"0": "X is a cartoon character", "1": "X is from The Simpsons .", "2": "X is loved by children .", "3": "Ben is either from The Simpsons or funny .", "4": "Ben is loved by children .", "5": "Ben is funny .", "6": "Ben is a cartoon character", "7": "Ben is from The Simpsons .", "8": "Ben is loved by children .", "9": "The Simpsons is a cartoon character", "a": "The Simpsons is from The Simpsons .", "b": "The Simpsons is loved by children ."}, {"0": "X is a cartoon character", "1": "X is loved by children .", "2": "X is funny .", "3": "Conclusion 1 : Ben is loved by children or Ben is funny .", "4": "Ben is funny .", "5": "Ben is a cartoon character", "6": "Ben is loved by children .", "7": "Ben is funny ."}, {"0": "X is a cartoon character", "1": "X is funny .", "2": "X is popular .", "3": "Conclusion 2 : Ben is funny .", "4": "Ben is popular .", "5": "Ben is a cartoon character", "6": "Ben is funny .", "7": "Ben is popular ."}, {"0": "X is a cartoon character", "1": "X is ugly .", "2": "X is not popular .", "3": "Conclusion 3 : Ben is popular .", "4": "Ben is not ugly .", "5": "Ben is a cartoon character", "6": "Ben is ugly .", "7": "Ben is not popular ."}, {"0": "X is a cartoon character", "1": "X is from The Simpsons .", "2": "X is yellow .", "3": "Ben is either from The Simpsons or funny .", "4": "Ben is yellow .", "5": "Ben is funny .", "6": "Ben is a cartoon character", "7": "Ben is from The Simpsons .", "8": "Ben is yellow .", "9": "The Simpsons is a cartoon character", "a": "The Simpsons is from The Simpsons .", "b": "The Simpsons is yellow ."}], "errors": [[]], "entailments_dict": [{"8": ["4"]}, {"7": ["4"]}, {"7": ["4"]}, {"(¬4)": ["6"]}, {"8": ["4"]}], "predicted_steps": [false, false, false, false, false]}
{"text": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some Heck cattle are artificially selected?", "id": "143", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nPremise 1.2: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nPremise 2.1: Heck cattle are animals.\nPremise 2.2: Aurochs are animals.\nPremise 3.1: Some animals to be bred-back resemble animals that are extinct.\nConclusion 1: Heck cattle are animals that were bred-back through artificial selection.\nConclusion 2: Artificial selection is the deliberate selective breeding of animals.\nConclusion 3: Heck cattle are animals that were artificially selected to resemble aurochs.\nAnswer: A. Yes.", "logic_premises": "[[0, ((a→(2∧b))∪(c→(2∧d))), ((e→f)∪(g→h)), 6, 7]]", "logic_conclusion": "[((i→j)∪(k→l))]", "correspondance": [{"0": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals .", "1": "X is Heck a cattle .", "2": "resembles the aurochs .", "3": "X was bred - back in the 1920s .", "4": "X is a cattle .", "5": "Heck X is an animal .", "6": "the aurochs are animals .", "7": "Some animals to be bred - back resemble animals that are extinct .", "8": "X is Heck a cattle .", "9": "X is an animal that was bred - back through artificial selection .", "a": "the aurochs is Heck a cattle .", "b": "the aurochs was bred - back in the 1920s .", "c": "the deliberate selective breeding of domestic animals is Heck a cattle .", "d": "the deliberate selective breeding of domestic animals was bred - back in the 1920s .", "e": "the aurochs is a cattle .", "f": "Heck the aurochs is an animal .", "g": "the deliberate selective breeding of domestic animals is a cattle .", "h": "Heck the deliberate selective breeding of domestic animals is an animal .", "i": "the aurochs is Heck a cattle .", "j": "the aurochs is an animal that was bred - back through artificial selection .", "k": "the deliberate selective breeding of domestic animals is Heck a cattle .", "l": "the deliberate selective breeding of domestic animals is an animal that was bred - back through artificial selection ."}], "errors": [[]], "entailments_dict": [{"k": ["c"], "i": ["a"]}], "predicted_steps": [false]}
{"text": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Aurochs are extinct?", "id": "144", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nPremise 1.2: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nPremise 1.3: Heck cattle are animals.\nPremise 1.4: Aurochs are animals.\nPremise 1.5: Some animals to be bred-back resemble animals that are extinct.\nConclusion 1: Aurochs are a type of animal that was bred-back.\nPremise 2.1: Aurochs are a type of animal that was bred-back.\nConclusion 2: Aurochs are not extinct.\nPremise 3.1: Aurochs are extinct.\nAnswer: A. Yes.\n\nThe answer is A. Yes, Aurochs are extinct. The passage states that Heck cattle were bred-back to resemble the aurochs, which implies that aurochs are extinct and were recreated through breeding.", "logic_premises": "[[0, ((a→(2∧b))∪(c→(2∧d))), ((e→f)∪(g→h)), 6, 7], [(0→1)]]", "logic_conclusion": "[((i→j)∪(k→l)), (2→3)]", "correspondance": [{"0": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals .", "1": "X is Heck a cattle .", "2": "resembles the aurochs .", "3": "X was bred - back in the 1920s .", "4": "X is a cattle .", "5": "Heck X is an animal .", "6": "the aurochs are animals .", "7": "Some animals to be bred - back resemble animals that are extinct .", "8": "X is an Auroch .", "9": "X is a type of animal that was bred - back .", "a": "the aurochs is Heck a cattle .", "b": "the aurochs was bred - back in the 1920s .", "c": "the deliberate selective breeding of domestic animals is Heck a cattle .", "d": "the deliberate selective breeding of domestic animals was bred - back in the 1920s .", "e": "the aurochs is a cattle .", "f": "Heck the aurochs is an animal .", "g": "the deliberate selective breeding of domestic animals is a cattle .", "h": "Heck the deliberate selective breeding of domestic animals is an animal .", "i": "the aurochs is an Auroch .", "j": "the aurochs is a type of animal that was bred - back .", "k": "the deliberate selective breeding of domestic animals is an Auroch .", "l": "the deliberate selective breeding of domestic animals is a type of animal that was bred - back ."}, {"0": "X is an auroch .", "1": "X is a type of animal that was bred - back .", "2": "X is an auroch .", "3": "X is not extinct ."}], "errors": [[]], "entailments_dict": [{}, {"2": ["0"]}], "predicted_steps": [false, false]}
{"text": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Jerry is young?", "id": "145", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: A person either studies or teaches.\nPremise 1.2: Jerry neither teaches nor is a manager.\nConclusion 1: Jerry does not teach.\nPremise 2.1: Jerry does not teach.\nPremise 2.2: No young person teaches.\nConclusion 2: Jerry is not young.\nPremise 3.1: Jerry is not young.\nAnswer: B. No.\n\nNote: The passage states that \"No young person teaches\" and \"Jerry neither teaches nor is a manager\". Since the passage does not provide any information about Jerry's age, it is not possible to conclude with certainty that Jerry is young. However, based on the information provided, it can be concluded that Jerry is not young.", "logic_premises": "[[0, (1∧2)], [0, (4→5)]]", "logic_conclusion": "[3, 3]", "correspondance": [{"0": "A person either studies or teaches .", "1": "Jerry does not teach .", "2": "Jerry is not a manager .", "3": "Jerry does not teach ."}, {"0": "Jerry does not teach .", "1": "X is a young person .", "2": "X does not teach .", "3": "Jerry is not young .", "4": "Jerry is a young person .", "5": "Jerry does not teach ."}], "errors": [[]], "entailments_dict": [{"3": ["1"], "1": ["3"]}, {"5": ["0"], "(¬3)": ["4"]}], "predicted_steps": [true, false]}
{"text": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Jerry is not young?", "id": "146", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: A person either studies or teaches.\nPremise 1.2: Jerry neither teaches nor is a manager.\nConclusion 1: Jerry does not teach.\nPremise 2.1: A person either studies or teaches.\nPremise 2.2: Jerry does not study.\nConclusion 2: Jerry is not a student.\nPremise 3.1: All students are humans.\nPremise 3.2: Jerry is not a student.\nConclusion 3: Jerry is not a human.\nPremise 4.1: No young person teaches.\nPremise 4.2: Jerry neither teaches nor is a manager.\nConclusion 4: Jerry is not a young person.\nPremise 5.1: Rose is young or a student.\nPremise 5.2: Jerry is not a student.\nConclusion 5: Jerry is not Rose.\nAnswer: A. Yes.", "logic_premises": "[[0, (1∧2)], [0, 1], [(4→5), 2], [(5→6), (2∧3)], [0, 1]]", "logic_conclusion": "[3, 2, 3, 4, 2]", "correspondance": [{"0": "A person either studies or teaches .", "1": "Jerry does not teach .", "2": "Jerry is not a manager .", "3": "Jerry does not teach ."}, {"0": "A person either studies or teaches .", "1": "Jerry does not study .", "2": "Jerry is not a student ."}, {"0": "X is a student .", "1": "X is a human .", "2": "Jerry is not a student .", "3": "Jerry is not a human .", "4": "Jerry is a student .", "5": "Jerry is a human ."}, {"0": "X is a young person .", "1": "X does not teach .", "2": "Jerry does not teach .", "3": "Jerry is not a manager .", "4": "Jerry is not a young person .", "5": "Jerry is a young person .", "6": "Jerry does not teach ."}, {"0": "Rose is young or a student .", "1": "Jerry is not a student .", "2": "Jerry is not Rose ."}], "errors": [[]], "entailments_dict": [{"3": ["1"], "1": ["3"]}, {}, {"3": ["(¬5)"], "(¬2)": ["4"], "(¬4)": ["2"]}, {"6": ["2"], "(¬4)": ["5"]}, {}], "predicted_steps": [true, false, false, false, false]}
{"text": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rose is a human or a manager?", "id": "147", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All students are humans.\nPremise 1.2: A person either studies or teaches.\nPremise 1.3: No young person teaches.\nPremise 1.4: Jerry neither teaches nor is a manager.\nPremise 2.1: Rose is young or a student.\nPremise 2.2: If someone studies, then they are a student.\nPremise 2.3: All students are humans.\nConclusion 1: If Rose is a student, then Rose is a human.\nPremise 3.1: Rose is young.\nPremise 3.2: No young person teaches.\nConclusion 2: Rose doesn't teach.\nPremise 4.1: Rose is young or a student.\nPremise 4.2: Conclusion 2: Rose doesn't teach.\nConclusion 3: Rose is a student.\nConclusion 4: Rose is a human.\nPremise 5.1: Rose is a human.\nAnswer: A. Yes.\n\nNote: The conclusion that Rose is a human is based on the premise that all students are humans and the conclusion that Rose is a student. The premise that a person is either a student or a teacher and the conclusion that Rose doesn't teach, allows us to infer that Rose is a student. And since all students are humans, Rose is a human.", "logic_premises": "[[((e→f)∪(g→h)), 2, ((i→j)∪(k→l)), (5∧6), 7, ((m→n)∪(o→p)), ((q→r)∪(s→t))], [0, (4→5)], [0, 1]]", "logic_conclusion": "[(c→d), 3, 2]", "correspondance": [{"0": "X is a student .", "1": "X is a human .", "2": "A person either studies or teaches .", "3": "X is a young person .", "4": "X does not teach .", "5": "Jerry does not teach .", "6": "Jerry is not a manager .", "7": "Rose is young or a student .", "8": "X studies .", "9": "X are a student .", "a": "X is a student .", "b": "X is a human .", "c": "Rose is a student .", "d": "Rose is a human .", "e": "Rose is a student .", "f": "Rose is a human .", "g": "Jerry is a student .", "h": "Jerry is a human .", "i": "Rose is a young person .", "j": "Rose does not teach .", "k": "Jerry is a young person .", "l": "Jerry does not teach .", "m": "Rose studies .", "n": "Rose are a student .", "o": "Jerry studies .", "p": "Jerry are a student .", "q": "Rose is a student .", "r": "Rose is a human .", "s": "Jerry is a student .", "t": "Jerry is a human ."}, {"0": "Rose is young .", "1": "X is a young person .", "2": "X does not teach .", "3": "Rose does n't teach .", "4": "Rose is a young person .", "5": "Rose does not teach ."}, {"0": "Rose is young or a student .", "1": "Conclusion 2 : Rose does n't teach .", "2": "Rose is a student ."}], "errors": [[]], "entailments_dict": [{"p": ["s", "g"], "l": ["5"], "n": ["e", "q"], "c": ["e", "q"], "f": ["d"], "r": ["d"]}, {"0": ["4"]}, {}], "predicted_steps": [true, false, false]}
{"text": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rose is a human or Jerry is a manager?", "id": "148", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All students are humans.\nPremise 1.2: A person either studies or teaches.\nPremise 1.3: No young person teaches.\nPremise 2.1: Rose is young or a student.\nPremise 2.2: Jerry neither teaches nor is a manager.\nConclusion 1: Rose is a human (if Rose is a student, then she is a human).\nConclusion 2: Jerry is not a manager (if Jerry is neither a teacher nor a manager, then he is not a manager).\nConclusion 3: Rose is a human or Jerry is not a manager.\nAnswer: A. Yes.\n\nNote: The conclusion \"Rose is a human or Jerry is not a manager\" is equivalent to \"Rose is a human or Jerry is a manager\", but the latter is not one of the options. However, the answer \"Yes\" is still correct because the statement \"Rose is a human or Jerry is not a manager\" is true.", "logic_premises": "[[((9→a)∪(b→c)), 2, ((d→e)∪(f→g)), 5, (6∧7)]]", "logic_conclusion": "[8]", "correspondance": [{"0": "X is a student .", "1": "X is a human .", "2": "A person either studies or teaches .", "3": "X is a young person .", "4": "X does not teach .", "5": "Rose is young or a student .", "6": "Jerry does not teach .", "7": "Jerry is not a manager .", "8": "Rose is a human .", "9": "Rose is a student .", "a": "Rose is a human .", "b": "Jerry is a student .", "c": "Jerry is a human .", "d": "Rose is a young person .", "e": "Rose does not teach .", "f": "Jerry is a young person .", "g": "Jerry does not teach ."}], "errors": [[]], "entailments_dict": [{"g": ["6"], "a": ["8"]}], "predicted_steps": [false]}
{"text": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that It is not true that Rose is a student and Jerry is a human?", "id": "149", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If someone studies, then they are a student.\nPremise 1.2: A person either studies or teaches.\nPremise 1.3: No young person teaches.\nPremise 1.4: Jerry neither teaches nor is a manager.\nConclusion 1: Jerry is not a student.\nPremise 2.1: All students are humans.\nPremise 2.2: It is not true that Rose is a student and Jerry is a human.\nAnswer: B. No.\n\nExplanation:\n\n1. From the passage, we can conclude that Jerry is not a student.\n2. Also, from the passage, we can conclude that Jerry is not a manager, and since he is neither a student nor a manager, he cannot be a human.\n3. However, the passage does not explicitly state that Jerry is not a human, so we cannot be certain.\n4. But, the passage also states that \"All students are humans\", and since we know that Jerry is not a student, it does not necessarily mean that Jerry is not a human.\n5. Therefore, the answer is B. No, it is not true that Rose is a student and Jerry is not a human.", "logic_premises": "[[(8→9), 2, (a→b), (5∧6)]]", "logic_conclusion": "[7]", "correspondance": [{"0": "X studies .", "1": "X are a student .", "2": "A person either studies or teaches .", "3": "X is a young person .", "4": "X does not teach .", "5": "Jerry does not teach .", "6": "Jerry is not a manager .", "7": "Jerry is not a student .", "8": "Jerry studies .", "9": "Jerry are a student .", "a": "Jerry is a young person .", "b": "Jerry does not teach ."}], "errors": [[]], "entailments_dict": [{"b": ["5"], "7": ["(¬9)"]}], "predicted_steps": [false]}
{"text": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Neapolitan Chronicles is an English book?", "id": "150", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nPremise 1.2: All of New Vessel Press's published books are in English.\nPremise 2.1: Neapolitan Chronicles is a book published by New Vessel Press.\nPremise 2.2: Neapolitan Chronicles was translated from Italian.\nConclusion 1: Neapolitan Chronicles is a book that was translated into English.\nPremise 3.1: All books published by New Vessel Press are in English.\nPremise 3.2: Neapolitan Chronicles is a book published by New Vessel Press.\nConclusion 2: Neapolitan Chronicles is an English book.\nAnswer: A. Yes.\n\nExplanation:\n\n* From Premise 1.1 and 1.2, we can conclude that New Vessel Press publishes books that are translated into English.\n* From Premise 2.1 and 2.2, we can conclude that Neapolitan Chronicles is a book that was translated from Italian.\n* From Premise 3.1 and 3.2, we can conclude that Neapolitan Chronicles is an English book.\n* Therefore, the answer is A. Yes.", "logic_premises": "[[0, ((6→7)∪((8→9)∪((a→b)∪((c→d)∪(e→f))))), 3, 4], [((4→5)∪((6→7)∪(8→9))), 2]]", "logic_conclusion": "[5, 3]", "correspondance": [{"0": "New Vessel Press is a publishing house which specializes in translating foreign literature into English .", "1": "X is of a New Vessel Press 's published books .", "2": "X is in English .", "3": "Neapolitan Chronicles is a book published by New Vessel Press .", "4": "Neapolitan Chronicles was translated from Italian .", "5": "Neapolitan Chronicles is a book that was translated into English .", "6": "English is of a New Vessel Press 's published books .", "7": "English is in English .", "8": "Neapolitan Chronicles is of a New Vessel Press 's published books .", "9": "Neapolitan Chronicles is in English .", "a": "Italian is of a New Vessel Press 's published books .", "b": "Italian is in English .", "c": "New Vessel Press is of a New Vessel Press 's published books .", "d": "New Vessel Press is in English .", "e": "New Vessel Presss published books is of a New Vessel Press 's published books .", "f": "New Vessel Presss published books is in English ."}, {"0": "X is a book published by New Vessel Press .", "1": "X is in English .", "2": "Neapolitan Chronicles is a book published by New Vessel Press .", "3": "Neapolitan Chronicles is an English book .", "4": "New Vessel Press is a book published by New Vessel Press .", "5": "New Vessel Press is in English .", "6": "English is a book published by New Vessel Press .", "7": "English is in English .", "8": "Neapolitan Chronicles is a book published by New Vessel Press .", "9": "Neapolitan Chronicles is in English ."}], "errors": [[]], "entailments_dict": [{}, {"2": ["8"]}], "predicted_steps": [false, false]}
{"text": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Harry Potter was published by New Vessel Press?", "id": "151", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: New Vessel Press specializes in translating foreign literature into English.\nPremise 1.2: All of New Vessel Press's published books are in English.\nPremise 1.3: Neapolitan Chronicles and Palace of Flies are books published by New Vessel Press.\nPremise 1.4: Neapolitan Chronicles was translated from Italian.\nConclusion 1: New Vessel Press publishes translated books.\nPremise 2.1: Harry Potter was not translated from another language.\nConclusion 2: Harry Potter is not a translated book.\nPremise 3.1: New Vessel Press publishes only translated books.\nPremise 3.2: Harry Potter is not a translated book.\nConclusion 3: Harry Potter is not published by New Vessel Press.\nAnswer: B. No.\n\nExplanation:\n\n* From Premise 1.1 and 1.2, we can conclude that New Vessel Press publishes translated books.\n* From Premise 1.4, we can conclude that Neapolitan Chronicles is a translated book.\n* From Premise 2.1, we can conclude that Harry Potter is not a translated book.\n* From Premise 3.1 and Conclusion 3, we can conclude that Harry Potter is not published by New Vessel Press.", "logic_premises": "[[0, ((7→8)∪((9→a)∪((b→c)∪((d→e)∪((f→g)∪(h→i)))))), (3∧4), 5], [0], [0, 1]]", "logic_conclusion": "[6, 1, 2]", "correspondance": [{"0": "New Vessel Press specializes in translating foreign literature into English .", "1": "X is of a New Vessel Press 's published books .", "2": "X is in English .", "3": "Neapolitan Chronicles are books published by New Vessel Press .", "4": "Palace of Flies are books published by New Vessel Press .", "5": "Neapolitan Chronicles was translated from Italian .", "6": "New Vessel Press publishes translated books .", "7": "English is of a New Vessel Press 's published books .", "8": "English is in English .", "9": "Neapolitan Chronicles is of a New Vessel Press 's published books .", "a": "Neapolitan Chronicles is in English .", "b": "Neapolitan Chronicles and Palace of Flies is of a New Vessel Press 's published books .", "c": "Neapolitan Chronicles and Palace of Flies is in English .", "d": "Italian is of a New Vessel Press 's published books .", "e": "Italian is in English .", "f": "New Vessel Press is of a New Vessel Press 's published books .", "g": "New Vessel Press is in English .", "h": "New Vessel Presss published books is of a New Vessel Press 's published books .", "i": "New Vessel Presss published books is in English ."}, {"0": "Harry Potter was not translated from another language .", "1": "Harry Potter is not a translated book ."}, {"0": "New Vessel Press publishes only translated books .", "1": "Harry Potter is not a translated book .", "2": "Harry Potter is not published by New Vessel Press ."}], "errors": [[]], "entailments_dict": [{}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Palace of Flies was translated from Italian?", "id": "152", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nPremise 1.2: All of New Vessel Press's published books are in English.\nPremise 2.1: Neapolitan Chronicles is a book published by New Vessel Press.\nPremise 2.2: Neapolitan Chronicles was translated from Italian.\nPremise 3.1: Palace of Flies is a book published by New Vessel Press.\nConclusion 1: Palace of Flies was published in English.\nConclusion 2: Palace of Flies was not specifically mentioned to be translated from Italian.\nAnswer: B. No.\n\nExplanation:\n\n* Premise 1.1 and 1.2 establish that New Vessel Press publishes translated works in English.\n* Premise 2.1 and 2.2 establish that Neapolitan Chronicles is a translated work published by New Vessel Press.\n* Premise 3.1 establishes that Palace of Flies is also published by New Vessel Press.\n* Conclusion 1 is drawn from Premise 1.2 and 3.1, that Palace of Flies was published in English.\n* Conclusion 2 is drawn from the lack of information about Palace of Flies being translated from Italian, and the fact that it was published in English.\n* Therefore, the answer is B. No, Palace of Flies was not translated from Italian.", "logic_premises": "[[0, ((7→8)∪((9→a)∪((b→c)∪((d→e)∪((f→g)∪(h→i)))))), 3, 4, 5]]", "logic_conclusion": "[6]", "correspondance": [{"0": "New Vessel Press is a publishing house which specializes in translating foreign literature into English .", "1": "X is of a New Vessel Press 's published books .", "2": "X is in English .", "3": "Neapolitan Chronicles is a book published by New Vessel Press .", "4": "Neapolitan Chronicles was translated from Italian .", "5": "Palace of Flies is a book published by New Vessel Press .", "6": "Palace of Flies was published in English .", "7": "English is of a New Vessel Press 's published books .", "8": "English is in English .", "9": "Palace of Flies is of a New Vessel Press 's published books .", "a": "Palace of Flies is in English .", "b": "Neapolitan Chronicles is of a New Vessel Press 's published books .", "c": "Neapolitan Chronicles is in English .", "d": "Italian is of a New Vessel Press 's published books .", "e": "Italian is in English .", "f": "New Vessel Press is of a New Vessel Press 's published books .", "g": "New Vessel Press is in English .", "h": "New Vessel Presss published books is of a New Vessel Press 's published books .", "i": "New Vessel Presss published books is in English ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Remy visits the office supply store regularly?", "id": "153", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: All people who work regularly and often at home visit the office supply store regularly.\nPremise 1.2: Remy works regularly and often at home.\nConclusion 1: Remy visits the office supply store regularly.\nPremise 2.1: Remy visits the office supply store regularly.\nAnswer: A. Yes.\n\nAlternative Reasoning:\nPremise 2.1: If Remy spends their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nPremise 2.2: Remy goes to bed late and wakes up every day after noon.\nPremise 2.3: Remy does not spend their free time tidying and organizing the spaces in their home.\nConclusion 2: Remy does not visit the office supply store regularly.\nPremise 3.1: Remy does not visit the office supply store regularly.\nAnswer: B. No.\n\nThe passage does not provide enough information to determine whether Remy visits the office supply store regularly, as it presents two conflicting scenarios. Therefore, the answer is uncertain.\n\nAnswer: C. Uncertain.", "logic_premises": "[[((4→5)∪(6→7)), 2], [0, (1→(2∧3)), ((9→(5∧a))∪((b→(5∧c))∪(d→(5∧e)))), 7]]", "logic_conclusion": "[3, 8]", "correspondance": [{"0": "X is a person who works regularly and often at home .", "1": "X visits the office supply store regularly .", "2": "Remy works regularly and often at home .", "3": "Remy visits the office supply store regularly .", "4": "Remy is a person who works regularly and often at home .", "5": "Remy visits the office supply store regularly .", "6": "the office supply store is a person who works regularly and often at home .", "7": "the office supply store visits the office supply store regularly ."}, {"0": "Remy visits the office supply store regularly .", "1": "Remy spends Remy 's free time tidying and organizing the spaces in Remy 's home .", "2": "Remy do not go to bed late .", "3": "Remy do not wake up every day after noon .", "4": "X is a day .", "5": "Remy goes to bed late .", "6": "Remy wakes up X after noon .", "7": "Remy does not spend Remy 's free time tidying and organizing the spaces in Remy 's home .", "8": "Remy does not visit the office supply store regularly .", "9": "the spaces in their home is a day .", "a": "Remy wakes up the spaces in their home after noon .", "b": "Remy is a day .", "c": "Remy wakes up Remy after noon .", "d": "the office supply store is a day .", "e": "Remy wakes up the office supply store after noon ."}], "errors": [[]], "entailments_dict": [{"5": ["3"]}, {"2": ["(¬5)"], "5": ["(¬2)"], "8": ["(¬0)"], "(¬8)": ["0"], "(¬7)": ["1"], "(¬1)": ["7"]}], "predicted_steps": [false, false]}
{"text": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Remy has a fully stocked and impressive home office and also visits the office supply store regularly?", "id": "154", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If people own a large desktop monitor at their home, then they work regularly and often at home.\nPremise 1.2: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nPremise 1.3: All people who work regularly and often at home visit the office supply store regularly.\nConclusion 1: If Remy has a fully stocked and impressive home office, then they visit the office supply store regularly.\nPremise 2.1: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nPremise 2.2: If Remy spends their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nPremise 2.3: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nConclusion 2: If Remy spends their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nConclusion 3: If Remy does not go to bed late and wake up every day after noon, then they spend their free time tidying and organizing the spaces in their home.\nConclusion 4: If Remy spends their free time tidying and organizing the spaces in their home, then they visit the office supply store regularly.\nConclusion 5: If Remy visits the office supply store regularly, then they have a fully stocked and impressive home office.\nPremise 3.1: Remy has a fully stocked and impressive home office or not.\nPremise 3.2: Remy visits the office supply store regularly or not.\nAnswer: If we don't have information about Remy's home office and their visiting of office supply store, we can't say for sure, so the answer is C. Uncertain.", "logic_premises": "[[((a→b)∪(c→d)), (((e∧f)→g)∪((h∧i)→j)), ((k→l)∪(m→n))], [((g→h)∪((i→j)∪(k→l))), (2→(3∧4)), ((m→(((6∧n)∧8)⊻((a∧p)∧c)))∪((q→(((6∧r)∧8)⊻((a∧t)∧c)))∪(u→(((6∧v)∧8)⊻((a∧x)∧c)))))]]", "logic_conclusion": "[((7∧8)→9), (d→(e∧f))]", "correspondance": [{"0": "X own a large desktop monitor at people 's home .", "1": "X work regularly and often at home .", "2": "X is a person who has a fully stocked home office .", "3": "X is a person who has a impressive home office .", "4": "X is a people who owns a large desktop monitor at their home .", "5": "X is a person who works regularly and often at home .", "6": "X visits the office supply store regularly .", "7": "Remy has a fully stocked home office .", "8": "Remy has a impressive home office .", "9": "Remy visit the office supply store regularly .", "a": "Remy own a large desktop monitor at people 's home .", "b": "Remy work regularly and often at home .", "c": "the office supply store own a large desktop monitor at people 's home .", "d": "the office supply store work regularly and often at home .", "e": "Remy is a person who has a fully stocked home office .", "f": "Remy is a person who has a impressive home office .", "g": "Remy is a people who owns a large desktop monitor at their home .", "h": "the office supply store is a person who has a fully stocked home office .", "i": "the office supply store is a person who has a impressive home office .", "j": "the office supply store is a people who owns a large desktop monitor at their home .", "k": "Remy is a person who works regularly and often at home .", "l": "Remy visits the office supply store regularly .", "m": "the office supply store is a person who works regularly and often at home .", "n": "the office supply store visits the office supply store regularly ."}, {"0": "X is a person who works regularly and often at home .", "1": "X spends their free time tidying and organizing the spaces in their homes .", "2": "Remy spends Remy 's free time tidying and organizing the spaces in Remy 's home .", "3": "Remy do not go to bed late .", "4": "Remy do not wake up every day after noon .", "5": "X is a day .", "6": "Remy goes to bed late .", "7": "Remy wakes up X after noon .", "8": "Remy spends Remy 's free time tidying and organizing the spaces in Remy 's home .", "9": "X is a day .", "a": "Remy does not goes to bed late .", "b": "Remy wakes up X after noon .", "c": "Remy spendses Remy 's free time tidying and organizing the spaces in Remy 's home .", "d": "Remy spends Remy 's free time tidying and organizing the spaces in Remy 's home .", "e": "Remy do not go to bed late .", "f": "Remy do not wake up every day after noon .", "g": "the spaces in their home is a person who works regularly and often at home .", "h": "the spaces in their home spends their free time tidying and organizing the spaces in their homes .", "i": "Remy is a person who works regularly and often at home .", "j": "Remy spends their free time tidying and organizing the spaces in their homes .", "k": "the spaces in their homes is a person who works regularly and often at home .", "l": "the spaces in their homes spends their free time tidying and organizing the spaces in their homes .", "m": "the spaces in their home is a day .", "n": "Remy wakes up the spaces in their home after noon .", "o": "the spaces in their home is a day .", "p": "Remy wakes up the spaces in their home after noon .", "q": "Remy is a day .", "r": "Remy wakes up Remy after noon .", "s": "Remy is a day .", "t": "Remy wakes up Remy after noon .", "u": "the spaces in their homes is a day .", "v": "Remy wakes up the spaces in their homes after noon .", "w": "the spaces in their homes is a day .", "x": "Remy wakes up the spaces in their homes after noon ."}], "errors": [[]], "entailments_dict": [{"l": ["9"]}, {"8": ["2"], "c": ["2"], "d": ["2"], "3": ["e", "(¬6)"], "4": ["f"], "a": ["e"], "6": ["(¬3)"]}], "predicted_steps": [false, true]}
{"text": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office?", "id": "155", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If people own a large desktop monitor at their home, then they work regularly and often at home.\nPremise 1.2: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nPremise 1.3: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nPremise 1.4: All people who work regularly and often at home visit the office supply store regularly.\nPremise 1.5: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nPremise 2.1: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nConclusion 1: If Remy goes to bed late and wakes up every day after noon, then they do not spend their free time tidying and organizing the spaces in their home.\nConclusion 2: If Remy goes to bed late and wakes up every day after noon, then they do not have a fully stocked and impressive home office.\nConclusion 3: If Remy visits the office supply store regularly, then they work regularly and often at home.\nConclusion 4: If Remy visits the office supply store regularly, then they have a fully stocked and impressive home office.\nConclusion 5: If Remy visits the office supply store regularly, then they spend their free time tidying and organizing the spaces in their home.\nConclusion 6: If Remy visits the office supply store regularly, then they do not go to bed late and wake up every day after noon.\nConclusion 7: If Remy does not go to bed late and wake up every day after noon, then they spend their free time tidying and organizing the spaces in their home.\nConclusion 8: If Remy does not go to bed late and wake up every day after noon, then they have a fully stocked and impressive home office.\nConclusion 9: If Remy does not go to bed late and wake up every day after noon, then they visit the office supply store regularly.\nConclusion 10: If Remy spends their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nConclusion 11: If Remy has a fully stocked and impressive home office, then they own a large desktop monitor at their home.\nConclusion 12: If Remy has a fully stocked and impressive home office, then they work regularly and often at home.\nConclusion 13: If Remy has a fully stocked and impressive home office, then they visit the office supply store regularly.\nConclusion 14: If Remy does not spend their free time tidying and organizing the spaces in their home, then they go to bed late and wake up every day after noon.\nConclusion 15: If Remy does not spend their free time tidying and organizing the spaces in their home, then they do not have a fully stocked and impressive home office.\nConclusion 16: If Remy does not spend their free time tidying and organizing the spaces in their home, then they do not visit the office supply store regularly.\nConclusion 17: If Remy goes to bed late and wakes up every day after noon, then they do not visit the office supply store regularly.\nConclusion 18: If Remy goes to bed late and wakes up every day after noon, then they do not have a fully stocked and impressive home office.\nConclusion 19: If Remy goes to bed late and wakes up every day after noon, then they do not spend their free time tidying and organizing the spaces in their home.\n\nAnswer: B. No.\n\nThe passage does not support the statement that if Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\n\nThe passage states that if Remy goes to bed late and wakes up every day after noon,", "logic_premises": "[[((n→o)∪((p→q)∪((r→s)∪(t→u)))), (((v∧w)→x)∪(((y∧z)→A)∪(((B∧C)→D)∪((E∧F)→G)))), ((H→I)∪((J→K)∪((L→M)∪(N→O)))), ((P→Q)∪((R→S)∪((T→U)∪(V→W)))), ((X→(Y∧Z))∪((!→(\"∧#))∪(($→(%∧&))∪(*→(+∧,))))), ((-→(((d∧.)∧f)⊻((h∧:)∧j)))∪((;→(((d∧<)∧f)⊻((h∧>)∧j)))∪((?→(((d∧@)∧f)⊻((h∧\\)∧j)))∪(]→(((d∧^)∧f)⊻((h∧`)∧j))))))]]", "logic_conclusion": "[((k∧l)→m)]", "correspondance": [{"0": "X own a large desktop monitor at people 's home .", "1": "X work regularly and often at home .", "2": "X is a person who has a fully stocked home office .", "3": "X is a person who has a impressive home office .", "4": "X is a people who owns a large desktop monitor at their home .", "5": "X is a person who works regularly and often at home .", "6": "X spends their free time tidying and organizing the spaces in their homes .", "7": "X is a person who works regularly and often at home .", "8": "X visits the office supply store regularly .", "9": "X spend people 's free time tidying and organizing the spaces in people 's home .", "a": "X do not go to bed late .", "b": "X do not wake up every day after noon .", "c": "X is a day .", "d": "Remy goes to bed late .", "e": "Remy wakes up X after noon .", "f": "Remy spends Remy 's free time tidying and organizing the spaces in Remy 's home .", "g": "X is a day .", "h": "Remy does not goes to bed late .", "i": "Remy wakes up X after noon .", "j": "Remy spendses Remy 's free time tidying and organizing the spaces in Remy 's home .", "k": "Remy goes to bed late .", "l": "Remy wakes up every day after noon .", "m": "Remy do not spend Remy 's free time tidying and organizing the spaces in Remy 's home .", "n": "the spaces in their home own a large desktop monitor at people 's home .", "o": "the spaces in their home work regularly and often at home .", "p": "Remy own a large desktop monitor at people 's home .", "q": "Remy work regularly and often at home .", "r": "the spaces in their homes own a large desktop monitor at people 's home .", "s": "the spaces in their homes work regularly and often at home .", "t": "the office supply store own a large desktop monitor at people 's home .", "u": "the office supply store work regularly and often at home .", "v": "the spaces in their home is a person who has a fully stocked home office .", "w": "the spaces in their home is a person who has a impressive home office .", "x": "the spaces in their home is a people who owns a large desktop monitor at their home .", "y": "Remy is a person who has a fully stocked home office .", "z": "Remy is a person who has a impressive home office .", "A": "Remy is a people who owns a large desktop monitor at their home .", "B": "the spaces in their homes is a person who has a fully stocked home office .", "C": "the spaces in their homes is a person who has a impressive home office .", "D": "the spaces in their homes is a people who owns a large desktop monitor at their home .", "E": "the office supply store is a person who has a fully stocked home office .", "F": "the office supply store is a person who has a impressive home office .", "G": "the office supply store is a people who owns a large desktop monitor at their home .", "H": "the spaces in their home is a person who works regularly and often at home .", "I": "the spaces in their home spends their free time tidying and organizing the spaces in their homes .", "J": "Remy is a person who works regularly and often at home .", "K": "Remy spends their free time tidying and organizing the spaces in their homes .", "L": "the spaces in their homes is a person who works regularly and often at home .", "M": "the spaces in their homes spends their free time tidying and organizing the spaces in their homes .", "N": "the office supply store is a person who works regularly and often at home .", "O": "the office supply store spends their free time tidying and organizing the spaces in their homes .", "P": "the spaces in their home is a person who works regularly and often at home .", "Q": "the spaces in their home visits the office supply store regularly .", "R": "Remy is a person who works regularly and often at home .", "S": "Remy visits the office supply store regularly .", "T": "the spaces in their homes is a person who works regularly and often at home .", "U": "the spaces in their homes visits the office supply store regularly .", "V": "the office supply store is a person who works regularly and often at home .", "W": "the office supply store visits the office supply store regularly .", "X": "the spaces in their home spend people 's free time tidying and organizing the spaces in people 's home .", "Y": "the spaces in their home do not go to bed late .", "Z": "the spaces in their home do not wake up every day after noon .", "!": "Remy spend people 's free time tidying and organizing the spaces in people 's home .", "\"": "Remy do not go to bed late .", "#": "Remy do not wake up every day after noon .", "$": "the spaces in their homes spend people 's free time tidying and organizing the spaces in people 's home .", "%": "the spaces in their homes do not go to bed late .", "&": "the spaces in their homes do not wake up every day after noon .", "*": "the office supply store spend people 's free time tidying and organizing the spaces in people 's home .", "+": "the office supply store do not go to bed late .", ",": "the office supply store do not wake up every day after noon .", "-": "the spaces in their home is a day .", ".": "Remy wakes up the spaces in their home after noon .", "/": "the spaces in their home is a day .", ":": "Remy wakes up the spaces in their home after noon .", ";": "Remy is a day .", "<": "Remy wakes up Remy after noon .", "=": "Remy is a day .", ">": "Remy wakes up Remy after noon .", "?": "the spaces in their homes is a day .", "@": "Remy wakes up the spaces in their homes after noon .", "[": "the spaces in their homes is a day .", "\\": "Remy wakes up the spaces in their homes after noon .", "]": "the office supply store is a day .", "^": "Remy wakes up the office supply store after noon .", "_": "the office supply store is a day .", "`": "Remy wakes up the office supply store after noon ."}], "errors": [[]], "entailments_dict": [{"d": ["(¬\")"], "\"": ["(¬d)"], "k": ["(¬\")"]}], "predicted_steps": [false]}
{"text": "All humans are mortal. All Greeks are humans.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some Greeks are mortal?", "id": "156", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: All humans are mortal.\nPremise 1.2: All Greeks are humans.\nConclusion 1: All Greeks are mortal.\nPremise 2.1: All Greeks are mortal.\nAnswer: A. Yes.\n\nExplanation:\n\n* Since all Greeks are humans and all humans are mortal, it follows that all Greeks are mortal.\n* Therefore, it is true that some Greeks are mortal, as all of them are.", "logic_premises": "[[(0→1), (2→3)]]", "logic_conclusion": "[(4→5)]", "correspondance": [{"0": "X is a human .", "1": "X is mortal .", "2": "X is a Greek .", "3": "X is a human .", "4": "X is a Greek .", "5": "X is mortal ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["2"], "1": ["5"]}], "predicted_steps": [true]}
{"text": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James has a part-time job offered by the university?", "id": "157", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: No students who work in the library are from the computer science department.\nPremise 1.2: All students who have part-time jobs offered by the university are students who work in the library.\nConclusion 1: James, who works in the lab and is from the computer science department, does not have a part-time job offered by the university.\nPremise 2.1: James is a student working in the lab.\nPremise 2.2: Jack neither has a part-time job offered by the university nor works in the lab.\nPremise 2.3: James is not Jack.\nConclusion 2: The information about Jack does not affect the conclusion about James.\nAnswer: B. No.", "logic_premises": "[[((7→8)∪((9→a)∪((b→c)∪(d→e)))), ((f→g)∪((h→i)∪((j→k)∪(l→m))))], [0, (1∧2), 3]]", "logic_conclusion": "[(4∧(5∧6)), 4]", "correspondance": [{"0": "X is a student who works in the library .", "1": "X is not from the computer science department .", "2": "X is a student who has part - time jobs offered by the university .", "3": "X is a student who works in the library .", "4": "James does not have a part - time job offered by the university .", "5": "James works in the lab .", "6": "James is from the computer science department .", "7": "the library is a student who works in the library .", "8": "the library is not from the computer science department .", "9": "the university is a student who works in the library .", "a": "the university is not from the computer science department .", "b": "the computer science department is a student who works in the library .", "c": "the computer science department is not from the computer science department .", "d": "James, who works in the lab and is from the computer science department, is a student who works in the library .", "e": "James, who works in the lab and is from the computer science department, is not from the computer science department .", "f": "the library is a student who has part - time jobs offered by the university .", "g": "the library is a student who works in the library .", "h": "the university is a student who has part - time jobs offered by the university .", "i": "the university is a student who works in the library .", "j": "the computer science department is a student who has part - time jobs offered by the university .", "k": "the computer science department is a student who works in the library .", "l": "James, who works in the lab and is from the computer science department, is a student who has part - time jobs offered by the university .", "m": "James, who works in the lab and is from the computer science department, is a student who works in the library ."}, {"0": "James is a student working in the lab .", "1": "Jack does not have a part - time job offered by the university .", "2": "Jack does not work in the lab .", "3": "James is not Jack .", "4": "The information about Jack does not affect the conclusion about James ."}], "errors": [[]], "entailments_dict": [{"k": ["b"], "m": ["d"], "g": ["7"], "i": ["9"]}, {}], "predicted_steps": [false, false]}
{"text": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James does not have a part-time job offered by the university?", "id": "158", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All students who have part-time jobs offered by the university are students who work in the library.\nPremise 1.2: James is a student working in the lab.\nConclusion 1: James does not have a part-time job offered by the university.\nPremise 2.1: James is a student working in the lab.\nPremise 2.2: All students working in the lab are instructed by professor David.\nPremise 2.3: All students instructed by professor David are taking the database course.\nPremise 2.4: All students taking the database course are from the computer science department.\nConclusion 2: James is from the computer science department.\nPremise 3.1: No students who work in the library are from the computer science department.\nPremise 3.2: James is from the computer science department.\nConclusion 3: James does not work in the library.\nPremise 4.1: James does not work in the library.\nPremise 4.2: All students who have part-time jobs offered by the university are students who work in the library.\nConclusion 4: James does not have a part-time job offered by the university.\nPremise 5.1: James does not have a part-time job offered by the university.\nAnswer: A. Yes.\n\nExplanation:\n\n* From the first premise, we know that James, who works in the lab, does not have a part-time job offered by the university.\n* From the second and third premises, we know that James is from the computer science department, but no students who work in the library are from the computer science department. Therefore, James does not work in the library.\n* From the fourth and fifth premises, we know that James does not have a part-time job offered by the university.", "logic_premises": "[[((4→5)∪((6→7)∪((8→9)∪(a→b)))), 2], [0, ((8→9)∪((a→b)∪((c→d)∪((e→f)∪(g→h))))), ((i→j)∪((k→l)∪((m→n)∪((o→p)∪(q→r))))), ((s→t)∪((u→v)∪((w→x)∪((y→z)∪(A→B)))))], [((4→5)∪((6→7)∪(8→9))), 2], [0, ((4→5)∪((6→7)∪(8→9)))]]", "logic_conclusion": "[3, 7, 3, 3]", "correspondance": [{"0": "X is a student who has part - time jobs offered by the university .", "1": "X is a student who works in the library .", "2": "James is a student working in the lab .", "3": "James does not have a part - time job offered by the university .", "4": "James is a student who has part - time jobs offered by the university .", "5": "James is a student who works in the library .", "6": "the library is a student who has part - time jobs offered by the university .", "7": "the library is a student who works in the library .", "8": "the university is a student who has part - time jobs offered by the university .", "9": "the university is a student who works in the library .", "a": "the lab is a student who has part - time jobs offered by the university .", "b": "the lab is a student who works in the library ."}, {"0": "James is a student working in the lab .", "1": "X is a student working in the lab .", "2": "X is instructed by professor David .", "3": "X is a student instructed by professor David .", "4": "X is taking the database course .", "5": "X is a student taking the database course .", "6": "X is from the computer science department .", "7": "James is from the computer science department .", "8": "the database course is a student working in the lab .", "9": "the database course is instructed by professor David .", "a": "the computer science department is a student working in the lab .", "b": "the computer science department is instructed by professor David .", "c": "the lab is a student working in the lab .", "d": "the lab is instructed by professor David .", "e": "professor David is a student working in the lab .", "f": "professor David is instructed by professor David .", "g": "James is a student working in the lab .", "h": "James is instructed by professor David .", "i": "the database course is a student instructed by professor David .", "j": "the database course is taking the database course .", "k": "the computer science department is a student instructed by professor David .", "l": "the computer science department is taking the database course .", "m": "the lab is a student instructed by professor David .", "n": "the lab is taking the database course .", "o": "professor David is a student instructed by professor David .", "p": "professor David is taking the database course .", "q": "James is a student instructed by professor David .", "r": "James is taking the database course .", "s": "the database course is a student taking the database course .", "t": "the database course is from the computer science department .", "u": "the computer science department is a student taking the database course .", "v": "the computer science department is from the computer science department .", "w": "the lab is a student taking the database course .", "x": "the lab is from the computer science department .", "y": "professor David is a student taking the database course .", "z": "professor David is from the computer science department .", "A": "James is a student taking the database course .", "B": "James is from the computer science department ."}, {"0": "X is a student who works in the library .", "1": "X is not from the computer science department .", "2": "James is from the computer science department .", "3": "James does not work in the library .", "4": "James is a student who works in the library .", "5": "James is not from the computer science department .", "6": "the library is a student who works in the library .", "7": "the library is not from the computer science department .", "8": "the computer science department is a student who works in the library .", "9": "the computer science department is not from the computer science department ."}, {"0": "James does not work in the library .", "1": "X is a student who has part - time jobs offered by the university .", "2": "X is a student who works in the library .", "3": "James does not have a part - time job offered by the university .", "4": "James is a student who has part - time jobs offered by the university .", "5": "James is a student who works in the library .", "6": "the library is a student who has part - time jobs offered by the university .", "7": "the library is a student who works in the library .", "8": "the university is a student who has part - time jobs offered by the university .", "9": "the university is a student who works in the library ."}], "errors": [[]], "entailments_dict": [{}, {"0": ["g"], "B": ["7"]}, {"2": ["(¬5)"], "5": ["(¬2)"]}, {}], "predicted_steps": [false, false, false, false]}
{"text": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James either takes the database course or has a part-time job offered by the university?", "id": "159", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: No students who work in the library are from the computer science department.\nPremise 1.2: All students who have part-time jobs offered by the university are students who work in the library.\nPremise 1.3: James is a student working in the lab.\nPremise 1.4: All students working in the lab are instructed by professor David.\nPremise 1.5: All students instructed by professor David are taking the database course.\nConclusion 1: James is taking the database course.\nPremise 2.1: All students taking the database course are from the computer science department.\nPremise 2.2: James is not from the computer science department (from Conclusion 1 and Premise 2.1).\nPremise 2.3: James is not a student who has a part-time job offered by the university (from Premise 1.2 and Premise 1.3).\nAnswer: B. No. James neither takes the database course nor has a part-time job offered by the university.", "logic_premises": "[[((a→b)∪((c→d)∪((e→f)∪((g→h)∪((i→j)∪((k→l)∪(m→n))))))), ((o→p)∪((q→r)∪((s→t)∪((u→v)∪((w→x)∪((y→z)∪(A→B))))))), 4, ((C→D)∪((E→F)∪((G→H)∪((I→J)∪((K→L)∪((M→N)∪(O→P))))))), ((Q→R)∪((S→T)∪((U→V)∪((W→X)∪((Y→Z)∪((!→\")∪(#→$)))))))]]", "logic_conclusion": "[9]", "correspondance": [{"0": "X is a student who works in the library .", "1": "X is not from the computer science department .", "2": "X is a student who has part - time jobs offered by the university .", "3": "X is a student who works in the library .", "4": "James is a student working in the lab .", "5": "X is a student working in the lab .", "6": "X is instructed by professor David .", "7": "X is a student instructed by professor David .", "8": "X is taking the database course .", "9": "James is taking the database course .", "a": "the library is a student who works in the library .", "b": "the library is not from the computer science department .", "c": "the database course is a student who works in the library .", "d": "the database course is not from the computer science department .", "e": "the computer science department is a student who works in the library .", "f": "the computer science department is not from the computer science department .", "g": "the lab is a student who works in the library .", "h": "the lab is not from the computer science department .", "i": "professor David is a student who works in the library .", "j": "professor David is not from the computer science department .", "k": "James is a student who works in the library .", "l": "James is not from the computer science department .", "m": "the university is a student who works in the library .", "n": "the university is not from the computer science department .", "o": "the library is a student who has part - time jobs offered by the university .", "p": "the library is a student who works in the library .", "q": "the database course is a student who has part - time jobs offered by the university .", "r": "the database course is a student who works in the library .", "s": "the computer science department is a student who has part - time jobs offered by the university .", "t": "the computer science department is a student who works in the library .", "u": "the lab is a student who has part - time jobs offered by the university .", "v": "the lab is a student who works in the library .", "w": "professor David is a student who has part - time jobs offered by the university .", "x": "professor David is a student who works in the library .", "y": "James is a student who has part - time jobs offered by the university .", "z": "James is a student who works in the library .", "A": "the university is a student who has part - time jobs offered by the university .", "B": "the university is a student who works in the library .", "C": "the library is a student working in the lab .", "D": "the library is instructed by professor David .", "E": "the database course is a student working in the lab .", "F": "the database course is instructed by professor David .", "G": "the computer science department is a student working in the lab .", "H": "the computer science department is instructed by professor David .", "I": "the lab is a student working in the lab .", "J": "the lab is instructed by professor David .", "K": "professor David is a student working in the lab .", "L": "professor David is instructed by professor David .", "M": "James is a student working in the lab .", "N": "James is instructed by professor David .", "O": "the university is a student working in the lab .", "P": "the university is instructed by professor David .", "Q": "the library is a student instructed by professor David .", "R": "the library is taking the database course .", "S": "the database course is a student instructed by professor David .", "T": "the database course is taking the database course .", "U": "the computer science department is a student instructed by professor David .", "V": "the computer science department is taking the database course .", "W": "the lab is a student instructed by professor David .", "X": "the lab is taking the database course .", "Y": "professor David is a student instructed by professor David .", "Z": "professor David is taking the database course .", "!": "James is a student instructed by professor David .", "\"": "James is taking the database course .", "#": "the university is a student instructed by professor David .", "$": "the university is taking the database course ."}], "errors": [[]], "entailments_dict": [{"z": ["k"], "4": ["M"], "p": ["a"], "v": ["g"], "x": ["i"], "r": ["c"], "B": ["m"], "t": ["e"], "\"": ["9"]}], "predicted_steps": [false]}
{"text": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Jack takes the database course?", "id": "160", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: No students who work in the library are from the computer science department.\nPremise 1.2: All students who take the database course are from the computer science department.\nConclusion 1: Students who work in the library do not take the database course.\nPremise 2.1: All students who have part-time jobs offered by the university are students who work in the library.\nPremise 2.2: Jack neither has a part-time job offered by the university nor works in the lab.\nConclusion 2: Jack does not work in the library and does not work in the lab.\nPremise 3.1: All students instructed by professor David are taking the database course.\nPremise 3.2: James is a student working in the lab and is instructed by professor David.\nConclusion 3: James takes the database course.\nPremise 4.1: Jack does not take the database course.\nAnswer: B. No.\n\nExplanation:\n\n* From Premise 1.1 and 1.2, we can conclude that students who work in the library do not take the database course.\n* From Premise 2.1 and 2.2, we can conclude that Jack does not work in the library and does not work in the lab.\n* From Premise 3.1 and 3.2, we can conclude that James takes the database course.\n* From Premise 4.1, we can conclude that Jack does not take the database course.\n* Therefore, the answer is B. No.", "logic_premises": "[[(0→1), (2→3)], [((6→7)∪((8→9)∪((a→b)∪(c→d)))), (2∧3)], [((5→6)∪((7→8)∪((9→a)∪(b→c)))), (2∧3)]]", "logic_conclusion": "[(4→5), (4∧5), 4]", "correspondance": [{"0": "X is a student who works in the library .", "1": "X is not from the computer science department .", "2": "X is a student who takes the database course .", "3": "X is from the computer science department .", "4": "X is a Student who work in the library .", "5": "X does not takes the database course ."}, {"0": "X is a student who has part - time jobs offered by the university .", "1": "X is a student who works in the library .", "2": "Jack does not have a part - time job offered by the university .", "3": "Jack does not work in the lab .", "4": "Jack does not work in the library .", "5": "Jack does not work in the lab .", "6": "the library is a student who has part - time jobs offered by the university .", "7": "the library is a student who works in the library .", "8": "the university is a student who has part - time jobs offered by the university .", "9": "the university is a student who works in the library .", "a": "the lab is a student who has part - time jobs offered by the university .", "b": "the lab is a student who works in the library .", "c": "Jack is a student who has part - time jobs offered by the university .", "d": "Jack is a student who works in the library ."}, {"0": "X is a student instructed by professor David .", "1": "X is taking the database course .", "2": "James is a student working in the lab .", "3": "James is instructed by professor David .", "4": "James takes the database course .", "5": "James is a student instructed by professor David .", "6": "James is taking the database course .", "7": "the database course is a student instructed by professor David .", "8": "the database course is taking the database course .", "9": "the lab is a student instructed by professor David .", "a": "the lab is taking the database course .", "b": "professor David is a student instructed by professor David .", "c": "professor David is taking the database course ."}], "errors": [[]], "entailments_dict": [{"4": ["0"], "1": ["(¬3)"], "3": ["(¬1)"]}, {"5": ["3"], "3": ["5"]}, {}], "predicted_steps": [false, false, false]}
{"text": "If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If George likes music and has access to a program, he will compose?", "id": "161", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If George likes music, he wants to compose.\nPremise 1.2: If George has access to a program, he can compose.\nPremise 1.3: If George can compose and wants to compose, he will compose.\nPremise 2.1: George likes music.\nPremise 2.2: George has access to a program.\nConclusion 2.1: George wants to compose (from 1.1 and 2.1).\nConclusion 2.2: George can compose (from 1.2 and 2.2).\nConclusion 2.3: George will compose (from 1.3, 2.1, and 2.2).\nAnswer: A. Yes.", "logic_premises": "[[(0→1), (2→3), ((4∧5)→6), 7, 8]]", "logic_conclusion": "[9]", "correspondance": [{"0": "George likes music .", "1": "George wants to compose .", "2": "George has access to a program .", "3": "George can compose .", "4": "George can compose .", "5": "George wants to compose .", "6": "George will compose .", "7": "George likes music .", "8": "George has access to a program .", "9": "George wants to compose ."}], "errors": [[]], "entailments_dict": [{"1": ["5", "9"], "8": ["2"], "7": ["0"], "3": ["4"], "9": ["5"]}], "predicted_steps": [true]}
{"text": "If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If George will not compose, George can not compose?", "id": "162", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If George likes music, he wants to compose.\nPremise 1.2: If George has access to a program, he can compose.\nPremise 1.3: If George can compose and wants to compose, he will compose.\nConclusion 1: George will compose if he likes music, has access to a program and wants to compose.\n\nPremise 2.1: George will not compose.\nConclusion 2: George doesn't like music, doesn't have access to a program or doesn't want to compose.\n\nPremise 3.1: George will not compose.\nPremise 3.2: George can compose.\nConclusion 3: George doesn't want to compose.\n\nPremise 4.1: George can not compose.\nPremise 4.2: George will not compose.\nAnswer: B. No.\n\nThe passage does not state that if George will not compose, George can not compose. It is possible that George can compose but simply chooses not to.", "logic_premises": "[[(0→1), (2→3), ((4∧5)→6)], [0], [0, 1]]", "logic_conclusion": "[(7∧(8∧9)), (1∨(2∨3)), 2]", "correspondance": [{"0": "George likes music .", "1": "George wants to compose .", "2": "George has access to a program .", "3": "George can compose .", "4": "George can compose .", "5": "George wants to compose .", "6": "George will compose .", "7": "George will compose that George likes music .", "8": "George will compose that George has access to a program .", "9": "George will compose that George wants to compose ."}, {"0": "George will not compose .", "1": "George does n't like music .", "2": "George does n't have access to a program .", "3": "George does n't want to compose ."}, {"0": "George will not compose .", "1": "George can compose .", "2": "George does n't want to compose ."}], "errors": [[]], "entailments_dict": [{"1": ["5"], "3": ["4"]}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "A hawk never lands. Some birds are hawks.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that All birds lan?", "id": "163", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: A hawk never lands.\nPremise 1.2: Some birds are hawks.\nConclusion 1: Some birds never land.\nPremise 2.1: Some birds never land.\nAnswer: B. No.\n\nExplanation:\nThe passage states that a hawk never lands and that some birds are hawks. However, it does not state that all birds are hawks or that all birds never land. Therefore, it is not true that all birds never land.", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "A hawk never lands .", "1": "Some birds are hawks .", "2": "Some birds never land ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Breaking Bad is on Monday at 8 pm?", "id": "164", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Every rose given out on TV is on the Bachelor.\nPremise 1.2: Roses are given out on TV on some Mondays at 8 pm.\nConclusion 1: The Bachelor is on some Mondays at 8 pm.\nPremise 2.1: Everything on the Bachelor portrays the lives of real people.\nPremise 2.2: All shows portraying the lives of real people are reality TV shows.\nConclusion 2: The Bachelor is a reality TV show.\nPremise 3.1: Breaking Bad is not a reality TV show.\nConclusion 3: Breaking Bad is not the Bachelor.\nPremise 4.1: Breaking Bad is not the Bachelor.\nPremise 4.2: The Bachelor is on some Mondays at 8 pm.\nConclusion 4: Breaking Bad is not on Monday at 8 pm.\nAnswer: B. No.\n\nExplanation:\n\n* From the passage, we know that roses are given out on TV on some Mondays at 8 pm and that every rose given out on TV is on the Bachelor. Therefore, the Bachelor is on some Mondays at 8 pm.\n* We also know that everything on the Bachelor portrays the lives of real people and that all shows portraying the lives of real people are reality TV shows. Therefore, the Bachelor is a reality TV show.\n* Since Breaking Bad is not a reality TV show, it cannot be the Bachelor.\n* Since Breaking Bad is not the Bachelor, it is not on Monday at 8 pm.", "logic_premises": "[[((4→5)∪(6→7)), 2], [((5→6)∪((7→8)∪(9→a))), ((b→c)∪((d→e)∪(f→g)))], [0], [0, 1]]", "logic_conclusion": "[3, 4, 1, 2]", "correspondance": [{"0": "X is a rose given out on TV .", "1": "X is on the Bachelor .", "2": "Roses are given out on TV on some Mondays at 8 pm .", "3": "the Bachelor is on some Mondays at 8 pm .", "4": "The Bachelor is a rose given out on TV .", "5": "The Bachelor is on the Bachelor .", "6": "the Bachelor is a rose given out on TV .", "7": "the Bachelor is on the Bachelor ."}, {"0": "X is a thing on the Bachelor .", "1": "X portrays the lives of real people .", "2": "X is a show portraying the lives of real person .", "3": "X is reality TV a show .", "4": "the Bachelor is a reality TV show .", "5": "The Bachelor is a thing on the Bachelor .", "6": "The Bachelor portrays the lives of real people .", "7": "the Bachelor is a thing on the Bachelor .", "8": "the Bachelor portrays the lives of real people .", "9": "the lives of real people is a thing on the Bachelor .", "a": "the lives of real people portrays the lives of real people .", "b": "The Bachelor is a show portraying the lives of real person .", "c": "The Bachelor is reality TV a show .", "d": "the Bachelor is a show portraying the lives of real person .", "e": "the Bachelor is reality TV a show .", "f": "the lives of real people is a show portraying the lives of real person .", "g": "the lives of real people is reality TV a show ."}, {"0": "breaking Bad is not a reality TV show .", "1": "breaking Bad is not the Bachelor ."}, {"0": "breaking Bad is not the Bachelor .", "1": "the Bachelor is on some Mondays at 8 pm .", "2": "breaking Bad is not on Monday at 8 pm ."}], "errors": [[]], "entailments_dict": [{}, {"e": ["4"], "c": ["4"]}, {}, {}], "predicted_steps": [false, false, false, false]}
{"text": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Breaking Bad is a TV show in which roses are given out on Monday at 8 pm?", "id": "165", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: On some Mondays at 8 pm, roses are given out on TV.\nPremise 1.2: Every rose given out on TV is on the Bachelor.\nConclusion 1: The Bachelor is a TV show in which roses are given out on Monday at", "logic_premises": "[[0, ((4→5)∪((6→7)∪(8→9)))]]", "logic_conclusion": "[3]", "correspondance": [{"0": "On some Mondays at 8 pm , roses are given out on TV .", "1": "X is a rose given out on TV .", "2": "X is on the Bachelor .", "3": "the Bachelor is a TV show in which roses are given out on Monday at", "4": "Monday is a rose given out on TV .", "5": "Monday is on the Bachelor .", "6": "The Bachelor is a rose given out on TV .", "7": "The Bachelor is on the Bachelor .", "8": "the Bachelor is a rose given out on TV .", "9": "the Bachelor is on the Bachelor ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If roses are given out during Breaking Bad, then it is on Monday at 8 pm?", "id": "166", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Every rose given out on TV is on the Bachelor.\nPremise 1.2: Roses are given out on the Bachelor on some Mondays at 8 pm.\nConclusion 1: If roses are given out on TV, then it is on the Bachelor and on some Mondays at 8 pm.\nPremise 2.1: Everything on the Bachelor portrays the lives of real people.\nPremise 2.2: All shows portraying the lives of real people are reality TV shows.\nConclusion 2: The Bachelor is a reality TV show.\nPremise 3.1: Breaking Bad is not a reality TV show.\nPremise 3.2: Conclusion 2: The Bachelor is a reality TV show.\nPremise 3.3: Conclusion 1: If roses are given out on TV, then it is on the Bachelor and on some Mondays at 8 pm.\nConclusion 3: Roses cannot be given out during Breaking Bad.\nPremise 4.1: Conclusion 3: Roses cannot be given out during Breaking Bad.\nAnswer: B. No.\n\nExplanation:\n\n* From the passage, we know that roses are given out on the Bachelor on some Mondays at 8 pm, and the Bachelor is a reality TV show.\n* We also know that Breaking Bad is not a reality TV show.\n* Therefore, if roses were given out during Breaking Bad, it would contradict the information that only reality TV shows portray the lives of real people.\n* Thus, roses cannot be given out during Breaking Bad.\n* Therefore, the answer is B. No.", "logic_premises": "[[(5→6), 2], [((5→6)∪((7→8)∪(9→a))), ((b→c)∪((d→e)∪(f→g)))], [0, 1, 2]]", "logic_conclusion": "[(3→4), 4, 3]", "correspondance": [{"0": "X is a rose given out on TV .", "1": "X is on the Bachelor .", "2": "Roses are given out on the Bachelor on some Mondays at 8 pm .", "3": "roses are given out on TV .", "4": "roses is on the Bachelor and on some Mondays at 8 pm .", "5": "the Bachelor is a rose given out on TV .", "6": "the Bachelor is on the Bachelor ."}, {"0": "X is a thing on the Bachelor .", "1": "X portrays the lives of real people .", "2": "X is a show portraying the lives of real person .", "3": "X is reality TV a show .", "4": "the Bachelor is a reality TV show .", "5": "The Bachelor is a thing on the Bachelor .", "6": "The Bachelor portrays the lives of real people .", "7": "the Bachelor is a thing on the Bachelor .", "8": "the Bachelor portrays the lives of real people .", "9": "the lives of real people is a thing on the Bachelor .", "a": "the lives of real people portrays the lives of real people .", "b": "The Bachelor is a show portraying the lives of real person .", "c": "The Bachelor is reality TV a show .", "d": "the Bachelor is a show portraying the lives of real person .", "e": "the Bachelor is reality TV a show .", "f": "the lives of real people is a show portraying the lives of real person .", "g": "the lives of real people is reality TV a show ."}, {"0": "breaking Bad is not a reality TV show .", "1": "Conclusion 2 : The Bachelor is a reality TV show .", "2": "Conclusion 1 : If roses are given out on TV , then it is on The Bachelor and on some Mondays at 8 pm .", "3": "Roses can not be given out during breaking Bad ."}], "errors": [[]], "entailments_dict": [{}, {"e": ["4"], "c": ["4"]}, {}], "predicted_steps": [false, false, false]}
{"text": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Heinrich Schmidt was either German or Russian?", "id": "167", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Heinrich Schmidt was a Nazi German politician.\nConclusion 1: Heinrich Schmidt was German.\nPremise 2.1: Heinrich Schmidt was not Russian, he was German.\nAnswer: B. No.\n\nNote: The passage does not provide any information about Heinrich Schmidt's nationality other than him being a German politician, and the question is asking about his German or Russian nationality, so the answer is No.", "logic_premises": "[[0]]", "logic_conclusion": "[1]", "correspondance": [{"0": "Heinrich Schmidt was a Nazi German politician .", "1": "Heinrich Schmidt was German ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag?", "id": "168", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: Heinrich Scmidt was a Nazi German politician.\nPremise 1.2: Heinrich Scmidt was a member of the Prussian State Parliament.\nPremise 1.3: Heinrich Scmidt was a member of the Nazi Reichstag.\nConclusion 1: There is at least one person, Heinrich Scmidt, who was a member of both the Prussian State Parliament and the Nazi Reichstag.\nAnswer: A. Yes.", "logic_premises": "[[0, 1, 2]]", "logic_conclusion": "[(3∧((4∧5)∧(6∧7)))]", "correspondance": [{"0": "Heinrich Scmidt was a Nazi German politician .", "1": "Heinrich Scmidt was a member of the Prussian State Parliament .", "2": "Heinrich Scmidt was a member of the Nazi Reichstag .", "3": "There is at least one person , Heinrich Scmidt .", "4": "at least one person was a member of the Prussian State Parliament .", "5": "at least one person was a member of the Nazi Reichstag .", "6": "Heinrich Scmidt was a member of the Prussian State Parliament .", "7": "Heinrich Scmidt was a member of the Nazi Reichstag ."}], "errors": [[]], "entailments_dict": [{"7": ["2"], "6": ["1"], "1": ["6"], "2": ["7"]}], "predicted_steps": [false]}
{"text": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that No politicans are part of the Nazi Reichstag?", "id": "169", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Heinrich Schmidt was a Nazi German politician.\nPremise 1.2: Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nConclusion 1: Heinrich Schmidt is a politician who is a member of the Nazi Reichstag.\nAnswer: B. No.", "logic_premises": "[[0, (1∧2)]]", "logic_conclusion": "[3]", "correspondance": [{"0": "Heinrich Schmidt was a Nazi German politician .", "1": "Heinrich Schmidt was also a member of the Prussian State Parliament .", "2": "Heinrich Schmidt was also a member of the Nazi Reichstag .", "3": "Heinrich Schmidt is a politician who is a member of the Nazi Reichstag ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Colorectal cancer is a severe cance?", "id": "170", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If something is a deadly disease, then its survival rate is low.\nPremise 1.2: All severe cancers are deadly diseases.\nPremise 1.3: Bile duct cancer is a severe cancer.\nPremise 1.4: All Cholangiocarcinoma is bile duct cancer.\nPremise 1.5: No one with mild flu has a low survival rate.\nPremise 2.1: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nConclusion 1: Bile duct cancer is a deadly disease with a low survival rate.\nConclusion 2: Colorectal cancer is a bile duct cancer.\nConclusion 3: Colorectal cancer is a deadly disease with a low survival rate.\nPremise 3.1: All severe cancers are deadly diseases.\nAnswer: A. Yes.", "logic_premises": "[[(d→e), (f→g), 4, (h→i), (j→k), ((9∧a)→b)]]", "logic_conclusion": "[c]", "correspondance": [{"0": "X is a deadly disease .", "1": "X 's survival rate is low .", "2": "X is a severe cancer .", "3": "X is deadly a disease .", "4": "Bile duct cancer is a severe cancer .", "5": "X is a Cholangiocarcinoma .", "6": "X is bile duct cancer .", "7": "X is a person with mild flu .", "8": "X does not have a low survival rate .", "9": "colorectal cancer is a bile duct cancer .", "a": "the survival rate is low .", "b": "colorectal cancer is not a bile duct cancer .", "c": "Bile duct cancer is a deadly disease with a low survival rate .", "d": "the survival rate is a deadly disease .", "e": "the survival rate 's survival rate is low .", "f": "the survival rate is a severe cancer .", "g": "the survival rate is deadly a disease .", "h": "the survival rate is a Cholangiocarcinoma .", "i": "the survival rate is bile duct cancer .", "j": "the survival rate is a person with mild flu .", "k": "the survival rate does not have a low survival rate ."}], "errors": [[]], "entailments_dict": [{"g": ["d"]}], "predicted_steps": [false]}
{"text": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu?", "id": "171", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If something is a deadly disease, then its survival rate is low.\nPremise 1.2: All severe cancers are deadly diseases.\nPremise 1.3: Bile duct cancer is a severe cancer.\nPremise 1.4: All Cholangiocarcinoma is bile duct cancer.\nPremise 2.1: No one with mild flu has a low survival rate.\nPremise 2.2: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nPremise 3.1: Colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nConclusion 3: Colorectal cancer is a bile duct cancer.\nPremise 4.1: Colorectal cancer is a bile duct cancer.\nPremise 4.2: No one with mild flu has a low survival rate.\nConclusion 4: Colorectal cancer is not a mild flu.\nPremise 5.1: Colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nPremise 5.2: Colorectal cancer is not a mild flu.\nConclusion 5: Colorectal cancer is a bile duct cancer and it is not a mild flu.\nAnswer: B. No.\n\nExplanation:\nThe passage states that all severe cancers are deadly diseases, and bile duct cancer is a severe cancer. It also states that if colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer. This implies that if colorectal cancer is a bile duct cancer, then the survival rate is not low. Therefore, it is not true that if colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.", "logic_premises": "[[(f→g), (h→i), 4, (j→k), (l→m), ((9∧a)→b), (c∨d)], [0, (1→2)], [(0∨1), 2]]", "logic_conclusion": "[e, 3, (3∧4)]", "correspondance": [{"0": "X is a deadly disease .", "1": "X 's survival rate is low .", "2": "X is a severe cancer .", "3": "X is deadly a disease .", "4": "Bile duct cancer is a severe cancer .", "5": "X is a Cholangiocarcinoma .", "6": "X is bile duct cancer .", "7": "X is a person with mild flu .", "8": "X does not have a low survival rate .", "9": "colorectal cancer is a bile duct cancer .", "a": "the survival rate is low .", "b": "colorectal cancer is not a bile duct cancer .", "c": "Colorectal cancer is a bile duct cancer .", "d": "Colorectal cancer is a Cholangiocarcinoma .", "e": "Colorectal cancer is a bile duct cancer .", "f": "the survival rate is a deadly disease .", "g": "the survival rate 's survival rate is low .", "h": "the survival rate is a severe cancer .", "i": "the survival rate is deadly a disease .", "j": "the survival rate is a Cholangiocarcinoma .", "k": "the survival rate is bile duct cancer .", "l": "the survival rate is a person with mild flu .", "m": "the survival rate does not have a low survival rate ."}, {"0": "Colorectal cancer is a bile duct cancer .", "1": "X is a person with mild flu .", "2": "X does not have a low survival rate .", "3": "Colorectal cancer is not a mild flu ."}, {"0": "Colorectal cancer is a bile duct cancer .", "1": "Colorectal cancer is a Cholangiocarcinoma .", "2": "Colorectal cancer is not a mild flu .", "3": "Colorectal cancer is a bile duct cancer .", "4": "Colorectal cancer is not a mild flu ."}], "errors": [[]], "entailments_dict": [{"i": ["f"], "c": ["9", "e", "(¬b)"], "e": ["9", "c", "(¬b)"], "b": ["(¬c)"]}, {}, {"3": ["0"], "4": ["2"], "0": ["3"], "2": ["4"]}], "predicted_steps": [false, false, false]}
{"text": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma?", "id": "172", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If something is a deadly disease, then its survival rate is low.\nPremise 1.2: All severe cancers are deadly diseases.\nPremise 1.3: Bile duct cancer is a severe cancer.\nPremise 1.4: All Cholangiocarcinoma is bile duct cancer.\nPremise 2.1: No one with mild flu has a low survival rate.\nPremise 2.2: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nPremise 3.1: Colorectal cancer is not a mild flu.\nPremise 3.2: Colorectal cancer is a Cholangiocarcinoma.\nConclusion 1: Colorectal cancer is a bile duct cancer.\nConclusion 2: Colorectal cancer is a Cholangiocarcinoma.\nConclusion 3: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nAnswer: A. Yes.\n\nNote: The premise \"If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer\" is a bit confusing, but it's the best I can do with the information provided. It seems to imply that if colorectal cancer is a bile duct cancer, it cannot have a low survival rate, which contradicts the premise that if something is a deadly disease, its survival rate is low.", "logic_premises": "[[(f→g), (h→i), 4, (j→k), (l→m), ((9∧a)→b), c, d]]", "logic_conclusion": "[e]", "correspondance": [{"0": "X is a deadly disease .", "1": "X 's survival rate is low .", "2": "X is a severe cancer .", "3": "X is deadly a disease .", "4": "Bile duct cancer is a severe cancer .", "5": "X is a Cholangiocarcinoma .", "6": "X is bile duct cancer .", "7": "X is a person with mild flu .", "8": "X does not have a low survival rate .", "9": "colorectal cancer is a bile duct cancer .", "a": "the survival rate is low .", "b": "colorectal cancer is not a bile duct cancer .", "c": "Colorectal cancer is not a mild flu .", "d": "Colorectal cancer is a Cholangiocarcinoma .", "e": "Colorectal cancer is a bile duct cancer .", "f": "the survival rate is a deadly disease .", "g": "the survival rate 's survival rate is low .", "h": "the survival rate is a severe cancer .", "i": "the survival rate is deadly a disease .", "j": "the survival rate is a Cholangiocarcinoma .", "k": "the survival rate is bile duct cancer .", "l": "the survival rate is a person with mild flu .", "m": "the survival rate does not have a low survival rate ."}], "errors": [[]], "entailments_dict": [{"i": ["f"], "e": ["9", "(¬b)"]}], "predicted_steps": [false]}
{"text": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Taylor eats salads regularly?", "id": "173", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: All people who grew up in health-conscious childhood homes eat salads regularly.\nPremise 1.2: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nConclusion 1: Taylor grew up in a health-conscious childhood home.\nPremise 2.1: Taylor grew up in a health-conscious childhood home.\nPremise 2.2: All people who grew up in health-conscious childhood homes eat salads regularly.\nConclusion 2: Taylor eats salads regularly.\nPremise 3.1: If people have good relationships with their parents, then they do not eat salads regularly.\nPremise 3.2: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nConclusion 3: Taylor does not have a good relationship with her parents.\nPremise 4.1: Taylor does not have a good relationship with her parents.\nPremise 4.2: If people have good relationships with their parents, then they do not eat salads regularly.\nConclusion 4: Taylor does not eat salads regularly.\nPremise 5.1: Taylor does not eat salads regularly.\nAnswer: B. No.\n\nNote: The reasoning steps 1, 2, and 4 are independent and lead to the same conclusion, Taylor eats salads regularly, but the passage also states that if people have good relationships with their parents, then they do not eat salads regularly, and we know that Taylor does not have a good relationship with her parents, so the conclusion is that Taylor does not eat salads regularly.", "logic_premises": "[[(7→8), ((2∧3)⊻(4∧5))], [0, (4→5)], [(7→8), ((2∧3)⊻(4∧5))], [0, (4→5)]]", "logic_conclusion": "[6, 3, 6, 3]", "correspondance": [{"0": "X is a person who grew up in health - conscious childhood homes .", "1": "X eats salads regularly .", "2": "It is both true that Taylor grew up in a health - conscious childhood home .", "3": "Taylor has a good relationship with Taylor 's parents .", "4": "It is not true that Taylor grew up in a health - conscious childhood home .", "5": "It is not true that Taylor has a good relationship with Taylor 's parents .", "6": "Taylor grew up in a health - conscious childhood home .", "7": "Taylor is a person who grew up in health - conscious childhood homes .", "8": "Taylor eats salads regularly ."}, {"0": "Taylor grew up in a health - conscious childhood home .", "1": "X is a person who grew up in health - conscious childhood homes .", "2": "X eats salads regularly .", "3": "Taylor eats salads regularly .", "4": "Taylor is a person who grew up in health - conscious childhood homes .", "5": "Taylor eats salads regularly ."}, {"0": "X have good relationships with people 's parents .", "1": "X do not eat salads regularly .", "2": "It is both true that Taylor grew up in a health - conscious childhood home .", "3": "Taylor has a good relationship with Taylor 's parents .", "4": "It is not true that Taylor grew up in a health - conscious childhood home .", "5": "It is not true that Taylor has a good relationship with Taylor 's parents .", "6": "Taylor does not have a good relationship with Taylor 's parents .", "7": "Taylor have good relationships with people 's parents .", "8": "Taylor do not eat salads regularly ."}, {"0": "Taylor does not have a good relationship with Taylor 's parents .", "1": "X have good relationships with people 's parents .", "2": "X do not eat salads regularly .", "3": "Taylor does not eat salads regularly .", "4": "Taylor have good relationships with people 's parents .", "5": "Taylor do not eat salads regularly ."}], "errors": [[]], "entailments_dict": [{"(¬6)": ["4"]}, {"5": ["3"]}, {}, {"5": ["3"]}], "predicted_steps": [false, false, false, false]}
{"text": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Taylor visits the gym at least once a day?", "id": "174", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If people have good relationships with their parents, then they do not eat salads regularly.\nPremise 1.2: Taylor has a good relationship with her parents (from the last sentence of the passage).\nConclusion 1: Taylor does not eat salads regularly.\nPremise 2.1: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\nPremise 2.2: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nConclusion 2: If Taylor visits the gym at least once a day, then she grew up in a health-conscious childhood home.\nPremise 3.1: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nPremise 3.2: Taylor does not have a good relationship with her parents.\nConclusion 3: Taylor did not grow up in a health-conscious childhood home.\nPremise 4.1: If Taylor visits the gym at least once a day, then she grew up in a health-conscious childhood home.\nPremise 4.2: Taylor did not grow up in a health-conscious childhood home.\nConclusion 4: Taylor does not visit the gym at least once a day.\nAnswer: B. No.", "logic_premises": "[[(4→5), 2], [((6→7)∪(8→9)), ((a→b)∪(c→d))], [((0∧1)⊻(2∧3)), 4], [(0→1), 2]]", "logic_conclusion": "[3, (4→5), 5, 3]", "correspondance": [{"0": "X have good relationships with people 's parents .", "1": "X do not eat salads regularly .", "2": "Taylor has a good relationship with Taylor 's parents .", "3": "Taylor does not eat salads regularly .", "4": "Taylor have good relationships with people 's parents .", "5": "Taylor do not eat salads regularly ."}, {"0": "X is a person who fulfills their nutritional daily intakes .", "1": "X grew up in health - conscious childhood homes .", "2": "X visit the gym at least once a day .", "3": "X always fulfill X 's daily nutritional intakes .", "4": "Taylor visits the gym at least once a day .", "5": "Taylor grew up in a health - conscious childhood home .", "6": "the gym is a person who fulfills their nutritional daily intakes .", "7": "the gym grew up in health - conscious childhood homes .", "8": "Taylor is a person who fulfills their nutritional daily intakes .", "9": "Taylor grew up in health - conscious childhood homes .", "a": "the gym visit the gym at least once a day .", "b": "the gym always fulfill the gym 's daily nutritional intakes .", "c": "Taylor visit the gym at least once a day .", "d": "Taylor always fulfill Taylor 's daily nutritional intakes ."}, {"0": "It is both true that Taylor grew up in a health - conscious childhood home .", "1": "Taylor has a good relationship with Taylor 's parents .", "2": "It is not true that Taylor grew up in a health - conscious childhood home .", "3": "It is not true that Taylor has a good relationship with Taylor 's parents .", "4": "Taylor does not have a good relationship with Taylor 's parents .", "5": "Taylor did not grow up in a health - conscious childhood home ."}, {"0": "Taylor visits the gym at least once a day .", "1": "Taylor grew up in a health - conscious childhood home .", "2": "Taylor did not grow up in a health - conscious childhood home .", "3": "Taylor does not visit the gym at least once a day ."}], "errors": [[]], "entailments_dict": [{"5": ["3"]}, {"4": ["c"]}, {}, {"(¬3)": ["0"]}], "predicted_steps": [false, false, false, false]}
{"text": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day?", "id": "175", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All people who grew up in health-conscious childhood homes eat salads regularly.\nPremise 1.2: If people have good relationships with their parents, then they do not eat salads regularly.\nPremise 1.3: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nConclusion 1: Taylor grew up in a health-conscious childhood home or she didn't grow up in a health-conscious childhood home.\nPremise 2.1: If Taylor grew up in a health-conscious childhood home, then she eats salads regularly.\nPremise 2.2: If people have good relationships with their parents, then they do not visit the gym at least once a day.\nPremise 2.3: If Taylor has a good relationship with her parents, then she doesn't visit the gym at least once a day.\nPremise 2.4: If Taylor doesn't have a good relationship with her parents, then she visits the gym at least once a day.\nConclusion 2: Taylor visits the gym at least once a day or she doesn't visit the gym at least once a day.\nPremise 3.1: If Taylor visits the gym at least once a day, then she always fulfills her daily nutritional intakes.\nPremise 3.2: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\nConclusion 3: Taylor grew up in a health-conscious childhood home.\nPremise 4.1: Taylor grew up in a health-conscious childhood home or she didn't grow up in a health-conscious childhood home.\nPremise 4.2: Taylor visits the gym at least once a day or she doesn't visit the gym at least once a day.\nPremise 4.3: Taylor grew up in a health-conscious childhood home.\nConclusion 4: Taylor visits the gym at least once a day.\nAnswer: C. Uncertain.\n\nThe conclusion is uncertain because the passage does not provide enough information to determine whether Taylor visits the gym at least once a day. The passage only states that if Taylor visits the gym at least once a day, then she always fulfills her daily nutritional intakes, but it does not state that if Taylor fulfills her daily nutritional intakes, then she visits the gym at least once a day. Therefore, it is possible that Taylor fulfills her daily nutritional intakes without visiting the gym at least once a day.", "logic_premises": "[[(a→b), (c→d), ((4∧5)⊻(6∧7))], [(0→1), ((a→b)∪(c→d)), (4→5), (6→7)], [(0→1), ((5→6)∪(7→8))], [(0∨1), (2∨3), 4]]", "logic_conclusion": "[(8∨9), (8∨9), 4, 5]", "correspondance": [{"0": "X is a person who grew up in health - conscious childhood homes .", "1": "X eats salads regularly .", "2": "X have good relationships with people 's parents .", "3": "X do not eat salads regularly .", "4": "It is both true that Taylor grew up in a health - conscious childhood home .", "5": "Taylor has a good relationship with Taylor 's parents .", "6": "It is not true that Taylor grew up in a health - conscious childhood home .", "7": "It is not true that Taylor has a good relationship with Taylor 's parents .", "8": "Taylor grew up in a health - conscious childhood home .", "9": "Taylor did n't grow up in a health - conscious childhood home .", "a": "Taylor is a person who grew up in health - conscious childhood homes .", "b": "Taylor eats salads regularly .", "c": "Taylor have good relationships with people 's parents .", "d": "Taylor do not eat salads regularly ."}, {"0": "Taylor grew up in a health - conscious childhood home .", "1": "Taylor eats salads regularly .", "2": "X have good relationships with people 's parents .", "3": "X do not visit the gym at least once a day .", "4": "Taylor has a good relationship with Taylor 's parents .", "5": "Taylor does n't visit the gym at least once a day .", "6": "Taylor does n't have a good relationship with Taylor 's parents .", "7": "Taylor visits the gym at least once a day .", "8": "Taylor visits the gym at least once a day .", "9": "Taylor does n't visit the gym at least once a day .", "a": "the gym have good relationships with people 's parents .", "b": "the gym do not visit the gym at least once a day .", "c": "Taylor have good relationships with people 's parents .", "d": "Taylor do not visit the gym at least once a day ."}, {"0": "Taylor visits the gym at least once a day .", "1": "Taylor always fulfills Taylor 's daily nutritional intakes .", "2": "X is a person who fulfills their nutritional daily intakes .", "3": "X grew up in health - conscious childhood homes .", "4": "Taylor grew up in a health - conscious childhood home .", "5": "the gym is a person who fulfills their nutritional daily intakes .", "6": "the gym grew up in health - conscious childhood homes .", "7": "Taylor is a person who fulfills their nutritional daily intakes .", "8": "Taylor grew up in health - conscious childhood homes ."}, {"0": "Taylor grew up in a health - conscious childhood home .", "1": "Taylor did n't grow up in a health - conscious childhood home .", "2": "Taylor visits the gym at least once a day .", "3": "Taylor does n't visit the gym at least once a day .", "4": "Taylor grew up in a health - conscious childhood home .", "5": "Taylor visits the gym at least once a day ."}], "errors": [[]], "entailments_dict": [{"d": ["(¬b)"], "b": ["(¬d)"], "(¬8)": ["6"]}, {"5": ["9"], "7": ["8", "(¬d)"], "d": ["(¬7)"], "8": ["(¬d)"]}, {}, {"0": ["4"], "4": ["0"], "5": ["2"], "2": ["5"]}], "predicted_steps": [false, false, false, false]}
{"text": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The world championships is a sporting event?", "id": "176", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: The Olympic games is a sporting event.\nConclusion 1: The term \"Olympic games\" refers to a sporting event.\nPremise 2.1: The passage does not provide information about the world championships.\nConclusion 2: The passage does not provide information about the world championships being a sporting event or not.\nAnswer: C. Uncertain.\n\nNote: The answer is uncertain because the passage does not provide any information about the world championships.", "logic_premises": "[[0], [0]]", "logic_conclusion": "[1, 1]", "correspondance": [{"0": "The Olympic games is a sporting event .", "1": "The term \" Olympic games \" refers to a sporting event ."}, {"0": "the passage does not provide information about the world championships .", "1": "the passage does not provide information about the world championships being a sporting event or not ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The last Olympic games were not in Tokyo?", "id": "177", "ground_truth": "False", "reasoning": "<s> [INST] You will be presented with a passage and a question about that passage. There are options to be chosen from, only one of which is the correct answer. You need to write your step-by-step reasoning and conclude with the answer. One reasoning step should consist of a set of premises and one conclusion. The conclusion can be deduced immediately from the premises. Premises can only be sentences from the passage or previous conclusions. \nHere is an example:\nExample Passage: Last night, Mark either went to play in the gym or visited his teacher Tony. If Mark drove last night, he didn't go to play in the gym. Mark would go visit his teacher Tony only if he and his teacher had an appointment. In fact, Mark had no appointment with his teacher Tony in advance.\nExample Question: Is it true that Mark drove last night?\nExample Options: \nA. Yes.\nB. No.\nC. Uncertain.\n [/INST]Example Reasoning:\nPremise 1.1: Mark would go visit his teacher Tony only if he had an appointment. \nPremise 1.2: Mark had no appointment with his teacher Tony.\nConclusion 1: Mark didn't visit his teacher, Tony.\nPremise 2.1: Mark either went to the gym or visited his teacher Tony.\nPremise 2.2: Mark didn't visit his teacher Tony. \nConclusion 2: Mark went to the gym.\nPremise 3.1: If Mark drove last night, he didn't go to play in the gym.\nPremise 3.2: Mark went to the gym.\nConclusion 3: Mark didn't drive last night.\nPremise 4.1: Mark didn't drive last night.\nAnswer: B. No.\n [INST] Here is an other example:\nExample Passage: David knows Mr. Zhang's friend Jack, and Jack knows David's friend Ms. Lin. Everyone of them who knows Jack has a master's degree, and everyone of them who knows Ms. Lin is from Shanghai.\nExample Question: Is it true that David is from Shanghai?\nExample Options:\nA. Yes.\nB. No.\nC. Uncertain.\n [/INST]Example Reasoning:\nPremise 1.1: David knows Mr. Zhang's friend Jack, and Jack knows David's friend Ms. Lin.\nConclusion 1: David is friend with Ms. Lin.\nPremise 2.1: David is friend with Ms. Lin.\nPremise 2.2: Everyone of them who knows Jack has a master's degree, and everyone of them who knows Ms. Lin is from Shanghai.\nConclusion 2: David is from Shanghai.\nPremise 3.1: David is from Shanghai.\nAnswer: A. Yes.\n [INST] Passage: [BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo. \nQuestion: Is it true that The last Olympic games were not in Tokyo?\nOptions:\nA. Yes\nB. No\nC. Uncertain\n [/INST]Reasoning:\nPremise 1.1: The last Olympic games was in Tokyo.\nPremise 1.2: The statement \"The last Olympic games were not in Tokyo\" contradicts Premise 1.1.\nConclusion 1: The last Olympic games were in Tokyo.\nPremise 2.1: The last Olympic games were in Tokyo.\nPremise 2.2: The statement \"The last Olympic games were not in Tokyo\" contradicts Premise 2.1.\nConclusion 2: The statement \"The last Olympic games were not in Tokyo\" is false.\nAnswer: B. No.", "logic_premises": "[[0, ((4→5)∪((6→7)∪(8→9)))], [(0∨1), 2], [(0→1), 2], [0, (1∧2)], [0, (((6→7)∧(8→9))∪(((a→b)∧(c→d))∪(((e→f)∧(g→h))∪((i→j)∧(k→l)))))], [0, 1, 2], [0, 1]]", "logic_conclusion": "[3, 3, 3, 3, 5, 3, 2]", "correspondance": [{"0": "Mark would go visit Mark 's teacher Tony that Mark had an appointment .", "1": "X is an appointment with Mark 's teacher Tony .", "2": "Mark did not have X .", "3": "Mark did n't visit Mark 's teacher , Tony .", "4": "Mark is an appointment with Mark 's teacher Tony .", "5": "Mark did not have Mark .", "6": "his teacher Tony is an appointment with Mark 's teacher Tony .", "7": "Mark did not have his teacher Tony .", "8": "his teacher, Tony is an appointment with Mark 's teacher Tony .", "9": "Mark did not have his teacher, Tony ."}, {"0": "Mark either went to the gym .", "1": "Mark either visited Mark 's teacher Tony .", "2": "Mark did n't visit Mark 's teacher Tony .", "3": "Mark went to the gym ."}, {"0": "Mark drove last night .", "1": "Mark did n't go to play in the gym .", "2": "Mark went to the gym .", "3": "Mark did n't drive last night ."}, {"0": "Mark did n't drive last night .", "1": "David knows Mr. Zhang 's friend Jack .", "2": "Mr. Zhang 's friend Jack knows David 's friend Ms. Lin .", "3": "David is friend with David 's friend Ms. Lin ."}, {"0": "David is friend with Ms. Lin .", "1": "X is a person of them who knows Jack .", "2": "X has a master 's degree .", "3": "X is a person of them who knows Ms. Lin .", "4": "X is from Shanghai .", "5": "David is from Shanghai .", "6": "Shanghai is a person of them who knows Jack .", "7": "Shanghai has a master 's degree .", "8": "Shanghai is a person of them who knows Ms. Lin .", "9": "Shanghai is from Shanghai .", "a": "Jack is a person of them who knows Jack .", "b": "Jack has a master 's degree .", "c": "Jack is a person of them who knows Ms. Lin .", "d": "Jack is from Shanghai .", "e": "Ms. Lin is a person of them who knows Jack .", "f": "Ms. Lin has a master 's degree .", "g": "Ms. Lin is a person of them who knows Ms. Lin .", "h": "Ms. Lin is from Shanghai .", "i": "David is a person of them who knows Jack .", "j": "David has a master 's degree .", "k": "David is a person of them who knows Ms. Lin .", "l": "David is from Shanghai ."}, {"0": "David is from Shanghai .", "1": "The last Olympic games was in Tokyo .", "2": "The statement \" The last Olympic games were not in Tokyo \" contradicts Premise 1.1 .", "3": "The last Olympic games were in Tokyo ."}, {"0": "the last Olympic games were in Tokyo .", "1": "The statement \" the last Olympic games were not in Tokyo \" contradicts Premise 2.1 .", "2": "The statement \" the last Olympic games were not in Tokyo \" is false ."}], "errors": [[]], "entailments_dict": [{}, {}, {}, {}, {"l": ["5"]}, {}, {}], "predicted_steps": [false, false, false, false, false, false, false]}
{"text": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The United States won the most medals in the last Olympic games?", "id": "178", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: The Olympic games is a sporting event.\nPremise 1.2: The last Olympic games was in Tokyo.\nPremise 1.3: The United States won the most medals in Tokyo.\nConclusion 1: The United States won the most medals in the last Olympic games.\nAnswer: A. Yes.\n\nExplanation:\n\n* The first premise is not relevant to the question, but it is included in the passage.\n* The second premise establishes that the last Olympic games was in Tokyo.\n* The third premise establishes that The United States won the most medals in Tokyo.\n* The conclusion is a logical deduction from the second and third premises.", "logic_premises": "[[0, 1, 2]]", "logic_conclusion": "[3]", "correspondance": [{"0": "The Olympic games is a sporting event .", "1": "The last Olympic games was in Tokyo .", "2": "The United States won the most medals in Tokyo .", "3": "The United States won the most medals in The last Olympic games ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "All horses have hooves. No humans have hooves.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some humans are horses?", "id": "179", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All horses have hooves.\nPremise 1.2: No humans have hooves.\nConclusion 1: No humans are horses.\nPremise 2.1: No humans are horses.\nAnswer: B. No.\n\nExplanation:\nThe passage states that all horses have hooves and no humans have hooves. From this information, it can be concluded that no humans are horses, as horses and humans have different physical characteristics. Therefore, the answer is B. No.", "logic_premises": "[[(0→1), (2→3)]]", "logic_conclusion": "[(4→5)]", "correspondance": [{"0": "X is a horse .", "1": "X has hooves .", "2": "X is a human .", "3": "X does not have hooves .", "4": "X is a human .", "5": "X is not a horse ."}], "errors": [[]], "entailments_dict": [{"4": ["2"], "(¬5)": ["0"]}], "predicted_steps": [false]}
{"text": "Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Susan flies from LGA airport?", "id": "180", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Susan flies to LGA airport.\nPremise 1.2: The departure and arrival can not be the same airport.\nConclusion 1: Susan does not fly from LGA airport.\nPremise 2.1: John flies from LGA airport.\nAnswer: B. No.\n\nNote: The conclusion 1 is directly derived from the premises 1.1 and 1.2, which states that the departure and arrival can not be the same airport. Therefore, if Susan flies to LGA airport, she does not fly from LGA airport.", "logic_premises": "[[0, (1∧2)]]", "logic_conclusion": "[3]", "correspondance": [{"0": "Susan flies to LGA airport .", "1": "The departure can not be the same airport .", "2": "The arrival can not be the same airport .", "3": "Susan does not fly from LGA airport ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that John flies to LGA airport?", "id": "181", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Susan flies to LGA airport.\nPremise 1.2: The departure and arrival can not be the same airport.\nConclusion 1: Susan's departure airport is not LGA.\nPremise 2.1: John flies from LGA airport.\nPremise 2.2: The passage does not specify John's arrival airport.\nConclusion 2: The passage does not provide enough information to determine John's arrival airport.\nAnswer: C. Uncertain.\n\nThe answer is uncertain because the passage does not provide enough information about John's arrival airport. It is possible that John flies to LGA airport, but it is also possible that he flies to a different airport.", "logic_premises": "[[0, (1∧2)], [0, 1]]", "logic_conclusion": "[3, 2]", "correspondance": [{"0": "Susan flies to LGA airport .", "1": "The departure can not be the same airport .", "2": "The arrival can not be the same airport .", "3": "Susan 's departure airport is not LGA airport ."}, {"0": "John flies from LGA airport .", "1": "The passage does not specify John 's arrival airport .", "2": "The passage does not provide enough information to determine John 's arrival airport ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom is a grumpy person?", "id": "182", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: No one nice to animals is mean to animals.\nPremise 1.2: Some grumpy people are mean to animals.\nPremise 1.3: All animal lovers are nice to animals.\nPremise 2.1: If someone owns a pet, then they love animals.\nPremise 2.2: Tom is a pet owner.\nPremise 2.3: Tom, as a pet owner, loves animals.\nPremise 3.1: Tom, as an animal lover, is nice to animals.\nPremise 3.2: Grumpy people are mean to animals.\nPremise 3.3: Tom is not mean to animals.\nConclusion 1: Tom is not a grumpy person.\nAnswer: B. No.", "logic_premises": "[[(f→g), (h→i), (j→k), (l→m), 8, 9, a, (n→o), d]]", "logic_conclusion": "[e]", "correspondance": [{"0": "X is a person nice to animals .", "1": "X is not mean to animals .", "2": "X is a Some a grumpy person .", "3": "X is mean to an animal .", "4": "X is animal a lover .", "5": "X is nice to an animal .", "6": "X owns a pet .", "7": "X love animals .", "8": "Tom is a pet owner .", "9": "Tom , as a pet owner , loves animals .", "a": "Tom , is nice to animals .", "b": "X is a Grumpy person .", "c": "X is mean to an animal .", "d": "Tom is not mean to animals .", "e": "Tom is not a grumpy person .", "f": "Tom is a person nice to animals .", "g": "Tom is not mean to animals .", "h": "Tom is a Some a grumpy person .", "i": "Tom is mean to an animal .", "j": "Tom is animal a lover .", "k": "Tom is nice to an animal .", "l": "Tom owns a pet .", "m": "Tom love animals .", "n": "Tom is a Grumpy person .", "o": "Tom is mean to an animal ."}], "errors": [[]], "entailments_dict": [{"g": ["d"], "(¬e)": ["n"]}], "predicted_steps": [false]}
{"text": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom is not a grumpy person and mean to animals?", "id": "183", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: No one nice to animals is mean to animals.\nPremise 1.2: All animal lovers are nice to animals.\nPremise 1.3: If someone owns a pet, then they love animals.\nPremise 1.4: Tom is a pet owner.\nConclusion 1: Tom loves animals.\nPremise 2.1: Tom loves animals.\nPremise 2.2: All animal lovers are nice to animals.\nConclusion 2: Tom is nice to animals.\nPremise 3.1: No one nice to animals is mean to animals.\nPremise 3.2: Tom is nice to animals.\nConclusion 3: Tom is not mean to animals.\nPremise 4.1: Tom is not mean to animals.\nPremise 4.2: Some grumpy people are mean to animals.\nConclusion 4: Tom is not a grumpy person.\nAnswer: A. Yes.\n\nExplanation:\n\n* From the passage, we know that Tom is a pet owner, which means that Tom loves animals (Premise 1.4, 1.3).\n* Since Tom loves animals, Tom is nice to animals (Premise 2.2, 2.1).\n* Since Tom is nice to animals, Tom is not mean to animals (Premise 3.1, 3.2).\n* Since Tom is not mean to animals, Tom is not a grumpy person (Premise 4.2, 4.1).\n* Therefore, Tom is not a grumpy person and mean to animals.", "logic_premises": "[[(8→9), (a→b), (c→d), 6], [0, (4→5)], [(4→5), 2], [0, (4→5)]]", "logic_conclusion": "[7, 3, 3, 3]", "correspondance": [{"0": "X is a person nice to animals .", "1": "X is not mean to animals .", "2": "X is animal a lover .", "3": "X is nice to an animal .", "4": "X owns a pet .", "5": "X love animals .", "6": "Tom is a pet owner .", "7": "Tom loves animals .", "8": "Tom is a person nice to animals .", "9": "Tom is not mean to animals .", "a": "Tom is animal a lover .", "b": "Tom is nice to an animal .", "c": "Tom owns a pet .", "d": "Tom love animals ."}, {"0": "Tom loves animals .", "1": "X is animal a lover .", "2": "X is nice to an animal .", "3": "Tom is nice to animals .", "4": "Tom is animal a lover .", "5": "Tom is nice to an animal ."}, {"0": "X is a person nice to animals .", "1": "X is not mean to animals .", "2": "Tom is nice to animals .", "3": "Tom is not mean to animals .", "4": "Tom is a person nice to animals .", "5": "Tom is not mean to animals ."}, {"0": "Tom is not mean to animals .", "1": "X is a Some a grumpy person .", "2": "X is mean to an animal .", "3": "Tom is not a grumpy person .", "4": "Tom is a Some a grumpy person .", "5": "Tom is mean to an animal ."}], "errors": [[]], "entailments_dict": [{}, {}, {"2": ["4"], "5": ["3"]}, {}], "predicted_steps": [false, false, true, false]}
{"text": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover?", "id": "184", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: No one nice to animals is mean to animals.\nPremise 1.2: Some grumpy people are mean to animals.\nPremise 1.3: All animal lovers are nice to animals.\nPremise 2.1: If someone owns a pet, then they love animals.\nPremise 2.2: Tom is a pet owner.\nPremise 2.3: Tom owns a pet, so Tom loves animals.\nPremise 3.1: Tom loves animals.\nPremise 3.2: All animal lovers are nice to animals.\nPremise 3.3: No one nice to animals is mean to animals.\nConclusion 1: Tom is not mean to animals.\nPremise 4.1: Some grumpy people are mean to animals.\nConclusion 2: Tom is not a grumpy person.\nPremise 5.1: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nPremise 5.2: Tom is not a grumpy person.\nPremise 5.3: Tom is not mean to animals.\nConclusion 3: Tom is neither a grumpy person nor an Animal Lover.\nAnswer: A. Yes.\n\nExplanation:\n\n* From the passage, we know that Tom is a pet owner, which means Tom loves animals.\n* From the premises 3.1, 3.2, and 3.3, we can conclude that Tom is not mean to animals.\n* From the premise 4.1, we can conclude that Tom is not a grumpy person.\n* From the premise 5.1, if Tom is not a grumpy person and not mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\n* Therefore, the answer is A. Yes.", "logic_premises": "[[(h→i), (j→k), (l→m), (n→o), 8, (9∧a), b, (p→q), (r→s)], [(3→4)], [(0→(1∧2)), 3, 4]]", "logic_conclusion": "[g, 2, (5∧6)]", "correspondance": [{"0": "X is a person nice to animals .", "1": "X is not mean to animals .", "2": "X is a Some a grumpy person .", "3": "X is mean to an animal .", "4": "X is animal a lover .", "5": "X is nice to an animal .", "6": "X owns a pet .", "7": "X love animals .", "8": "Tom is a pet owner .", "9": "Tom owns a pet .", "a": "Tom loves animals .", "b": "Tom loves animals .", "c": "X is animal a lover .", "d": "X is nice to an animal .", "e": "X is a person nice to animals .", "f": "X is not mean to animals .", "g": "Tom is not mean to animals .", "h": "Tom is a person nice to animals .", "i": "Tom is not mean to animals .", "j": "Tom is a Some a grumpy person .", "k": "Tom is mean to an animal .", "l": "Tom is animal a lover .", "m": "Tom is nice to an animal .", "n": "Tom owns a pet .", "o": "Tom love animals .", "p": "Tom is animal a lover .", "q": "Tom is nice to an animal .", "r": "Tom is a person nice to animals .", "s": "Tom is not mean to animals ."}, {"0": "X is a Some a grumpy person .", "1": "X is mean to an animal .", "2": "Tom is not a grumpy person .", "3": "Tom is a Some a grumpy person .", "4": "Tom is mean to an animal ."}, {"0": "Tom is not a grumpy person and mean to animals .", "1": "Tom is not a grumpy person .", "2": "Tom is not an Animal Lover .", "3": "Tom is not a grumpy person .", "4": "Tom is not mean to animals .", "5": "Tom is not a grumpy person .", "6": "Tom is not an Animal Lover ."}], "errors": [[]], "entailments_dict": [{"b": ["a"], "a": ["b"], "9": ["n"], "i": ["g"], "s": ["g"]}, {}, {"1": ["3", "5"], "5": ["3"], "2": ["6"], "3": ["5"]}], "predicted_steps": [false, false, false]}
{"text": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dani Shapiro is a novel writer?", "id": "185", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If a book is a novel and it is written by a person, then the person is a novel writer.\nPremise 1.2: Family History is a novel written by Dani Shapiro.\nConclusion 1: Dani Shapiro is a novel writer.\nPremise 2.1: Dani Shapiro is a novel writer.\nAnswer: A. Yes.\n\nExplanation:\n\n* The passage states that Family History is a novel written by Dani Shapiro.\n* This satisfies the condition in Premise 1.1, which states that if a book is a novel and it is written by a person, then the person is a novel writer.\n* Therefore, Dani Shapiro is a novel writer.", "logic_premises": "[[((((6∧7)∧2)→3)∪((((8∧9)∧2)→3)∪(((a∧b)∧2)→3))), 4]]", "logic_conclusion": "[5]", "correspondance": [{"0": "X is a book", "1": "X is a novel .", "2": "a book is written by a person .", "3": "a person is a novel writer .", "4": "Family History is a novel written by Dani Shapiro .", "5": "Dani Shapiro is a novel writer .", "6": "the person is a book", "7": "the person is a novel .", "8": "Dani Shapiro is a book", "9": "Dani Shapiro is a novel .", "a": "Family History is a book", "b": "Family History is a novel ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Family Secrets is a novel?", "id": "186", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: A podcast is not a novel.\nPremise 1.2: Family Secrets is a podcast.\nConclusion 1: Family Secrets is not a novel.\nPremise 2.1: Conclusion 1: Family Secrets is not a novel.\nAnswer: B. No.\n\nNote: The background information about Dani Shapiro, Family History, and Boston are not relevant to the question and do not affect the conclusion.", "logic_premises": "[[(4→5), 2]]", "logic_conclusion": "[3]", "correspondance": [{"0": "X is A podcast", "1": "X is not a novel .", "2": "Family Secrets is a podcast .", "3": "Family Secrets is not a novel .", "4": "Family Secrets is A podcast", "5": "Family Secrets is not a novel ."}], "errors": [[]], "entailments_dict": [{"5": ["3"]}], "predicted_steps": [false]}
{"text": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dani Shapiro was born in Boston?", "id": "187", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: A podcast is not a novel.\nPremise 1.2: Family History is a novel.\nConclusion 1: Dani Shapiro created a podcast, but it is not the same as Family History.\nPremise 2.1: If a book is a novel and it is written by a person, then the person is a novel writer.\nPremise 2.2: Dani Shapiro is a novel writer.\nConclusion 2: Dani Shapiro wrote the novel Family History.\nPremise 3.1: If a person is born in American City, the person is American.\nPremise 3.2: Boston is an American city.\nConclusion 3: Dani Shapiro was not necessarily born in Boston.\nPremise 4.1: Dani Shapiro was not necessarily born in Boston.\nAnswer: B. No.", "logic_premises": "[[((5→6)∪(7→8)), 2], [((((6∧7)∧2)→3)∪((((8∧9)∧2)→3)∪(((a∧b)∧2)→3))), 4], [(((5∧6)→7)∪(((8∧9)→a)∪(((b∧c)→d)∪((e∧f)→g)))), 3]]", "logic_conclusion": "[(3∧4), 5, 4]", "correspondance": [{"0": "X is A podcast", "1": "X is not a novel .", "2": "Family History is a novel .", "3": "Dani Shapiro created a podcast .", "4": "a podcast is not the same as Family History .", "5": "Dani Shapiro is A podcast", "6": "Dani Shapiro is not a novel .", "7": "Family History is A podcast", "8": "Family History is not a novel ."}, {"0": "X is a book", "1": "X is a novel .", "2": "a book is written by a person .", "3": "a person is a novel writer .", "4": "Dani Shapiro is a novel writer .", "5": "Dani Shapiro wrote the novel Family History .", "6": "the novel Family History is a book", "7": "the novel Family History is a novel .", "8": "the person is a book", "9": "the person is a novel .", "a": "Dani Shapiro is a book", "b": "Dani Shapiro is a novel ."}, {"0": "X is a person", "1": "X is born in American City .", "2": "X is American .", "3": "Boston is an American city .", "4": "Dani Shapiro was not necessarily born in Boston .", "5": "American City is a person", "6": "American City is born in American City .", "7": "American City is American .", "8": "Boston is a person", "9": "Boston is born in American City .", "a": "Boston is American .", "b": "the person is a person", "c": "the person is born in American City .", "d": "the person is American .", "e": "Dani Shapiro is a person", "f": "Dani Shapiro is born in American City .", "g": "Dani Shapiro is American ."}], "errors": [[]], "entailments_dict": [{"2": ["(¬8)"], "8": ["(¬2)"]}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Yuri is an American?", "id": "188", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Some basketball players are not American.\nPremise 1.2: All basketball players are tall.\nPremise 1.3: If someone is tall, they wear large shoes.\nPremise 1.4: If someone wears large shoes, they wear large-sized clothes.\nPremise 2.1: Yuri does not wear large-size clothes.\nConclusion 2: Yuri does not wear large shoes.\nConclusion 3: Yuri is not a basketball player.\nConclusion 4: There is no information about Yuri's nationality.\nAnswer: C. Uncertain.\n\nExplanation:\n\n* Premise 1.1 and 1.2 establish that all basketball players are tall.\n* Premise 1.3 and 1.4 establish a chain of implications: if someone is tall, they wear large shoes, and if they wear large shoes, they wear large-sized clothes.\n* Premise 2.1 states that Yuri does not wear large-sized clothes.\n* From Premise 2.1 and 1.4, we can conclude that Yuri does not wear large shoes.\n* From Premise 1.3 and the conclusion that Yuri does not wear large shoes, we can conclude that Yuri is not tall.\n* From Premise 1.2 and the conclusion that Yuri is not tall, we can conclude that Yuri is not a basketball player.\n* However, there is no information about Yuri's nationality, so we cannot determine whether Yuri is an American or not.", "logic_premises": "[[0, (a→b), (c→d), (e→(f∧g)), 8]]", "logic_conclusion": "[9]", "correspondance": [{"0": "Some basketball players are not American .", "1": "X is basketball a player .", "2": "X is tall .", "3": "X is tall .", "4": "X wear large shoes .", "5": "X wears large shoes .", "6": "X wear large clothes .", "7": "X wear sized clothes .", "8": "Yuri does not wear large - size clothes .", "9": "Yuri does not wear large shoes .", "a": "Yuri is basketball a player .", "b": "Yuri is tall .", "c": "Yuri is tall .", "d": "Yuri wear large shoes .", "e": "Yuri wears large shoes .", "f": "Yuri wear large clothes .", "g": "Yuri wear sized clothes ."}], "errors": [[]], "entailments_dict": [{"d": ["e"], "b": ["c"], "9": ["(¬d)"], "(¬9)": ["e"]}], "predicted_steps": [false]}
{"text": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Yuri is not an American basketball player?", "id": "189", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: All basketball players are tall.\nPremise 1.2: Yuri does not wear large-size clothes.\nPremise 1.3: If someone wears large shoes, they wear large-sized clothes.\nConclusion 1: Yuri does not wear large shoes.\nPremise 2.1: If someone is tall, they wear large shoes.\nPremise 2.2: Yuri does not wear large shoes.\nConclusion 2: Yuri is not tall.\nPremise 3.1: All basketball players are tall.\nPremise 3.2: Yuri is not tall.\nConclusion 3: Yuri is not a basketball player.\nPremise 4.1: Some basketball players are not American.\nPremise 4.2: Yuri is not a basketball player.\nConclusion 4: Yuri is not an American basketball player.\nAnswer: A. Yes.", "logic_premises": "[[(7→8), 2, (9→(a∧b))], [(4→5), 2], [(4→5), 2], [0, 1]]", "logic_conclusion": "[6, 3, 3, 2]", "correspondance": [{"0": "X is basketball a player .", "1": "X is tall .", "2": "Yuri does not wear large - size clothes .", "3": "X wears large shoes .", "4": "X wear large clothes .", "5": "X wear sized clothes .", "6": "Yuri does not wear large shoes .", "7": "Yuri is basketball a player .", "8": "Yuri is tall .", "9": "Yuri wears large shoes .", "a": "Yuri wear large clothes .", "b": "Yuri wear sized clothes ."}, {"0": "X is tall .", "1": "X wear large shoes .", "2": "Yuri does not wear large shoes .", "3": "Yuri is not tall .", "4": "Yuri is tall .", "5": "Yuri wear large shoes ."}, {"0": "X is basketball a player .", "1": "X is tall .", "2": "Yuri is not tall .", "3": "Yuri is not a basketball player .", "4": "Yuri is basketball a player .", "5": "Yuri is tall ."}, {"0": "Some basketball players are not American .", "1": "Yuri is not a basketball player .", "2": "Yuri is not an American basketball player ."}], "errors": [[]], "entailments_dict": [{"(¬6)": ["9"]}, {"2": ["(¬5)"], "5": ["(¬2)"], "(¬3)": ["4"]}, {"2": ["(¬5)"], "5": ["(¬2)"], "(¬3)": ["4"]}, {}], "predicted_steps": [false, true, true, false]}
{"text": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Yuri is an American basketball player?", "id": "190", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All basketball players are tall.\nPremise 1.2: Yuri does not wear large-size clothes.\nPremise 1.3: If someone wears large shoes, they wear large-sized clothes.\nConclusion 1: Yuri does not wear large shoes.\nPremise 2.1: If someone is tall, they wear large shoes.\nPremise 2.2: Yuri does not wear large shoes.\nConclusion 2: Yuri is not tall.\nPremise 3.1: All basketball players are tall.\nPremise 3.2: Yuri is not tall.\nConclusion 3: Yuri is not a basketball player.\nPremise 4.1: Some basketball players are not American.\nPremise 4.2: Yuri is not a basketball player.\nAnswer: B. No.\n\nNote: The conclusion that Yuri is not tall is based on the premise that if someone wears large shoes, they wear large-sized clothes, and the observation that Yuri does not wear large-sized clothes. This allows us to infer that Yuri does not wear large shoes, and therefore, is not tall. The conclusion that Yuri is not a basketball player is based on the premise that all basketball players are tall, and the observation that Yuri is not tall. This allows us to infer that Yuri is not a basketball player. The final answer is then that Yuri is not an American basketball player.", "logic_premises": "[[(7→8), 2, (9→(a∧b))], [(4→5), 2], [(4→5), 2]]", "logic_conclusion": "[6, 3, 3]", "correspondance": [{"0": "X is basketball a player .", "1": "X is tall .", "2": "Yuri does not wear large - size clothes .", "3": "X wears large shoes .", "4": "X wear large clothes .", "5": "X wear sized clothes .", "6": "Yuri does not wear large shoes .", "7": "Yuri is basketball a player .", "8": "Yuri is tall .", "9": "Yuri wears large shoes .", "a": "Yuri wear large clothes .", "b": "Yuri wear sized clothes ."}, {"0": "X is tall .", "1": "X wear large shoes .", "2": "Yuri does not wear large shoes .", "3": "Yuri is not tall .", "4": "Yuri is tall .", "5": "Yuri wear large shoes ."}, {"0": "X is basketball a player .", "1": "X is tall .", "2": "Yuri is not tall .", "3": "Yuri is not a basketball player .", "4": "Yuri is basketball a player .", "5": "Yuri is tall ."}], "errors": [[]], "entailments_dict": [{"(¬6)": ["9"]}, {"2": ["(¬5)"], "5": ["(¬2)"], "(¬3)": ["4"]}, {"2": ["(¬5)"], "5": ["(¬2)"], "(¬3)": ["4"]}], "predicted_steps": [false, true, true]}
{"text": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Yuri does not wear large shoes, then Yuri is an American basketball player?", "id": "191", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: All basketball players are tall.\nPremise 1.2: If someone is tall, they wear large shoes.\nPremise 1.3: If someone wears large shoes, they wear large-sized clothes.\nPremise 2.1: Yuri does not wear large-size clothes.\nConclusion 2: Yuri wears small-sized clothes.\nPremise 3.1: If Yuri wears small-sized clothes, Yuri does not wear large shoes.\nConclusion 3: Yuri does not wear large shoes.\nPremise 4.1: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nConclusion 4: Yuri is an American basketball player.\nPremise 5.1: Yuri is an American basketball player.\nPremise 5.2: Some basketball players are not American.\nConclusion 5: Yuri is not one of the non-American basketball players.\nPremise 6.1: Yuri is not one of the non-American basketball players.\nPremise 6.2: Yuri is an American basketball player.\nPremise 6.3: Some basketball players are not American.\nConclusion 6: The passage does not provide enough information to determine if Yuri is an American basketball player.\nAnswer: C. Uncertain.\n\nExplanation:\nThe initial conclusion is that Yuri is an American basketball player, but this is contradicted by the information that some basketball players are not American. The passage does not provide enough information to determine if Yuri is one of the non-American basketball players or not. Therefore, the answer is uncertain.", "logic_premises": "[[(a→b), (c→d), (e→(f∧g)), 7], [((0∧1)→2)], [(0→1)], [0, 1], [0, 1, 2]]", "logic_conclusion": "[(8∧9), 3, 2, 2, 3]", "correspondance": [{"0": "X is basketball a player .", "1": "X is tall .", "2": "X is tall .", "3": "X wear large shoes .", "4": "X wears large shoes .", "5": "X wear large clothes .", "6": "X wear sized clothes .", "7": "Yuri does not wear large - size clothes .", "8": "Yuri wears small clothes .", "9": "Yuri wears sized clothes .", "a": "Yuri is basketball a player .", "b": "Yuri is tall .", "c": "Yuri is tall .", "d": "Yuri wear large shoes .", "e": "Yuri wears large shoes .", "f": "Yuri wear large clothes .", "g": "Yuri wear sized clothes ."}, {"0": "Yuri wears small clothes .", "1": "Yuri wears sized clothes .", "2": "Yuri does not wear large shoes .", "3": "Yuri does not wear large shoes ."}, {"0": "Yuri does not wear large shoes .", "1": "Yuri is an American basketball player .", "2": "Yuri is an American basketball player ."}, {"0": "Yuri is an American basketball player .", "1": "Some basketball players are not American .", "2": "Yuri is not one of Some basketball players ."}, {"0": "Yuri is not one of the non - American basketball players .", "1": "Yuri is an American basketball player .", "2": "Some basketball players are not American .", "3": "The passage does not provide enough information to determine if Yuri is an American basketball player ."}], "errors": [[]], "entailments_dict": [{"b": ["c"], "d": ["e"], "g": ["9"]}, {"2": ["3"]}, {"1": ["2"]}, {}, {}], "predicted_steps": [false, false, false, false, false]}
{"text": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Yuri is not an American basketball player, then Yuri is a basketball player?", "id": "192", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Some basketball players are not American.\nPremise 1.2: All basketball players are tall.\nPremise 1.3: If someone is tall, they wear large shoes.\nPremise 1.4: If someone wears large shoes, they wear large-sized clothes.\nPremise 1.5: Yuri does not wear large-size clothes.\nConclusion 1: Yuri is not tall.\nPremise 2.1: Yuri is not tall.\nPremise 2.2: All basketball players are tall.\nConclusion 2: Yuri is not a basketball player.\nPremise 3.1: Yuri is not a basketball player.\nPremise 3.2: Some basketball players are not American.\nConclusion 3: Yuri is not an American basketball player.\nPremise 4.1: If Yuri is not an American basketball player, then Yuri is a basketball player.\nPremise 4.2: Yuri is not an American basketball player.\nConclusion 4: Yuri is not a basketball player.\nAnswer: B. No.\n\nBecause, if Yuri is not an American basketball player, it doesn't mean that Yuri is a basketball player. As we have seen in the reasoning, Yuri is not a basketball player.", "logic_premises": "[[0, (a→b), (c→d), (e→(f∧g)), 8], [0, (4→5)], [0, 1], [(0→1), 2]]", "logic_conclusion": "[9, 3, 2, 3]", "correspondance": [{"0": "Some basketball players are not American .", "1": "X is basketball a player .", "2": "X is tall .", "3": "X is tall .", "4": "X wear large shoes .", "5": "X wears large shoes .", "6": "X wear large clothes .", "7": "X wear sized clothes .", "8": "Yuri does not wear large - size clothes .", "9": "Yuri is not tall .", "a": "Yuri is basketball a player .", "b": "Yuri is tall .", "c": "Yuri is tall .", "d": "Yuri wear large shoes .", "e": "Yuri wears large shoes .", "f": "Yuri wear large clothes .", "g": "Yuri wear sized clothes ."}, {"0": "Yuri is not tall .", "1": "X is basketball a player .", "2": "X is tall .", "3": "Yuri is not a basketball player .", "4": "Yuri is basketball a player .", "5": "Yuri is tall ."}, {"0": "Yuri is not a basketball player .", "1": "Some basketball players are not American .", "2": "Yuri is not an American basketball player ."}, {"0": "Yuri is not an American basketball player .", "1": "Yuri is a basketball player .", "2": "Yuri is not an American basketball player .", "3": "Yuri is not a basketball player ."}], "errors": [[]], "entailments_dict": [{"d": ["e"], "b": ["c"], "9": ["(¬b)"], "(¬9)": ["c"]}, {"0": ["(¬5)"], "5": ["(¬0)"], "(¬3)": ["4"]}, {}, {"2": ["0"], "3": ["(¬1)"]}], "predicted_steps": [false, true, false, false]}
{"text": "Events are either happy or sad. At least one event is happy.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that All events are sad?", "id": "193", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Events are either happy or sad.\nPremise 1.2: At least one event is happy.\nConclusion 1: Not all events are sad.\nAnswer: B. No.\n\nExplanation:\n\n* From Premise 1.1, we know that each event can be classified as either happy or sad.\n* Premise 1.2 tells us that at least one event is happy.\n* Therefore, not all events can be sad, as there is at least one happy event.\n* Hence, the answer is B. No.", "logic_premises": "[[(0→(1⊻2)), 3]]", "logic_conclusion": "[4]", "correspondance": [{"0": "X is an Event .", "1": "X is happy .", "2": "X is sad .", "3": "At least one event is happy .", "4": "Not all events are sad ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Steinhauer was not the winner of the 1992 du Maurier Classic?", "id": "194", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: The winner of the 1992 du Maurier Classic was Steinhauer.\nPremise 1.2: Steinhauer participated in the 1992 du Maurier Classic.\nConclusion 1: Steinhauer is the winner of the 1992 du Maurier Classic and participated in the 1992 du Maurier Classic.\nPremise 2.1: There was one six-way tie on the leaderboard.\nPremise 2.2: One person in the six-way tie was from Belgium.\nPremise 2.3: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nPremise 2.4: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nConclusion 2: Descampe participated in the 1992 du Maurier Classic.\nPremise 3.1: Steinhauer is the winner of the 1992 du Maurier Classic and participated in the 1992 du Maurier Classic.\nPremise 3.2: Descampe participated in the 1992 du Maurier Classic.\nConclusion 3: Steinhauer was the winner of the 1992 du Maurier Classic.\nAnswer: A. Yes (Steinhauer was the winner of the 1992 du Maurier Classic) is not true.\n\nNote: The question asks if it is true that Steinhauer was not the winner, which is not the case, so the answer is A. Yes, it is not true that Steinhauer was not the winner.", "logic_premises": "[[0, 1], [0, 1, (2∧3), ((7→8)∪((9→a)∪((b→c)∪((d→e)∪((f→g)∪(h→i))))))], [(0∧1), 2]]", "logic_conclusion": "[(2∧3), 6, 3]", "correspondance": [{"0": "The winner of the 1992 du Maurier Classic was Steinhauer .", "1": "Steinhauer participated in the 1992 du Maurier Classic .", "2": "Steinhauer is the winner of the 1992 du Maurier Classic .", "3": "Steinhauer participated in the 1992 du Maurier Classic ."}, {"0": "There was one six - way tie on the leaderboard .", "1": "One person in the six - way tie was from Belgium .", "2": "One person in the six - way tie is from Belgium .", "3": "One person in the six - way tie is on the leaderboard of the 1992 du Maurier Classic .", "4": "X is a person on the leaderboard of the 1992 du Maurier Classic .", "5": "X participated in the 1992 du Maurier Classic .", "6": "One person in the six - way tie participated in the 1992 du Maurier Classic .", "7": "the leaderboard of the 1992 du Maurier Classic is a person on the leaderboard of the 1992 du Maurier Classic .", "8": "the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic .", "9": "the leaderboard is a person on the leaderboard of the 1992 du Maurier Classic .", "a": "the leaderboard participated in the 1992 du Maurier Classic .", "b": "the 1992 du Maurier Classic is a person on the leaderboard of the 1992 du Maurier Classic .", "c": "the 1992 du Maurier Classic participated in the 1992 du Maurier Classic .", "d": "the six-way tie is a person on the leaderboard of the 1992 du Maurier Classic .", "e": "the six-way tie participated in the 1992 du Maurier Classic .", "f": "Descampe is a person on the leaderboard of the 1992 du Maurier Classic .", "g": "Descampe participated in the 1992 du Maurier Classic .", "h": "Belgium is a person on the leaderboard of the 1992 du Maurier Classic .", "i": "Belgium participated in the 1992 du Maurier Classic ."}, {"0": "Steinhauer is the winner of the 1992 du Maurier Classic .", "1": "Steinhauer participated in the 1992 du Maurier Classic .", "2": "Descampe participated in the 1992 du Maurier Classic .", "3": "Steinhauer was the winner of the 1992 du Maurier Classic ."}], "errors": [[]], "entailments_dict": [{"3": ["1"], "1": ["3"]}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic?", "id": "195", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: The winner of the 1992 du Maurier Classic was Steinhauer.\nPremise 1.2: Steinhauer participated in the 1992 du Maurier Classic.\nPremise 1.3: There was one six-way tie on the leaderboard.\nPremise 1.4: One person in the six-way tie was from Belgium.\nPremise 2.1: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nPremise 2.2: All people on the leaderboard of the 199", "logic_premises": "[]", "logic_conclusion": "[]", "correspondance": [], "errors": ["No steps found in reasoning.", []], "entailments_dict": [], "predicted_steps": []}
{"text": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that KiKi is terricolous?", "id": "196", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: If an animal barks, then Jane does not like it.\nPremise 1.2: All dogs are animals that bark.\nPremise 1.3: KiKi is not a dog. (This information is not explicitly stated in the passage, but it can be inferred since dogs are animals that bark and Jane does not like it, and KiKi's status regarding barking is not specified)\nPremise 1.4: If an animal jumps, then Jane likes it.\nPremise 1.5: If an animal has legs, then it jumps.\nPremise 1.6: If an animal is terricolous, then it has legs.\nPremise 1.7: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nPremise 1.8: KiKi neither jumps nor has legs.\nConclusion 1: KiKi is terricolous or has legs.\nPremise 2.1: KiKi is terricolous or has legs.\nPremise 2.2: If KiKi is terricolous, then it has legs.\nPremise 2.3: KiKi neither jumps nor has legs.\nConclusion 2: KiKi is not terricolous.\nPremise 3.1: KiKi is not terricolous.\nAnswer: B. No.\n\nNote: The answer is B, but the reasoning process is not entirely solid because the passage does not explicitly state that if an animal is terricolous, then it cannot jump or have legs. Therefore, the answer could be C. Uncertain, depending on the context and assumptions made about the relationships between these properties.", "logic_premises": "[[(((n∧o)→p)∪((q∧r)→s)), ((t→u)∪(v→w)), 5, (((x∧y)→z)∪((A∧B)→C)), (((D∧E)→F)∪((G∧H)→I)), (((J∧K)→L)∪((M∧N)→O)), ((f∧g)→(h∨i)), (j∧k)], [(0∨1), (2→3), (4∧5)]]", "logic_conclusion": "[(l∨m), 6]", "correspondance": [{"0": "X is an animal", "1": "X barks .", "2": "Jane does not like X .", "3": "X is a dog .", "4": "X is an animal that barks .", "5": "KiKi is not a dog . .", "6": "X is an animal", "7": "X jumps .", "8": "Jane likes X .", "9": "X is an animal", "a": "X has legs .", "b": "X jumps .", "c": "X is an animal", "d": "X is terricolous .", "e": "X has legs .", "f": "KiKi does not jump .", "g": "KiKi does not have legs .", "h": "KiKi is terricolous .", "i": "KiKi has legs .", "j": "KiKi does not jump .", "k": "KiKi does not have legs .", "l": "KiKi is terricolous .", "m": "KiKi has legs .", "n": "KiKi is an animal", "o": "KiKi barks .", "p": "Jane does not like KiKi .", "q": "Jane is an animal", "r": "Jane barks .", "s": "Jane does not like Jane .", "t": "KiKi is a dog .", "u": "KiKi is an animal that barks .", "v": "Jane is a dog .", "w": "Jane is an animal that barks .", "x": "KiKi is an animal", "y": "KiKi jumps .", "z": "Jane likes KiKi .", "A": "Jane is an animal", "B": "Jane jumps .", "C": "Jane likes Jane .", "D": "KiKi is an animal", "E": "KiKi has legs .", "F": "KiKi jumps .", "G": "Jane is an animal", "H": "Jane has legs .", "I": "Jane jumps .", "J": "KiKi is an animal", "K": "KiKi is terricolous .", "L": "KiKi has legs .", "M": "Jane is an animal", "N": "Jane is terricolous .", "O": "Jane has legs ."}, {"0": "KiKi is terricolous .", "1": "KiKi has legs .", "2": "KiKi is terricolous .", "3": "KiKi has legs .", "4": "KiKi does not jump .", "5": "KiKi does not have legs .", "6": "KiKi is not terricolous ."}], "errors": [[]], "entailments_dict": [{"L": ["E", "m"], "j": ["f", "(¬F)"], "i": ["E", "m"], "O": ["H"], "k": ["g"], "I": ["B"], "F": ["y", "(¬j)"], "h": ["K", "l"], "l": ["K"], "m": ["E"], "s": ["(¬C)"], "z": ["(¬p)"], "p": ["(¬z)"], "C": ["(¬s)"], "(¬y)": ["f", "j"], "(¬f)": ["y"], "(¬j)": ["y"]}, {"3": ["1"], "0": ["2"], "6": ["(¬0)"], "(¬6)": ["0", "2"]}], "predicted_steps": [true, false]}
{"text": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that KiKi barks and is a dog?", "id": "197", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: If an animal barks, then Jane does not like it.\nPremise 1.2: All dogs are animals that bark.\nConclusion 1: If KiKi is a dog, then Jane does not like KiKi.\nPremise 2.1: If an animal jumps, then Jane likes it.\nPremise 2.2: If an animal has legs, then it jumps.\nPremise 2.3: If an animal is terricolous, then it has legs.\nPremise 2.4: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nConclusion 2: KiKi does not jump and does not have legs.\nConclusion 3: KiKi is terricolous.\nConclusion 4: KiKi does not have legs.\nConclusion 5: KiKi is not a dog.\nAnswer: B. No.\n\nExplanation:\n\n* From the passage, we know that all dogs bark, and if an animal barks, Jane does not like it. Therefore, if KiKi is a dog, Jane does not like KiKi.\n* We also know that if an animal jumps, Jane likes it, and if an animal has legs, then it jumps. However, we are told that KiKi neither jumps nor has legs.\n* From this information, we can conclude that KiKi is terricolous, meaning it lives on land.\n* Since KiKi does not have legs, it cannot be a dog, as all dogs have legs.\n* Therefore, the answer is no, KiKi is not a dog.", "logic_premises": "[[(((7∧8)→9)∪((a∧b)→c)), ((d→e)∪(f→g))], [(((f∧g)→h)∪((i∧j)→k)), (((l∧m)→n)∪((o∧p)→q)), (((r∧s)→t)∪((u∧v)→w)), ((9∧a)→(b∨c))]]", "logic_conclusion": "[(5→6), (d∧e)]", "correspondance": [{"0": "X is an animal", "1": "X barks .", "2": "Jane does not like X .", "3": "X is a dog .", "4": "X is an animal that barks .", "5": "KiKi is a dog .", "6": "Jane does not like KiKi .", "7": "KiKi is an animal", "8": "KiKi barks .", "9": "Jane does not like KiKi .", "a": "Jane is an animal", "b": "Jane barks .", "c": "Jane does not like Jane .", "d": "KiKi is a dog .", "e": "KiKi is an animal that barks .", "f": "Jane is a dog .", "g": "Jane is an animal that barks ."}, {"0": "X is an animal", "1": "X jumps .", "2": "Jane likes X .", "3": "X is an animal", "4": "X has legs .", "5": "X jumps .", "6": "X is an animal", "7": "X is terricolous .", "8": "X has legs .", "9": "KiKi does not jump .", "a": "KiKi does not have legs .", "b": "KiKi is terricolous .", "c": "KiKi has legs .", "d": "KiKi does not jump .", "e": "KiKi does not have legs .", "f": "KiKi is an animal", "g": "KiKi jumps .", "h": "Jane likes KiKi .", "i": "Jane is an animal", "j": "Jane jumps .", "k": "Jane likes Jane .", "l": "KiKi is an animal", "m": "KiKi has legs .", "n": "KiKi jumps .", "o": "Jane is an animal", "p": "Jane has legs .", "q": "Jane jumps .", "r": "KiKi is an animal", "s": "KiKi is terricolous .", "t": "KiKi has legs .", "u": "Jane is an animal", "v": "Jane is terricolous .", "w": "Jane has legs ."}], "errors": [[]], "entailments_dict": [{"5": ["d"], "9": ["6"]}, {"b": ["s"], "c": ["m"], "w": ["p"], "q": ["j"], "t": ["m"], "n": ["g"], "d": ["9", "(¬n)"], "e": ["a"], "(¬d)": ["g"], "(¬9)": ["g"], "(¬g)": ["9"]}], "predicted_steps": [false, false]}
{"text": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that KiKi neither barks nor is a dog?", "id": "198", "ground_truth": "True", "reasoning": "Reasoning:\nPremise 1.1: If an animal barks, then Jane does not like it.\nPremise 1.2: All dogs are animals that bark.\nConclusion 1: If an animal is a dog, then Jane does not like it.\nPremise 2.1: If an animal jumps, then Jane likes it.\nPremise 2.2: If an animal has legs, then it jumps.\nPremise 2.3: If an animal is terricolous, then it has legs.\nPremise 2.4: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nConclusion 2: KiKi does not jump and does not have legs.\nPremise 3.1: KiKi does not jump and does not have legs.\nPremise 3.2: If KiKi does not jump and does not have legs, then KiKi is terricolous or has legs.\nConclusion 3: KiKi is terricolous.\nPremise 4.1: If an animal is a dog, then Jane does not like it.\nPremise 4.2: KiKi is terricolous.\nConclusion 4: KiKi is not a dog.\nPremise 5.1: KiKi is not a dog.\nPremise 5.2: All dogs are animals that bark.\nConclusion 5: KiKi does not bark.\nAnswer: A. Yes.", "logic_premises": "[[((0∧1)→2), (3→4)], [(((f∧g)→h)∪((i∧j)→k)), (((l∧m)→n)∪((o∧p)→q)), (((r∧s)→t)∪((u∧v)→w)), ((9∧a)→(b∨c))], [(0∧1), ((2∧3)→(4∨5))], [(((5∧6)→7)∪((8∧9)→a)), 3], [0, (4→5)]]", "logic_conclusion": "[((5∧6)→7), (d∧e), 6, 4, 3]", "correspondance": [{"0": "X is an animal", "1": "X barks .", "2": "Jane does not like X .", "3": "X is a dog .", "4": "X is an animal that barks .", "5": "X is an animal", "6": "X is a dog .", "7": "Jane does not like X ."}, {"0": "X is an animal", "1": "X jumps .", "2": "Jane likes X .", "3": "X is an animal", "4": "X has legs .", "5": "X jumps .", "6": "X is an animal", "7": "X is terricolous .", "8": "X has legs .", "9": "KiKi does not jump .", "a": "KiKi does not have legs .", "b": "KiKi is terricolous .", "c": "KiKi has legs .", "d": "KiKi does not jump .", "e": "KiKi does not have legs .", "f": "KiKi is an animal", "g": "KiKi jumps .", "h": "Jane likes KiKi .", "i": "Jane is an animal", "j": "Jane jumps .", "k": "Jane likes Jane .", "l": "KiKi is an animal", "m": "KiKi has legs .", "n": "KiKi jumps .", "o": "Jane is an animal", "p": "Jane has legs .", "q": "Jane jumps .", "r": "KiKi is an animal", "s": "KiKi is terricolous .", "t": "KiKi has legs .", "u": "Jane is an animal", "v": "Jane is terricolous .", "w": "Jane has legs ."}, {"0": "KiKi does not jump .", "1": "KiKi does not have legs .", "2": "KiKi does not jump .", "3": "KiKi does not have legs .", "4": "KiKi is terricolous .", "5": "KiKi has legs .", "6": "KiKi is terricolous ."}, {"0": "X is an animal", "1": "X is a dog .", "2": "Jane does not like X .", "3": "KiKi is terricolous .", "4": "KiKi is not a dog .", "5": "KiKi is an animal", "6": "KiKi is a dog .", "7": "Jane does not like KiKi .", "8": "Jane is an animal", "9": "Jane is a dog .", "a": "Jane does not like Jane ."}, {"0": "KiKi is not a dog .", "1": "X is a dog .", "2": "X is an animal that barks .", "3": "KiKi does not bark .", "4": "KiKi is a dog .", "5": "KiKi is an animal that barks ."}], "errors": [[]], "entailments_dict": [{"6": ["3"], "5": ["0"], "2": ["7"]}, {"b": ["s"], "c": ["m"], "w": ["p"], "q": ["j"], "t": ["m"], "n": ["g"], "d": ["9", "(¬n)"], "e": ["a"], "(¬d)": ["g"], "(¬9)": ["g"], "(¬g)": ["9"]}, {"1": ["3"], "0": ["2"], "4": ["6"]}, {"(¬4)": ["6"]}, {"(¬0)": ["4"], "(¬4)": ["0"]}], "predicted_steps": [false, false, false, false, false]}
{"text": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that No one playing for Nautico is Brazilian?", "id": "199", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Ailton Silva, born in 1995, is a Brazillian footballer who plays for Nautico.\nConclusion 1: Ailton Silva, who plays for Nautico, is Brazilian.\nPremise 2.1: No other information is provided about Nautico players.\nConclusion 2: There is no information to suggest that no one playing for Nautico is Brazilian.\nAnswer: C. Uncertain.\n\nNote: The passage does not provide enough information to confirm or deny that no one playing for Nautico is Brazilian. It only confirms that at least one player, Ailton Silva, is Brazilian.", "logic_premises": "[[0], [(0→1)]]", "logic_conclusion": "[(1∧2), (2→3)]", "correspondance": [{"0": "Ailton Silva , born in 1995 , is a Brazillian footballer who plays for Nautico .", "1": "Ailton Silva is Brazilian .", "2": "Ailton Silva plays for Nautico ."}, {"0": "X is an other information .", "1": "X is not provided about Nautico players .", "2": "X is an information to suggests that no one playing for Nautico is Brazilian .", "3": "There is not X ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ailton Silva foes not play for a football club?", "id": "200", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Ailton Silva is a football player.\nPremise 1.2: Ailton Silva plays for Nautico.\nPremise 1.3: Nautico is a football club.\nConclusion 1: Ailton Silva plays for a football club.\nPremise 2.1: Ailton Silva plays for Braga.\nPremise 2.2: Braga is a football club.\nConclusion 2: Ailton Silva plays for a football club.\nPremise 3.1: Conclusion 1 and Conclusion 2\nAnswer: B. No.", "logic_premises": "[[0, 1, 2], [0, 1]]", "logic_conclusion": "[3, 2]", "correspondance": [{"0": "Ailton Silva is a football player .", "1": "Ailton Silva plays for Nautico .", "2": "Nautico is a football club .", "3": "Ailton Silva plays for Nautico ."}, {"0": "Ailton Silva plays for Braga .", "1": "Braga is a football club .", "2": "Ailton Silva plays for a football club ."}], "errors": [[]], "entailments_dict": [{"3": ["1"], "1": ["3"]}, {}], "predicted_steps": [true, false]}
{"text": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ailton was not loaned out to a football club?", "id": "201", "ground_truth": "False", "reasoning": "Reasoning:\nPremise 1.1: Ailton Silva, born in 1995, is commonly known as Ailton.\nPremise 1.2: Ailton is a football player.\nPremise 1.3: Ailton Silva was loaned out to Braga.\nPremise 1.4: Braga is a football club.\nPremise 1.5: Ailton Silva plays for Nautico.\nPremise 1.6: Nautico is a football club.\nPremise 1.7: Fluminense is a football club.\nConclusion 1: Ailton was loaned out to Braga, which is a football club.\nAnswer: A. Yes. (This answer is logically inconsistent with the conclusion, so the correct answer is B. No.)", "logic_premises": "[[0, 1, 2, 3, 4, 5, 6]]", "logic_conclusion": "[7]", "correspondance": [{"0": "Ailton Silva , born in 1995 , is commonly known as Ailton .", "1": "Ailton is a football player .", "2": "Ailton was loaned out to Braga .", "3": "Braga is a football club .", "4": "Ailton plays for Nautico .", "5": "Nautico is a football club .", "6": "Fluminense is a football club .", "7": "Ailton was loaned out to Braga ."}], "errors": [[]], "entailments_dict": [{"7": ["2"], "2": ["7"]}], "predicted_steps": [true]}
{"text": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ailton Silva played for Fluminense?", "id": "202", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Ailton Silva is a Brazillian footballer who plays for Nautico.\nPremise 1.2: Nautico is a football club along with Braga.\nPremise 1.3: Ailton Silva was loaned out to Braga.\nConclusion 1: Ailton Silva played for Braga.\nPremise 2.1: Fluminense is a football club.\nPremise 2.2: Fluminense is not mentioned as one of the clubs that Ailton Silva played for.\nConclusion 2: Ailton Silva did not play for Fluminense.\nAnswer: B. No.", "logic_premises": "[[0, 1, 2], [0, 1]]", "logic_conclusion": "[3, 2]", "correspondance": [{"0": "Ailton Silva is a Brazillian footballer who plays for Nautico .", "1": "Nautico is a football club along with Braga .", "2": "Ailton Silva was loaned out to Braga .", "3": "Ailton Silva played for Braga ."}, {"0": "Fluminense is a football club .", "1": "Fluminense is not mentioned as one of the clubs that Ailton Silva played for .", "2": "Ailton Silva did not play for Fluminense ."}], "errors": [[]], "entailments_dict": [{}, {}], "predicted_steps": [false, false]}
{"text": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ailton Silva was loaned out to a football club?", "id": "203", "ground_truth": "Uncertain", "reasoning": "Reasoning:\nPremise 1.1: Ailton Silva, born in 1995, is a football player who was loaned out to Braga.\nConclusion 1: Ailton Silva was loaned out to a football club.\nPremise 2.1: Ailton Silva was loaned out to a football club.\nAnswer: A. Yes.\n\nNote: The passage states that Ailton Silva was loaned out to Braga, which is a football club. Therefore, it is true that Ailton Silva was loaned out to a football club. The other details in the passage are not relevant to the question and do not provide any additional information that would change the conclusion.", "logic_premises": "[[0]]", "logic_conclusion": "[1]", "correspondance": [{"0": "Ailton Silva , born in 1995 , is a football player who was loaned out to Braga .", "1": "Ailton Silva was loaned out to a football club ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
