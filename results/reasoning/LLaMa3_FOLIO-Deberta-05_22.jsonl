{"text": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James has lunch in the company?", "id": "0", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nConclusion 1: James is a manager and appears in the company today, or James is not a manager and does not appear in the company today.\nPremise 2.1: No managers work remotely from home.\nPremise 2.2: James is a manager and appears in the company today.\nConclusion 2: James does not work remotely from home.\nPremise 3.1: All employees who are in other countries work remotely from home.\nPremise 3.2: James does not work remotely from home.\nConclusion 3: James is not in another country.\nPremise 4.1: Employees will either have lunch in the company or have lunch at home.\nPremise 4.2: James does not work remotely from home.\nConclusion 4: James has lunch in the company.\nPremise 5.1: James has lunch in the company.\nAnswer: A. Yes", "logic_premises": "[[(0⊻(1∧2))], [((5→6)∪(7→8)), (2∧3)], [(4→5), 2], [((5→(6⊻7))∪(8→(9⊻a))), 3]]", "logic_conclusion": "[((3∧4)∨(5∧6)), 4, 3, 4]", "correspondance": [{"0": "James is a manager and appears in the company today .", "1": "James is neither a manager .", "2": "James is today .", "3": "James is a manager .", "4": "James appears in the company today .", "5": "James is not a manager .", "6": "James does not appear in the company today ."}, {"0": "X is a manager .", "1": "X does not work remotely from home .", "2": "James is a manager .", "3": "James appears in the company today .", "4": "James does not work remotely from home .", "5": "the company is a manager .", "6": "the company does not work remotely from home .", "7": "James is a manager .", "8": "James does not work remotely from home ."}, {"0": "X is an employee who is in other a country .", "1": "X works remotely from home .", "2": "James does not work remotely from home .", "3": "James is not in another country .", "4": "James is an employee who is in other a country .", "5": "James works remotely from home ."}, {"0": "X is an Employee .", "1": "X will have lunch in the company .", "2": "X will have lunch at home .", "3": "James does not work remotely from home .", "4": "James has lunch in the company .", "5": "the company is an Employee .", "6": "the company will have lunch in the company .", "7": "the company will have lunch at home .", "8": "James is an Employee .", "9": "James will have lunch in the company .", "a": "James will have lunch at home ."}], "errors": [[]], "entailments_dict": [{"4": ["2"], "5": ["1", "(¬0)"], "0": ["4", "3", "(¬1)"], "1": ["5"], "6": ["(¬0)", "(¬2)"], "3": ["(¬1)"], "(¬6)": ["2"], "(¬3)": ["1"]}, {"2": ["7"], "8": ["4"], "3": ["4"]}, {"5": ["(¬2)"], "2": ["(¬5)"]}, {"3": ["8"], "4": ["8", "(¬7)", "(¬a)"], "9": ["4", "(¬a)"], "6": ["(¬7)"], "(¬4)": ["8"], "(¬3)": ["8"]}], "predicted_steps": [false, true, false, false]}
{"text": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Bonnie performs in school talent shows often?", "id": "1", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nPremise 1.2: If people perform in school talent shows often, then they attend and are very engaged with school events.\nConclusion 1: If Bonnie performs in school talent shows often, then she is a student who attends the school.\n\nPremise 2.1: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nPremise 2.2: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nConclusion 2: Bonnie wishes to further her academic careers and educational opportunities.\n\nPremise 3.1: Bonnie wishes to further her academic careers and educational opportunities.\nPremise 3.2: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nConclusion 3: Bonnie is a student who attends the school.\n\nPremise 4.1: If people chaperone high school dances, then they are not students who attend the school.\nPremise 4.2: All people who are inactive and disinterested members of their community chaperone high school dances.\nPremise 4.3: People either perform in school talent shows often or are inactive and disinterested members of their community.\nConclusion 4: Bonnie performs in school talent shows often.\nAnswer: A. Yes", "logic_premises": "[[(((0∧1)∧2)⊻((3∨4)∧5)), ((b→(c∧d))∪(e→(f∧g)))], [((((d∧e)∧(f∧g))→h)∪(((i∧j)∧(k∧l))→m)), (((5∧6)∧7)⊻((8∨9)∧a))], [(0∧1), ((((8∧9)∧(a∧b))→c)∪(((d∧e)∧(f∧g))→h))], [((a→b)∪(c→d)), (((e∧f)→g)∪((h∧i)→j)), ((k→(l∨(m∧n)))∪(o→(p∨(q∧r))))]]", "logic_conclusion": "[(9→a), (b∧c), 7, 9]", "correspondance": [{"0": "Bonnie attends .", "1": "Bonnie is very engaged with school events .", "2": "Bonnie is a student who attends the school .", "3": "Bonnie does not attend .", "4": "Bonnie is not very engaged with school events .", "5": "Bonnie is not a student who attends the school .", "6": "X perform in school talent shows often .", "7": "X attend .", "8": "X are very engaged with school events .", "9": "Bonnie performs in school talent shows often .", "a": "Bonnie is a student who attends the school .", "b": "the school perform in school talent shows often .", "c": "the school attend .", "d": "the school are very engaged with school events .", "e": "Bonnie perform in school talent shows often .", "f": "Bonnie attend .", "g": "Bonnie are very engaged with school events ."}, {"0": "X is a a young child who wishes to furthers their academic careers .", "1": "X is a a young teenager who wishes to furthers their academic careers .", "2": "X is a a young child who wishes to furthers their educational opportunities .", "3": "X is a a young teenager who wishes to furthers their educational opportunities .", "4": "X is a student who attends the school .", "5": "Bonnie attends .", "6": "Bonnie is very engaged with school events .", "7": "Bonnie is a student who attends the school .", "8": "Bonnie does not attend .", "9": "Bonnie is not very engaged with school events .", "a": "Bonnie is not a student who attends the school .", "b": "Bonnie wishes to further Bonnie 's academic careers .", "c": "Bonnie wishes to further Bonnie 's educational opportunities .", "d": "the school is a a young child who wishes to furthers their academic careers .", "e": "the school is a a young teenager who wishes to furthers their academic careers .", "f": "the school is a a young child who wishes to furthers their educational opportunities .", "g": "the school is a a young teenager who wishes to furthers their educational opportunities .", "h": "the school is a student who attends the school .", "i": "Bonnie is a a young child who wishes to furthers their academic careers .", "j": "Bonnie is a a young teenager who wishes to furthers their academic careers .", "k": "Bonnie is a a young child who wishes to furthers their educational opportunities .", "l": "Bonnie is a a young teenager who wishes to furthers their educational opportunities .", "m": "Bonnie is a student who attends the school ."}, {"0": "Bonnie wishes to further Bonnie 's academic careers .", "1": "Bonnie wishes to further Bonnie 's educational opportunities .", "2": "X is a a young child who wishes to furthers their academic careers .", "3": "X is a a young teenager who wishes to furthers their academic careers .", "4": "X is a a young child who wishes to furthers their educational opportunities .", "5": "X is a a young teenager who wishes to furthers their educational opportunities .", "6": "X is a student who attends the school .", "7": "Bonnie is a student who attends the school .", "8": "the school is a a young child who wishes to furthers their academic careers .", "9": "the school is a a young teenager who wishes to furthers their academic careers .", "a": "the school is a a young child who wishes to furthers their educational opportunities .", "b": "the school is a a young teenager who wishes to furthers their educational opportunities .", "c": "the school is a student who attends the school .", "d": "Bonnie is a a young child who wishes to furthers their academic careers .", "e": "Bonnie is a a young teenager who wishes to furthers their academic careers .", "f": "Bonnie is a a young child who wishes to furthers their educational opportunities .", "g": "Bonnie is a a young teenager who wishes to furthers their educational opportunities .", "h": "Bonnie is a student who attends the school ."}, {"0": "X chaperone high school dances .", "1": "X are not students who attend the school .", "2": "X is a person who is inactive a member of their community .", "3": "X is a person who is disinterested a member of their community .", "4": "X chaperones high school dances .", "5": "X is a person .", "6": "X either performs in school talent shows often .", "7": "X either is inactive a member of People 's community .", "8": "X either is disinterested a member of People 's community .", "9": "Bonnie performs in school talent shows often .", "a": "the school chaperone high school dances .", "b": "the school are not students who attend the school .", "c": "Bonnie chaperone high school dances .", "d": "Bonnie are not students who attend the school .", "e": "the school is a person who is inactive a member of their community .", "f": "the school is a person who is disinterested a member of their community .", "g": "the school chaperones high school dances .", "h": "Bonnie is a person who is inactive a member of their community .", "i": "Bonnie is a person who is disinterested a member of their community .", "j": "Bonnie chaperones high school dances .", "k": "the school is a person .", "l": "the school either performs in school talent shows often .", "m": "the school either is inactive a member of People 's community .", "n": "the school either is disinterested a member of People 's community .", "o": "Bonnie is a person .", "p": "Bonnie either performs in school talent shows often .", "q": "Bonnie either is inactive a member of People 's community .", "r": "Bonnie either is disinterested a member of People 's community ."}], "errors": [[]], "entailments_dict": [{"f": ["0", "2", "a", "(¬5)", "(¬3)", "(¬4)"], "g": ["1", "(¬3)", "(¬4)", "(¬5)"], "9": ["2", "1", "e", "(¬3)", "(¬5)", "(¬4)"], "0": ["a", "(¬c)", "(¬3)", "(¬4)", "(¬5)"], "2": ["a", "(¬c)", "(¬3)", "(¬5)"], "1": ["a", "(¬3)", "(¬4)"], "4": ["a", "(¬g)", "(¬c)", "(¬f)"], "3": ["(¬d)", "(¬g)", "(¬c)", "(¬f)"], "5": ["(¬c)", "(¬f)"], "c": ["(¬3)", "(¬4)"], "(¬a)": ["3", "5"], "(¬e)": ["2"]}, {"m": ["7", "5", "(¬8)", "(¬a)"], "9": ["(¬h)"], "6": ["(¬h)", "(¬8)", "(¬9)"], "5": ["(¬h)", "(¬8)", "(¬9)", "(¬a)"], "8": ["(¬m)", "(¬h)"], "a": ["(¬m)"], "c": ["(¬h)", "(¬8)", "(¬9)"], "b": ["(¬h)", "(¬a)", "(¬8)", "(¬9)"], "7": ["(¬8)", "(¬a)"]}, {"h": ["7"], "1": ["(¬c)"], "0": ["(¬c)"]}, {"j": ["o", "c", "(¬n)", "(¬b)", "(¬r)", "(¬q)", "(¬m)"], "r": ["i", "(¬b)"], "q": ["h", "(¬b)"], "g": ["a", "(¬n)", "(¬q)", "(¬r)"], "9": ["o", "(¬d)", "(¬b)", "(¬r)", "(¬m)", "(¬n)"], "p": ["9", "(¬b)", "(¬d)"], "b": ["(¬p)", "(¬r)"], "d": ["(¬l)", "(¬p)"], "l": ["(¬b)", "(¬d)"], "(¬h)": ["o"], "(¬i)": ["o"]}], "predicted_steps": [false, false, false, "Contradiction in the premises"]}
{"text": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community?", "id": "2", "ground_truth": "True", "reasoning": "Premise 1.1: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nPremise 1.2: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nConclusion 1: If Bonnie is a young child or teenager who wishes to further her academic career and educational opportunities, then she is a student who attends the school.\n\nPremise 2.1: All people who are inactive and disinterested members of their community chaperone high school dances.\nPremise 2.2: If people chaperone high school dances, then they are not students who attend the school.\nConclusion 2: If Bonnie chaperones high school dances, then she is an inactive and disinterested member of the community.\n\nPremise 3.1: Conclusion 1 and Conclusion 2\nConclusion 3: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\n\nAnswer: A. Yes", "logic_premises": "[[(((0∧1)∧2)⊻((3∨4)∧5)), ((((g∧h)∧(i∧j))→k)∪(((l∧m)∧(n∧o))→p))], [(((8∧9)→a)∪(((b∧c)→d)∪((e∧f)→g))), ((h→i)∪((j→k)∪(l→m)))], [0]]", "logic_conclusion": "[(((b∨c)∧(d∨e))→f), (5→(6∧7)), (1∧2)]", "correspondance": [{"0": "Bonnie attends .", "1": "Bonnie is very engaged with school events .", "2": "Bonnie is a student who attends the school .", "3": "Bonnie does not attend .", "4": "Bonnie is not very engaged with school events .", "5": "Bonnie is not a student who attends the school .", "6": "X is a a young child who wishes to furthers their academic careers .", "7": "X is a a young teenager who wishes to furthers their academic careers .", "8": "X is a a young child who wishes to furthers their educational opportunities .", "9": "X is a a young teenager who wishes to furthers their educational opportunities .", "a": "X is a student who attends the school .", "b": "Bonnie is a young child who wishes to further Bonnie 's academic career .", "c": "Bonnie is a young teenager who wishes to further Bonnie 's academic career .", "d": "Bonnie is a young child who wishes to further Bonnie 's educational opportunities .", "e": "Bonnie is a young teenager who wishes to further Bonnie 's educational opportunities .", "f": "Bonnie is a student who attends the school .", "g": "the school is a a young child who wishes to furthers their academic careers .", "h": "the school is a a young teenager who wishes to furthers their academic careers .", "i": "the school is a a young child who wishes to furthers their educational opportunities .", "j": "the school is a a young teenager who wishes to furthers their educational opportunities .", "k": "the school is a student who attends the school .", "l": "Bonnie is a a young child who wishes to furthers their academic careers .", "m": "Bonnie is a a young teenager who wishes to furthers their academic careers .", "n": "Bonnie is a a young child who wishes to furthers their educational opportunities .", "o": "Bonnie is a a young teenager who wishes to furthers their educational opportunities .", "p": "Bonnie is a student who attends the school ."}, {"0": "X is a person who is inactive a member of their community .", "1": "X is a person who is disinterested a member of their community .", "2": "X chaperones high school dances .", "3": "X chaperone high school dances .", "4": "X are not students who attend the school .", "5": "Bonnie chaperones high school dances .", "6": "Bonnie is an inactive member of the community .", "7": "Bonnie is an disinterested member of the community .", "8": "the community is a person who is inactive a member of their community .", "9": "the community is a person who is disinterested a member of their community .", "a": "the community chaperones high school dances .", "b": "the school is a person who is inactive a member of their community .", "c": "the school is a person who is disinterested a member of their community .", "d": "the school chaperones high school dances .", "e": "Bonnie is a person who is inactive a member of their community .", "f": "Bonnie is a person who is disinterested a member of their community .", "g": "Bonnie chaperones high school dances .", "h": "the community chaperone high school dances .", "i": "the community are not students who attend the school .", "j": "the school chaperone high school dances .", "k": "the school are not students who attend the school .", "l": "Bonnie chaperone high school dances .", "m": "Bonnie are not students who attend the school ."}, {"0": "Conclusion 1 and Conclusion 2", "1": "If Bonnie is either both a young child or teenager who wishes to further Bonnie 's academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities , then Bonnie is either a student who attends the school or is an inactive member of the community .", "2": "If Bonnie is either both a young child or teenager who wishes to further Bonnie 's academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities , then Bonnie is either a student who attends the school or is an disinterested member of the community ."}], "errors": [[]], "entailments_dict": [{"p": ["0", "2", "f", "(¬3)", "(¬5)"], "b": ["l", "n", "(¬3)", "(¬5)", "(¬4)", "(¬k)"], "c": ["o", "m", "(¬3)", "(¬5)", "(¬4)", "(¬k)"], "d": ["l", "n", "(¬3)", "(¬4)", "(¬k)"], "e": ["o", "m", "(¬k)"], "0": ["f", "(¬k)", "(¬3)", "(¬4)", "(¬5)"], "2": ["f", "(¬3)", "(¬5)"], "1": ["f", "(¬k)", "(¬3)", "(¬4)"], "4": ["f", "(¬k)"], "5": ["(¬p)"], "3": ["(¬p)", "(¬k)"], "(¬f)": ["3", "5"]}, {"a": ["h"], "d": ["j"], "g": ["l", "(¬k)", "(¬i)"], "5": ["l", "(¬i)", "(¬k)"]}, {}], "predicted_steps": [false, false, false]}
{"text": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community?", "id": "3", "ground_truth": "False", "reasoning": "Premise 1.1: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nPremise 1.2: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nConclusion 1: If Bonnie is a young child or teenager who wishes to further her academic career and educational opportunities, then she attends and is very engaged with school events.\n\nPremise 2.1: People either perform in school talent shows often or are inactive and disinterested members of their community.\nPremise 2.2: If people perform in school talent shows often, then they attend and are very engaged with school events.\nConclusion 2: If Bonnie performs in school talent shows often, then she attends and is very engaged with school events.\n\nPremise 3.1: If Bonnie performs in school talent shows often, then she attends and is very engaged with school events.\nPremise 3.2: If Bonnie is a young child or teenager who wishes to further her academic career and educational opportunities, then she attends and is very engaged with school events.\nConclusion 3: If Bonnie performs in school talent shows often, then she is a young child or teenager who wishes to further her academic career and educational opportunities.\n\nPremise 4.1: All people who are inactive and disinterested members of their community chaperone high school dances.\nPremise 4.2: If Bonnie chaperones high school dances, then she is an inactive and disinterested member of the community.\nConclusion 4: If Bonnie chaperones high school dances, then she is not a young child or teenager who wishes to further her academic career and educational opportunities.\n\nPremise 5.1: If Bonnie either chaperones high school dances or performs in school talent shows often, then either she is an inactive and disinterested member of the community or she is a young child or teenager who wishes to further her academic career and educational opportunities.\nConclusion 5: The statement \"If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community\" is false.\n\nAnswer: B. No", "logic_premises": "[[(((0∧1)∧2)⊻((3∨4)∧5)), ((((h∧i)∧(j∧k))→l)∪(((m∧n)∧(o∧p))→q))], [(a→(b∨(c∧d))), (e→(f∧g))], [(0→(1∧2)), (((3∨4)∧(5∨6))→(7∧8))], [(((b∧c)→d)∪((e∧f)→g)), (3→(4∧5))], [((0⊻1)→((2∧3)⊻((6∨7)∧(8∨9))))]]", "logic_conclusion": "[(((b∨c)∧(d∨e))→(f∧g)), (7→(8∧9)), (9→((a∨b)∧(c∨d))), (6→((7∨8)∧(9∨a))), (a∧b)]", "correspondance": [{"0": "Bonnie attends .", "1": "Bonnie is very engaged with school events .", "2": "Bonnie is a student who attends the school .", "3": "Bonnie does not attend .", "4": "Bonnie is not very engaged with school events .", "5": "Bonnie is not a student who attends the school .", "6": "X is a a young child who wishes to furthers their academic careers .", "7": "X is a a young teenager who wishes to furthers their academic careers .", "8": "X is a a young child who wishes to furthers their educational opportunities .", "9": "X is a a young teenager who wishes to furthers their educational opportunities .", "a": "X is a student who attends the school .", "b": "Bonnie is a young child who wishes to further Bonnie 's academic career .", "c": "Bonnie is a young teenager who wishes to further Bonnie 's academic career .", "d": "Bonnie is a young child who wishes to further Bonnie 's educational opportunities .", "e": "Bonnie is a young teenager who wishes to further Bonnie 's educational opportunities .", "f": "Bonnie attends .", "g": "Bonnie is very engaged with school events .", "h": "the school is a a young child who wishes to furthers their academic careers .", "i": "the school is a a young teenager who wishes to furthers their academic careers .", "j": "the school is a a young child who wishes to furthers their educational opportunities .", "k": "the school is a a young teenager who wishes to furthers their educational opportunities .", "l": "the school is a student who attends the school .", "m": "Bonnie is a a young child who wishes to furthers their academic careers .", "n": "Bonnie is a a young teenager who wishes to furthers their academic careers .", "o": "Bonnie is a a young child who wishes to furthers their educational opportunities .", "p": "Bonnie is a a young teenager who wishes to furthers their educational opportunities .", "q": "Bonnie is a student who attends the school ."}, {"0": "X is a person .", "1": "X either performs in school talent shows often .", "2": "X either is inactive a member of people 's community .", "3": "X either is disinterested a member of people 's community .", "4": "X perform in school talent shows often .", "5": "X attend .", "6": "X are very engaged with school events .", "7": "Bonnie performs in school talent shows often .", "8": "Bonnie attends .", "9": "Bonnie is very engaged with school events .", "a": "Bonnie is a person .", "b": "Bonnie either performs in school talent shows often .", "c": "Bonnie either is inactive a member of people 's community .", "d": "Bonnie either is disinterested a member of people 's community .", "e": "Bonnie perform in school talent shows often .", "f": "Bonnie attend .", "g": "Bonnie are very engaged with school events ."}, {"0": "Bonnie performs in school talent shows often .", "1": "Bonnie attends .", "2": "Bonnie is very engaged with school events .", "3": "Bonnie is a young child who wishes to further Bonnie 's academic career .", "4": "Bonnie is a young teenager who wishes to further Bonnie 's academic career .", "5": "Bonnie is a young child who wishes to further Bonnie 's educational opportunities .", "6": "Bonnie is a young teenager who wishes to further Bonnie 's educational opportunities .", "7": "Bonnie attends .", "8": "Bonnie is very engaged with school events .", "9": "Bonnie performs in school talent shows often .", "a": "Bonnie is a young child who wishes to further Bonnie 's academic career .", "b": "Bonnie is a young teenager who wishes to further Bonnie 's academic career .", "c": "Bonnie is a young child who wishes to further Bonnie 's educational opportunities .", "d": "Bonnie is a young teenager who wishes to further Bonnie 's educational opportunities ."}, {"0": "X is a person who is inactive a member of their community .", "1": "X is a person who is disinterested a member of their community .", "2": "X chaperones high school dances .", "3": "Bonnie chaperones high school dances .", "4": "Bonnie is an inactive member of their community .", "5": "Bonnie is an disinterested member of their community .", "6": "Bonnie chaperones high school dances .", "7": "Bonnie is not a young child who wishes to further Bonnie 's academic career .", "8": "Bonnie is not a young teenager who wishes to further Bonnie 's academic career .", "9": "Bonnie is not a young child who wishes to further Bonnie 's educational opportunities .", "a": "Bonnie is not a young teenager who wishes to further Bonnie 's educational opportunities .", "b": "the community is a person who is inactive a member of their community .", "c": "the community is a person who is disinterested a member of their community .", "d": "the community chaperones high school dances .", "e": "Bonnie is a person who is inactive a member of their community .", "f": "Bonnie is a person who is disinterested a member of their community .", "g": "Bonnie chaperones high school dances ."}, {"0": "Bonnie chaperones high school dances .", "1": "Bonnie performs in school talent shows often .", "2": "Bonnie is an inactive member of the community .", "3": "Bonnie is an disinterested member of the community .", "4": "Bonnie chaperones high school dances .", "5": "Bonnie performs in school talent shows often .", "6": "Bonnie is a young child who wishes to further Bonnie 's academic career .", "7": "Bonnie is a young teenager who wishes to further Bonnie 's academic career .", "8": "Bonnie is a young child who wishes to further Bonnie 's educational opportunities .", "9": "Bonnie is a young teenager who wishes to further Bonnie 's educational opportunities .", "a": "The statement \" If Bonnie either chaperones high school dances or , if Bonnie does not , Bonnie performs in school talent shows often , then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive member of the community \" is false .", "b": "The statement \" If Bonnie either chaperones high school dances or , if Bonnie does not , Bonnie performs in school talent shows often , then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an disinterested member of the community \" is false ."}], "errors": [[]], "entailments_dict": [{"q": ["0", "2", "f", "(¬5)", "(¬3)"], "b": ["o", "m", "(¬3)", "(¬5)", "(¬4)", "(¬l)"], "c": ["p", "n", "(¬3)", "(¬5)", "(¬4)", "(¬l)"], "d": ["o", "m", "(¬3)", "(¬4)", "(¬l)"], "e": ["p", "n", "(¬l)"], "0": ["f", "(¬l)", "(¬3)", "(¬4)", "(¬5)"], "2": ["f", "(¬3)", "(¬5)"], "1": ["g", "(¬l)", "(¬3)", "(¬4)"], "5": ["(¬q)"], "4": ["(¬l)"], "3": ["(¬q)", "(¬l)"], "(¬f)": ["3", "5"], "(¬g)": ["4"]}, {"b": ["e", "9"], "f": ["a", "8", "(¬d)", "(¬c)"], "7": ["a", "e", "(¬c)", "(¬d)"], "g": ["9", "(¬c)", "(¬d)"], "c": ["(¬g)"], "d": ["(¬g)"]}, {"9": ["0"]}, {"4": ["e", "(¬g)"], "5": ["f"], "g": ["3", "7", "9", "(¬4)", "(¬5)"], "6": ["3", "(¬4)", "(¬5)"], "d": ["(¬4)", "(¬5)"]}, {"a": ["0", "1", "(¬3)"], "b": ["0", "1", "(¬2)"], "3": ["(¬8)"], "(¬a)": ["0", "1"], "(¬b)": ["0", "1"]}], "predicted_steps": [false, true, false, "Contradiction in the premises", false]}
{"text": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James does not have lunch in the company?", "id": "4", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nConclusion 1: James is a manager and appears in the company today, or James is not a manager and does not appear in the company today.\nPremise 2.1: No managers work remotely from home.\nPremise 2.2: James is a manager.\nConclusion 2: James does not work remotely from home.\nPremise 3.1: If an employee has lunch at home, then he/she is working remotely from home.\nPremise 3.2: James does not work remotely from home.\nConclusion 3: James does not have lunch at home.\nPremise 4.1: Employees will either have lunch in the company or have lunch at home.\nPremise 4.2: James does not have lunch at home.\nConclusion 4: James has lunch in the company.\nPremise 5.1: James has lunch in the company.\nAnswer: B. No", "logic_premises": "[[(0⊻(1∧2))], [(4→5), 2], [((5∧6)→7), 3], [((5→(6⊻7))∪(8→(9⊻a))), 3]]", "logic_conclusion": "[((3∧4)∨(5∧6)), 3, 4, 4]", "correspondance": [{"0": "James is a manager and appears in the company today .", "1": "James is neither a manager .", "2": "James is today .", "3": "James is a manager .", "4": "James appears in the company today .", "5": "James is not a manager .", "6": "James does not appear in the company today ."}, {"0": "X is a manager .", "1": "X does not work remotely from home .", "2": "James is a manager .", "3": "James does not work remotely from home .", "4": "James is a manager .", "5": "James does not work remotely from home ."}, {"0": "X is an employee", "1": "X has lunch at home .", "2": "X is working remotely from home .", "3": "James does not work remotely from home .", "4": "James does not have lunch at home .", "5": "James is an employee", "6": "James has lunch at home .", "7": "James is working remotely from home ."}, {"0": "X is an Employee .", "1": "X will have lunch in the company .", "2": "X will have lunch at home .", "3": "James does not have lunch at home .", "4": "James has lunch in the company .", "5": "the company is an Employee .", "6": "the company will have lunch in the company .", "7": "the company will have lunch at home .", "8": "James is an Employee .", "9": "James will have lunch in the company .", "a": "James will have lunch at home ."}], "errors": [[]], "entailments_dict": [{"4": ["2"], "5": ["1", "(¬0)"], "0": ["4", "3", "(¬1)"], "1": ["5"], "6": ["(¬0)", "(¬2)"], "3": ["(¬1)"], "(¬6)": ["2"], "(¬3)": ["1"]}, {"2": ["4"], "5": ["3"]}, {"3": ["5", "(¬7)"], "4": ["5"], "7": ["(¬3)"], "(¬4)": ["6", "5"], "(¬3)": ["5"]}, {"4": ["8", "3", "(¬7)", "(¬a)"], "9": ["4", "(¬a)"], "3": ["(¬a)"], "a": ["(¬3)"], "6": ["(¬7)"], "(¬4)": ["8"]}], "predicted_steps": [false, true, "Contradiction in the premises", false]}
{"text": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If James is either a manager or in other countries, then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home?", "id": "5", "ground_truth": "True", "reasoning": "Premise 1.1: All employees who schedule a meeting with their customers will appear in the company today.\nPremise 1.2: Everyone who has lunch in the company schedules meetings with their customers.\nConclusion 1: Everyone who has lunch in the company will appear in the company today.\n\nPremise 2.1: If an employee has lunch at home, then he/she is working remotely from home.\nPremise 2.2: All employees who are in other countries work remotely from home.\nConclusion 2: All employees who are in other countries have lunch at home.\n\nPremise 3.1: No managers work remotely from home.\nPremise 3.2: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nConclusion 3: If James is a manager, then James appears in the company today and does not work remotely from home.\n\nPremise 4.1: If James is in other countries, then James has lunch at home and works remotely from home.\nPremise 4.2: If James is a manager, then James does not work remotely from home.\nConclusion 4: If James is either a manager or in other countries, then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.\n\nAnswer: A. Yes", "logic_premises": "[[(0→1), (2→3)], [((0∧1)→2), (3→4)], [((8→9)∪(a→b)), (2⊻(3∧4))], [(0→(1∧2)), (3→4)]]", "logic_conclusion": "[(4→5), (5→6), (5→(6∧7)), (5→((6∨(7⊻8))∧(9⊻(a∧b))))]", "correspondance": [{"0": "X is an employee who schedules a meeting with their customers .", "1": "X will appear in the company today .", "2": "X is a person who has lunch in the company .", "3": "X schedules meetings with their customers .", "4": "X is a person who has lunch in the company .", "5": "X will appear in the company today ."}, {"0": "X is an employee", "1": "X has lunch at home .", "2": "X is working remotely from home .", "3": "X is an employee who is in other a country .", "4": "X works remotely from home .", "5": "X is an employee who is in other a country .", "6": "X has lunch at home ."}, {"0": "X is a manager .", "1": "X does not work remotely from home .", "2": "James is a manager and appears in the company today .", "3": "James is neither a manager .", "4": "James is today .", "5": "James is a manager .", "6": "James appears in the company today .", "7": "James does not work remotely from home .", "8": "the company is a manager .", "9": "the company does not work remotely from home .", "a": "James is a manager .", "b": "James does not work remotely from home ."}, {"0": "James is in other countries .", "1": "James has lunch at home .", "2": "James works remotely from home .", "3": "James is a manager .", "4": "James does not work remotely from home .", "5": "James is either a manager or in other countries .", "6": "James either has lunch at home .", "7": "James neither has lunch at home .", "8": "James neither works remotely from home .", "9": "James works remotely from home .", "a": "James does not have lunch at home .", "b": "James does not work remotely from home ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["2"], "1": ["5"]}, {"4": ["0"], "5": ["0", "3"], "(¬6)": ["0"], "(¬3)": ["0"]}, {"2": ["a", "6", "(¬3)"], "5": ["a", "(¬3)"], "b": ["7"], "(¬3)": ["a"], "(¬a)": ["3"]}, {"5": ["0", "3", "(¬2)"], "2": ["9", "(¬4)"], "1": ["6"], "4": ["8", "b", "(¬2)"]}], "predicted_steps": [true, false, true, "Contradiction in the premises"]}
{"text": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that There is an animal?", "id": "6", "ground_truth": "True", "reasoning": "Premise 1.1: Mammals are animals.\nPremise 1.2: Humans are mammals.\nConclusion 1: Humans are animals.\nPremise 2.1: Monkeypox virus can occur in certain animals, including humans.\nConclusion 2: There are animals.\nAnswer: A. Yes.", "logic_premises": "[[(0→1), (2→3)], [0]]", "logic_conclusion": "[(4→5), 1]", "correspondance": [{"0": "X is a Mammal .", "1": "X is an animal .", "2": "X is a Human .", "3": "X is a mammal .", "4": "X is a Human .", "5": "X is an animal ."}, {"0": "Monkeypox virus can occur in certain animals , including humans .", "1": "There are animals ."}], "errors": [[]], "entailments_dict": [{"3": ["0", "5"], "4": ["2", "(¬1)"], "1": ["5"]}, {"1": ["0"], "0": ["1"]}], "predicted_steps": ["Contradiction in the premises", true]}
{"text": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that No one gets flu?", "id": "7", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: People feel tired when they get a flu.\nPremise 1.2: Symptons of Monkeypox include... feeling tired, and so on.\nConclusion 1: There is no relation between Monkeypox and flu in the passage.\nPremise 2.1: No information about flu is provided in the passage except that people feel tired when they get a flu.\nConclusion 2: We can't conclude that no one gets flu.\nAnswer: C. Uncertain.", "logic_premises": "[[(0→1), (2→3)], [(0→1)]]", "logic_conclusion": "[((4∧5)→6), (2→3)]", "correspondance": [{"0": "X is a person .", "1": "X feels tired that people gets a flu .", "2": "X is a Sympton of Monkeypox .", "3": "X includes ... feeling tired , and so on .", "4": "X is a relation between Monkeypox .", "5": "X is a relation between flu .", "6": "There is not X in the passage ."}, {"0": "X is a person .", "1": "No information about flu is provided in the passage except that X feels tired when people gets a flu .", "2": "X is a person .", "3": "We can conclude that X gets flu ."}], "errors": [[]], "entailments_dict": [{"4": ["(¬1)"]}, {"2": ["0"]}], "predicted_steps": [false, false]}
{"text": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Symptons of Monkeypox include coughing?", "id": "8", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nConclusion 1: There is no mention of coughing in the symptoms of Monkeypox.\nPremise 2.1: There is no mention of coughing in the symptoms of Monkeypox.\nAnswer: B. No", "logic_premises": "[[(0→1)]]", "logic_conclusion": "[(2→3)]", "correspondance": [{"0": "X is a Sympton of Monkeypox .", "1": "X includes fever , headache , muscle pains , feeling tired , and so on .", "2": "X is a mention of coughing .", "3": "There is not X in the symptoms of Monkeypox ."}], "errors": [[]], "entailments_dict": [{"2": ["(¬1)"], "(¬3)": ["0"]}], "predicted_steps": [true]}
{"text": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom is an Ocellated wild turkey?", "id": "9", "ground_truth": "True", "reasoning": "Premise 1.1: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nPremise 1.2: Tom is a wild turkey.\nConclusion 1: Tom is one of the six types of wild turkeys.\nPremise 2.1: Tom is not an Eastern wild turkey.\nPremise 2.2: Tom is not an Osceola wild turkey.\nPremise 2.3: Tom is not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nConclusion 2: Tom is an Ocellated wild turkey.\nPremise 3.1: Tom is an Ocellated wild turkey.\nAnswer: A. Yes", "logic_premises": "[[(0∧(1∧(2∧(3∧(4∧5))))), 6], [0, 1, (2∨(3∨4))]]", "logic_conclusion": "[7, 5]", "correspondance": [{"0": "There are six types of wild turkeys : Eastern wild turkey .", "1": "There are six types of wild turkeys : Osceola wild turkey .", "2": "There are six types of wild turkeys : Gould ’s wild turkey .", "3": "There are six types of wild turkeys : Merriam ’s wild turkey .", "4": "There are six types of wild turkeys : Rio Grande wild turkey .", "5": "There are six types of wild turkeys : Ocellated wild turkey .", "6": "Tom is a wild turkey .", "7": "Tom is one of six types of wild turkeys ."}, {"0": "Tom is not an Eastern wild turkey .", "1": "Tom is not an Osceola wild turkey .", "2": "Tom is not a Gould 's wild turkey .", "3": "Tom is not a Merriam 's wild turkey .", "4": "Tom is not a Rio Grande wild turkey .", "5": "Tom is an Ocellated wild turkey ."}], "errors": [[]], "entailments_dict": [{"7": ["3", "2", "4", "1", "5", "0", "6"], "4": ["7"], "1": ["7"], "5": ["7"], "0": ["7"], "(¬7)": ["6"]}, {"5": ["(¬1)"], "(¬5)": ["1"], "(¬0)": ["4"], "(¬4)": ["0"]}], "predicted_steps": [true, false]}
{"text": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom is an Eastern wild turkey?", "id": "10", "ground_truth": "False", "reasoning": "Premise 1.1: Tom is not an Eastern wild turkey.\nPremise 1.2: Tom is not an Osceola wild turkey.\nPremise 1.3: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nConclusion 1: Tom is an Ocellated wild turkey.\nPremise 2.1: Tom is not an Eastern wild turkey.\nConclusion 2: Tom is not an Eastern wild turkey.\nAnswer: B. No", "logic_premises": "[[0, 1, (2∨(3∨4))], [0]]", "logic_conclusion": "[5, 1]", "correspondance": [{"0": "Tom is not an Eastern wild turkey .", "1": "Tom is not an Osceola wild turkey .", "2": "Tom is also not a Gould 's wild turkey .", "3": "Tom is also not a Merriam 's wild turkey .", "4": "Tom is also not a Rio Grande wild turkey .", "5": "Tom is an Ocellated wild turkey ."}, {"0": "Tom is not an Eastern wild turkey .", "1": "Tom is not an Eastern wild turkey ."}], "errors": [[]], "entailments_dict": [{"5": ["(¬1)"], "(¬5)": ["1"], "(¬4)": ["0"]}, {"1": ["0"], "0": ["1"]}], "predicted_steps": [false, true]}
{"text": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Joey is a wild turkey?", "id": "11", "ground_truth": "Uncertain", "reasoning": "This question is about Joey, but the passage only talks about Tom. There is no information about Joey.\n\nAnswer: C. Uncertain.", "logic_premises": "[]", "logic_conclusion": "[]", "correspondance": [], "errors": ["No steps found in reasoning.", []], "entailments_dict": [], "predicted_steps": []}
{"text": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The Legend of Zelda is in the Top 10 list?", "id": "12", "ground_truth": "True", "reasoning": "Premise 1.1: The Legend of Zelda sold more than one million copies.\nPremise 1.2: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nConclusion 1: The Legend of Zelda will be selected into the Top 10 list.\nPremise 2.1: The Legend of Zelda will be selected into the Top 10 list.\nAnswer: A. Yes.", "logic_premises": "[[0, (((5∧6)→7)∪((8∧9)→a))]]", "logic_conclusion": "[4]", "correspondance": [{"0": "the Legend of Zelda sold more than one million copies .", "1": "X is a game", "2": "X sells more than one million copies .", "3": "X will be selected into the Top 10 list .", "4": "the Legend of Zelda will be selected into the Top 10 list .", "5": "The Legend of Zelda is a game", "6": "The Legend of Zelda sells more than one million copies .", "7": "The Legend of Zelda will be selected into the Top 10 list .", "8": "the Top 10 list is a game", "9": "the Top 10 list sells more than one million copies .", "a": "the Top 10 list will be selected into the Top 10 list ."}], "errors": [[]], "entailments_dict": [{"0": ["5", "6"], "4": ["5"], "7": ["4"], "(¬4)": ["5"], "(¬0)": ["5"]}], "predicted_steps": [true]}
{"text": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that FIFA 22 is made by a Japanese video game company?", "id": "13", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: The Legend of Zelda sold more than one million copies.\nPremise 1.2: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nConclusion 1: The Legend of Zelda is in the Top 10 list.\nPremise 2.1: All games in the Top 10 list are made by Japanese game companies.\nPremise 2.2: The Legend of Zelda is in the Top 10 list.\nConclusion 2: No information about FIFA 22.\nAnswer: C. Uncertain.", "logic_premises": "[[0, (((5∧6)→7)∪((8∧9)→a))], [((4→5)∪((6→7)∪(8→9))), 2]]", "logic_conclusion": "[4, 3]", "correspondance": [{"0": "the Legend of Zelda sold more than one million copies .", "1": "X is a game", "2": "X sells more than one million copies .", "3": "X will be selected into the Top 10 list .", "4": "the Legend of Zelda is in the Top 10 list .", "5": "The Legend of Zelda is a game", "6": "The Legend of Zelda sells more than one million copies .", "7": "The Legend of Zelda will be selected into the Top 10 list .", "8": "the Top 10 list is a game", "9": "the Top 10 list sells more than one million copies .", "a": "the Top 10 list will be selected into the Top 10 list ."}, {"0": "X is a game in the Top 10 list .", "1": "X is made by Japanese game companies .", "2": "The Legend of Zelda is in the Top 10 list .", "3": "No information about FIFA 22 .", "4": "FIFA 22 is a game in the Top 10 list .", "5": "FIFA 22 is made by Japanese game companies .", "6": "The Legend of Zelda is a game in the Top 10 list .", "7": "The Legend of Zelda is made by Japanese game companies .", "8": "the Top 10 list is a game in the Top 10 list .", "9": "the Top 10 list is made by Japanese game companies ."}], "errors": [[]], "entailments_dict": [{"0": ["5", "6"], "4": ["5"], "(¬4)": ["5"], "(¬0)": ["5"]}, {"2": ["6"], "3": ["(¬5)"]}], "predicted_steps": [false, false]}
{"text": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The Legend of Zelda is not in the Top 10 list?", "id": "14", "ground_truth": "False", "reasoning": "Premise 1.1: The Legend of Zelda sold more than one million copies.\nPremise 1.2: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nConclusion 1: The Legend of Zelda will be selected into the Top 10 list.\nPremise 2.1: The Legend of Zelda will be selected into the Top 10 list.\nPremise 2.2: All games in the Top 10 list are made by Japanese game companies.\nPremise 2.3: A Japanese game company created the game the Legend of Zelda.\nConclusion 2: The Legend of Zelda is in the Top 10 list.\nAnswer: B. No", "logic_premises": "[[0, (((5∧6)→7)∪((8∧9)→a))], [0, ((5→6)∪((7→8)∪(9→a))), 3]]", "logic_conclusion": "[4, 4]", "correspondance": [{"0": "the Legend of Zelda sold more than one million copies .", "1": "X is a game", "2": "X sells more than one million copies .", "3": "X will be selected into the Top 10 list .", "4": "the Legend of Zelda will be selected into the Top 10 list .", "5": "The Legend of Zelda is a game", "6": "The Legend of Zelda sells more than one million copies .", "7": "The Legend of Zelda will be selected into the Top 10 list .", "8": "the Top 10 list is a game", "9": "the Top 10 list sells more than one million copies .", "a": "the Top 10 list will be selected into the Top 10 list ."}, {"0": "the Legend of Zelda will be selected into the Top 10 list .", "1": "X is a game in the Top 10 list .", "2": "X is made by Japanese game companies .", "3": "A Japanese game company created the Legend of Zelda .", "4": "the Legend of Zelda is in the Top 10 list .", "5": "The Legend of Zelda is a game in the Top 10 list .", "6": "The Legend of Zelda is made by Japanese game companies .", "7": "the Top 10 list is a game in the Top 10 list .", "8": "the Top 10 list is made by Japanese game companies .", "9": "the game the Legend of Zelda is a game in the Top 10 list .", "a": "the game the Legend of Zelda is made by Japanese game companies ."}], "errors": [[]], "entailments_dict": [{"0": ["5", "6"], "4": ["5"], "7": ["4"], "(¬4)": ["5"], "(¬0)": ["5"]}, {"0": ["5", "9"], "6": ["3"], "a": ["3"], "4": ["9", "5"]}], "predicted_steps": [true, false]}
{"text": "All squares have four sides. All four-sided things are shapes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that All squares are shapes?", "id": "15", "ground_truth": "True", "reasoning": "Premise 1.1: All squares have four sides.\nPremise 1.2: All four-sided things are shapes.\nConclusion 1: All squares are shapes.\nAnswer: A. Yes", "logic_premises": "[[(0→1), (2→3)]]", "logic_conclusion": "[(4→5)]", "correspondance": [{"0": "X is a square .", "1": "X has four sides .", "2": "X is a four - sided thing .", "3": "X is a shape .", "4": "X is a square .", "5": "X is a shape ."}], "errors": [[]], "entailments_dict": [{"1": ["2", "5"], "4": ["0", "2"], "3": ["5", "(¬1)"]}], "predicted_steps": ["Contradiction in the premises"]}
{"text": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rock is a turtle?", "id": "16", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Rock is still.\nPremise 1.2: If something is skittish, then it is not still.\nConclusion 1: Rock is not skittish.\nPremise 2.1: All squirrels are skittish.\nPremise 2.2: Rock is not skittish.\nConclusion 2: Rock is not a squirrel.\nPremise 3.1: An animal is either a rabbit or a squirrel.\nPremise 3.2: Rock is not a squirrel.\nConclusion 3: Rock is not an animal (i.e., it's not a rabbit either).\nPremise 4.1: Some turtles exist.\nPremise 4.2: Rock is not an animal.\nConclusion 4: We can't conclude that Rock is a turtle.\nAnswer: C. Uncertain.", "logic_premises": "[[0, (1→2)], [(4→5), 2], [(5→(6⊻7)), 3], [0, 1]]", "logic_conclusion": "[3, 3, 4, 2]", "correspondance": [{"0": "rock is still .", "1": "X is skittish .", "2": "X is not still .", "3": "rock is not skittish ."}, {"0": "X is a squirrel .", "1": "X is skittish .", "2": "Rock is not skittish .", "3": "Rock is not a squirrel .", "4": "Rock is a squirrel .", "5": "Rock is skittish ."}, {"0": "X is An animal", "1": "X is a rabbit .", "2": "X is a squirrel .", "3": "Rock is not a squirrel .", "4": "Rock is not an animal .", "5": "Rock is An animal", "6": "Rock is a rabbit .", "7": "Rock is a squirrel ."}, {"0": "Some turtles exist .", "1": "Rock is not an animal .", "2": "We ca n't conclude that Rock is a turtle ."}], "errors": [[]], "entailments_dict": [{"3": ["0", "(¬2)"], "0": ["3", "(¬2)"], "2": ["(¬0)"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"7": ["(¬3)"], "3": ["(¬7)"], "4": ["(¬7)", "(¬6)"], "6": ["(¬7)"], "(¬4)": ["5"], "(¬3)": ["5"]}, {"2": ["0"], "(¬2)": ["0"]}], "predicted_steps": [true, true, false, false]}
{"text": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rock is not a turtle?", "id": "17", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Rock is still.\nPremise 1.2: If something is skittish, then it is not still.\nConclusion 1: Rock is not skittish.\nPremise 2.1: All squirrels are skittish.\nPremise 2.2: Rock is not skittish.\nConclusion 2: Rock is not a squirrel.\nPremise 3.1: An animal is either a rabbit or a squirrel.\nPremise 3.2: Rock is not a squirrel.\nConclusion 3: Rock is a rabbit (or not an animal at all).\nPremise 4.1: Some turtles exist.\nPremise 4.2: Rock is a rabbit (or not an animal at all).\nConclusion 4: Rock is not a turtle.\nAnswer: A. Yes", "logic_premises": "[[0, (1→2)], [(4→5), 2], [(5→(6⊻7)), 3], [0, 1]]", "logic_conclusion": "[3, 3, 4, 2]", "correspondance": [{"0": "rock is still .", "1": "X is skittish .", "2": "X is not still .", "3": "rock is not skittish ."}, {"0": "X is a squirrel .", "1": "X is skittish .", "2": "Rock is not skittish .", "3": "Rock is not a squirrel .", "4": "Rock is a squirrel .", "5": "Rock is skittish ."}, {"0": "X is An animal", "1": "X is a rabbit .", "2": "X is a squirrel .", "3": "Rock is not a squirrel .", "4": "Rock is a rabbit .", "5": "Rock is An animal", "6": "Rock is a rabbit .", "7": "Rock is a squirrel ."}, {"0": "Some turtles exist .", "1": "Rock is a rabbit .", "2": "Rock is not a turtle ."}], "errors": [[]], "entailments_dict": [{"3": ["0", "(¬2)"], "0": ["3", "(¬2)"], "2": ["(¬0)"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"4": ["5", "(¬7)"], "6": ["4", "(¬7)"], "7": ["(¬3)"], "3": ["(¬7)"], "(¬4)": ["5"], "(¬3)": ["5"]}, {"2": ["0"], "(¬2)": ["0"]}], "predicted_steps": [true, true, false, false]}
{"text": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rock is a turtle or cute?", "id": "18", "ground_truth": "True", "reasoning": "Premise 1.1: An animal is either a rabbit or a squirrel.\nPremise 1.2: Rock is still.\nPremise 1.3: If something is skittish, then it is not still.\nPremise 1.4: All squirrels are skittish.\nConclusion 1: Rock is not a squirrel.\nPremise 2.1: Rock is not a squirrel.\nPremise 2.2: An animal is either a rabbit or a squirrel.\nConclusion 2: Rock is a rabbit.\nPremise 3.1: Rock is a rabbit.\nPremise 3.2: All rabbits are cute.\nConclusion 3: Rock is cute.\nPremise 4.1: Rock is cute.\nAnswer: A. Yes", "logic_premises": "[[(9→(a⊻b)), 3, (c→d), (e→f)], [0, (5→(6⊻7))], [0, (1→2)]]", "logic_conclusion": "[8, 4, 3]", "correspondance": [{"0": "X is An animal", "1": "X is a rabbit .", "2": "X is a squirrel .", "3": "Rock is still .", "4": "X is skittish .", "5": "X is not still .", "6": "X is a squirrel .", "7": "X is skittish .", "8": "Rock is not a squirrel .", "9": "Rock is An animal", "a": "Rock is a rabbit .", "b": "Rock is a squirrel .", "c": "Rock is skittish .", "d": "Rock is not still .", "e": "Rock is a squirrel .", "f": "Rock is skittish ."}, {"0": "Rock is not a squirrel .", "1": "X is An animal", "2": "X is a rabbit .", "3": "X is a squirrel .", "4": "Rock is a rabbit .", "5": "Rock is An animal", "6": "Rock is a rabbit .", "7": "Rock is a squirrel ."}, {"0": "rock is a rabbit .", "1": "X is a rabbit .", "2": "X is cute .", "3": "rock is cute ."}], "errors": [[]], "entailments_dict": [{"b": ["e"], "f": ["c", "(¬3)"], "d": ["(¬3)"], "3": ["(¬d)", "(¬f)"], "8": ["(¬b)"], "a": ["(¬b)"], "(¬8)": ["9", "e"], "(¬e)": ["9"]}, {"4": ["5", "(¬7)"], "6": ["4", "(¬7)"], "7": ["(¬0)"], "0": ["(¬7)"], "(¬4)": ["5"], "(¬0)": ["5"]}, {"2": ["(¬0)"]}], "predicted_steps": [false, false, false]}
{"text": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish?", "id": "19", "ground_truth": "True", "reasoning": "Premise 1.1: An animal is either a rabbit or a squirrel.\nPremise 1.2: Rock is not both a turtle and a squirrel.\nConclusion 1: Rock is either a rabbit or a squirrel.\nPremise 2.1: All rabbits are cute.\nPremise 2.2: Rock is either a rabbit or a squirrel.\nConclusion 2: If Rock is a rabbit, then Rock is cute.\nPremise 3.1: All squirrels are skittish.\nPremise 3.2: Rock is either a rabbit or a squirrel.\nConclusion 3: If Rock is a squirrel, then Rock is skittish.\nPremise 4.1: If Rock is a rabbit, then Rock is cute.\nPremise 4.2: If Rock is a squirrel, then Rock is skittish.\nConclusion 4: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nAnswer: A. Yes", "logic_premises": "[[(0→(1⊻2)), (3∧4)], [(6→7), (2⊻3)], [(6→7), (2⊻3)], [(0→1), (2→3)]]", "logic_conclusion": "[(5⊻6), (4→5), (4→5), ((4∧5)→(6⊻7))]", "correspondance": [{"0": "X is An animal", "1": "X is a rabbit .", "2": "X is a squirrel .", "3": "Rock is not a turtle .", "4": "Rock is not a squirrel .", "5": "Rock is a rabbit .", "6": "Rock is a squirrel ."}, {"0": "X is a rabbit .", "1": "X is cute .", "2": "Rock is a rabbit .", "3": "Rock is a squirrel .", "4": "Rock is a rabbit .", "5": "Rock is cute .", "6": "Rock is a rabbit .", "7": "Rock is cute ."}, {"0": "X is a squirrel .", "1": "X is skittish .", "2": "Rock is a rabbit .", "3": "Rock is a squirrel .", "4": "Rock is a squirrel .", "5": "Rock is skittish .", "6": "Rock is a squirrel .", "7": "Rock is skittish ."}, {"0": "Rock is a rabbit .", "1": "Rock is cute .", "2": "Rock is a squirrel .", "3": "Rock is skittish .", "4": "Rock is not a turtle .", "5": "Rock is not a squirrel .", "6": "Rock is cute .", "7": "Rock is skittish ."}], "errors": [[]], "entailments_dict": [{"3": ["(¬2)", "(¬1)"], "6": ["(¬4)"], "1": ["(¬2)"], "(¬6)": ["4"]}, {"2": ["6", "(¬3)"], "4": ["6", "2", "(¬3)"], "7": ["5"]}, {"3": ["6"], "4": ["6", "3", "(¬2)"], "7": ["5"], "2": ["(¬3)"]}, {"1": ["6"], "3": ["7"]}], "predicted_steps": [false, true, true, false]}
{"text": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Rock is cute and still, then Rock is a turtle and skittish?", "id": "20", "ground_truth": "False", "reasoning": "Premise 1.1: An animal is either a rabbit or a squirrel.\nPremise 1.2: Rock is cute and still.\nConclusion 1: Rock is not an animal (since it's still, and all animals are either rabbits or squirrels, and all squirrels are skittish, which means they are not still).\n\nPremise 2.1: Rock is not an animal.\nPremise 2.2: Rock is cute and still.\nConclusion 2: The statement \"If Rock is cute and still, then Rock is a turtle and skittish\" is a conditional statement about Rock, which is not an animal, so the statement is not applicable to Rock.\n\nPremise 3.1: The statement is not applicable to Rock.\nAnswer: B. No", "logic_premises": "[[(5→(6⊻7)), 3], [0, 1]]", "logic_conclusion": "[4, (2∧3)]", "correspondance": [{"0": "X is An animal", "1": "X is a rabbit .", "2": "X is a squirrel .", "3": "Rock is cute and still .", "4": "Rock is not an animal .", "5": "Rock is An animal", "6": "Rock is a rabbit .", "7": "Rock is a squirrel ."}, {"0": "Rock is not an animal .", "1": "Rock is cute and still .", "2": "The statement \" If Rock is cute and still , then Rock is a turtle and skittish \" is a conditional statement about Rock .", "3": "The statement \" If Rock is cute and still is not applicable to Rock ."}], "errors": [[]], "entailments_dict": [{"4": ["(¬7)", "(¬6)"], "6": ["(¬7)"], "(¬4)": ["5"]}, {"1": ["2"], "2": ["(¬0)"], "3": ["(¬1)"]}], "predicted_steps": [false, "Contradiction in the premises"]}
{"text": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Karen will share \"Stranger Things\" to Lisa?", "id": "21", "ground_truth": "True", "reasoning": "Premise 1.1: \"Stranger Things\" is a popular Netflix show.\nPremise 1.2: If a Netflix show is popular, Karen will binge-watch it.\nConclusion 1: Karen will binge-watch \"Stranger Things\".\nPremise 2.1: Karen will binge-watch \"Stranger Things\".\nPremise 2.2: If Karen binge-watches a Netflix show, she will share it to Lisa.\nConclusion 2: Karen will share \"Stranger Things\" to Lisa.\nPremise 3.1: Karen will share \"Stranger Things\" to Lisa.\nAnswer: A. Yes.", "logic_premises": "[[0, (((5∧6)→7)∪((8∧9)→a))], [0, (1→2)]]", "logic_conclusion": "[4, 3]", "correspondance": [{"0": "\" Stranger Things \" is a popular Netflix show .", "1": "X is a Netflix show", "2": "X is popular .", "3": "Karen will binge - watch X .", "4": "Karen will binge - watch \" Stranger Things \" .", "5": "Stranger Things is a Netflix show", "6": "Stranger Things is popular .", "7": "Karen will binge - watch Stranger Things .", "8": "Karen is a Netflix show", "9": "Karen is popular .", "a": "Karen will binge - watch Karen ."}, {"0": "Karen will binge - watch \" Stranger Things \" .", "1": "Karen binge - watches a Netflix show .", "2": "Karen will share a Netflix show to Lisa .", "3": "Karen will share \" Stranger Things \" to Lisa ."}], "errors": [[]], "entailments_dict": [{"0": ["5", "6"], "7": ["0", "4"], "4": ["0", "5"], "(¬4)": ["5"], "(¬0)": ["5"]}, {"0": ["1"]}], "predicted_steps": [true, false]}
{"text": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that \"Black Mirror\" is popular?", "id": "22", "ground_truth": "False", "reasoning": "Premise 1.1: If a Netflix show is popular, Karen will binge-watch it.\nPremise 1.2: \"Black Mirror\" is a Netflix show.\nPremise 1.3: Karen does not download \"Black Mirror\".\nConclusion 1: \"Black Mirror\" is not popular (because if it were, Karen would binge-watch it and download it, but she doesn't download it).\n\nAnswer: B. No", "logic_premises": "[[(((6∧7)→8)∪((9∧a)→b)), 3, 4]]", "logic_conclusion": "[5]", "correspondance": [{"0": "X is a Netflix show", "1": "X is popular .", "2": "Karen will binge - watch X .", "3": "\" Black Mirror \" is a Netflix show .", "4": "Karen does not download \" Black Mirror \" .", "5": "\" Black Mirror \" is not popular .", "6": "Karen is a Netflix show", "7": "Karen is popular .", "8": "Karen will binge - watch Karen .", "9": "Black Mirror is a Netflix show", "a": "Black Mirror is popular .", "b": "Karen will binge - watch Black Mirror ."}], "errors": [[]], "entailments_dict": [{"3": ["9"], "4": ["9", "3", "(¬8)", "(¬b)"], "5": ["9", "(¬8)"], "b": ["(¬4)"], "(¬5)": ["a", "9", "3"], "(¬a)": ["3"]}], "predicted_steps": ["Contradiction in the premises"]}
{"text": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Karen will share \"Black Mirror\" to Lisa?", "id": "23", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Karen does not download \"Black Mirror\".\nPremise 1.2: If and only if Karen binge-watches a Netflix show, she will download it.\nConclusion 1: Karen does not binge-watch \"Black Mirror\".\nPremise 2.1: If Karen binge-watches a Netflix show, she will share it to Lisa.\nPremise 2.2: Karen does not binge-watch \"Black Mirror\".\nConclusion 2: Karen will not share \"Black Mirror\" to Lisa.\nPremise 3.1: Karen will not share \"Black Mirror\" to Lisa.\nAnswer: B. No.", "logic_premises": "[[0, (1∧2)], [(0→1), 2]]", "logic_conclusion": "[3, 3]", "correspondance": [{"0": "Karen does not download \" Black Mirror \" .", "1": "Karen binge - watches a Netflix show .", "2": "Karen will download a Netflix show .", "3": "Karen does not binge - watch \" Black Mirror \" ."}, {"0": "Karen binge - watches a Netflix show .", "1": "Karen will share a Netflix show to Lisa .", "2": "Karen does not binge - watch \" Black Mirror \" .", "3": "Karen will not share \" Black Mirror \" to Lisa ."}], "errors": [[]], "entailments_dict": [{"(¬3)": ["1"], "(¬0)": ["2"]}, {"(¬2)": ["0"]}], "predicted_steps": [false, false]}
{"text": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Beijing has hosted both the 2008 Summer Olympics and a winter olympics?", "id": "24", "ground_truth": "True", "reasoning": "Premise 1.1: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nPremise 1.2: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nConclusion 1: Beijing has hosted both the 2008 Summer Olympics and a Winter Olympics.\nPremise 2.1: Beijing has hosted both the 2008 Summer Olympics and a Winter Olympics.\nAnswer: A. Yes.", "logic_premises": "[[(0∧1), 2]]", "logic_conclusion": "[(3∧4)]", "correspondance": [{"0": "Beijing hosted the 2008 Summer Olympics .", "1": "Beijing hosted 2008 Summer Paralympics Games .", "2": "Beijing has hosted both the Summer and Winter Olympics , along with the Summer and Winter Paralympics .", "3": "Beijing has hosted 2008 Summer Olympics .", "4": "Beijing has hosted a Winter Olympics ."}], "errors": [[]], "entailments_dict": [{"2": ["0", "4", "3"], "3": ["0"], "0": ["3"], "1": ["3"]}], "predicted_steps": [true]}
{"text": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Beijing is located in southern China?", "id": "25", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Beijing is located in Northern China.\nConclusion 1: Beijing is not located in Southern China.\nPremise 2.1: Beijing is not located in Southern China.\nAnswer: B. No.", "logic_premises": "[[0]]", "logic_conclusion": "[1]", "correspondance": [{"0": "Beijing is located in Northern China .", "1": "Beijing is not located in Southern China ."}], "errors": [[]], "entailments_dict": [{"0": ["1"]}], "predicted_steps": [true]}
{"text": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Beijing is the second largest Chinese city by urban population?", "id": "26", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Beijing is the world's most populous national capital city.\nConclusion 1: Beijing is the largest city by population (not specified as urban population, but it implies it).\nPremise 2.1: The question asks if Beijing is the second largest Chinese city by urban population.\nPremise 2.2: Beijing is the largest city by population.\nConclusion 2: Beijing is not the second largest Chinese city by urban population.\nPremise 3.1: Beijing is not the second largest Chinese city by urban population.\nAnswer: B. No.", "logic_premises": "[[0], [0, 1]]", "logic_conclusion": "[1, 2]", "correspondance": [{"0": "Beijing is the world 's most populous national capital city .", "1": "Beijing is the largest city by population ."}, {"0": "The question asks that Beijing is the second largest Chinese city by urban population .", "1": "Beijing is the largest city by population .", "2": "Beijing is not the second largest Chinese city by urban population ."}], "errors": [[]], "entailments_dict": [{}, {"2": ["1"], "0": ["(¬1)"], "1": ["(¬0)"]}], "predicted_steps": [false, "Contradiction in the premises"]}
{"text": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Marvin is an alien?", "id": "27", "ground_truth": "False", "reasoning": "Premise 1.1: Marvin cannot be from Earth and from Mars.\nPremise 1.2: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nConclusion 1: Either Marvin is from Earth or Marvin is an extraterrestrial.\nPremise 2.1: Everyone from Earth is a human.\nPremise 2.2: No extraterrestrial is human.\nConclusion 2: Marvin is not from Earth (because if Marvin was from Earth, Marvin would be human, but no extraterrestrial is human).\nPremise 3.1: Marvin is not from Earth.\nPremise 3.2: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nConclusion 3: Marvin is an extraterrestrial.\nPremise 4.1: If someone is from Mars, then they are aliens.\nPremise 4.2: Marvin is an extraterrestrial.\nConclusion 4: Marvin is an alien (because if Marvin is an extraterrestrial, Marvin could be from Mars, and if someone is from Mars, then they are aliens).\nPremise 5.1: Marvin is an alien.\nAnswer: A. Yes", "logic_premises": "[[0, (1→2)], [((5→6)∪(7→8)), ((9→a)∪(b→c))], [0, (1→2)], [((4→5)∪(6→7)), 2]]", "logic_conclusion": "[(3∨4), 4, 3, 3]", "correspondance": [{"0": "Marvin can not be from Earth and from Mars .", "1": "Marvin is not from Earth .", "2": "Marvin is an extraterrestrial .", "3": "Either Marvin is from Earth .", "4": "Either Marvin is an extraterrestrial ."}, {"0": "X is a person from Earth .", "1": "X is a human .", "2": "X is an extraterrestrial .", "3": "X is not human .", "4": "Marvin is not from Earth .", "5": "Marvin is a person from Earth .", "6": "Marvin is a human .", "7": "Earth is a person from Earth .", "8": "Earth is a human .", "9": "Marvin is an extraterrestrial .", "a": "Marvin is not human .", "b": "Earth is an extraterrestrial .", "c": "Earth is not human ."}, {"0": "Marvin is not from Earth .", "1": "Marvin is not from Earth .", "2": "Marvin is an extraterrestrial .", "3": "Marvin is an extraterrestrial ."}, {"0": "X is from Mars .", "1": "X are aliens .", "2": "Marvin is an extraterrestrial .", "3": "Marvin is an alien .", "4": "Marvin is from Mars .", "5": "Marvin are aliens .", "6": "Mars is from Mars .", "7": "Mars are aliens ."}], "errors": [[]], "entailments_dict": [{"4": ["1"], "0": ["4"], "2": ["4"], "3": ["(¬2)"], "(¬3)": ["1"]}, {"4": ["9", "(¬6)", "(¬8)"], "c": ["(¬6)", "(¬8)"], "8": ["(¬c)", "(¬a)"], "a": ["(¬6)", "(¬8)"], "6": ["(¬a)"], "(¬4)": ["5"]}, {"2": ["0", "3"], "0": ["1", "3"], "3": ["0", "1"]}, {"5": ["2", "3"], "3": ["2"], "2": ["3"]}], "predicted_steps": [true, false, true, true]}
{"text": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Marvin is neither a human nor from Mars?", "id": "28", "ground_truth": "True", "reasoning": "Premise 1.1: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nPremise 1.2: Marvin cannot be from Earth and from Mars.\nConclusion 1: If Marvin is not from Earth, then Marvin is not from Mars.\nPremise 2.1: If someone is from Mars, then they are aliens.\nPremise 2.2: No extraterrestrial is human.\nConclusion 2: If someone is from Mars, then they are not human.\nPremise 3.1: Everyone from Earth is a human.\nPremise 3.2: Marvin cannot be from Earth and from Mars.\nConclusion 3: If Marvin is not from Earth, then Marvin is not a human.\nPremise 4.1: If Marvin is not from Earth, then Marvin is not a human.\nPremise 4.2: If Marvin is not from Earth, then Marvin is not from Mars.\nConclusion 4: If Marvin is not from Earth, then Marvin is neither a human nor from Mars.\nPremise 5.1: If Marvin is not from Earth, then Marvin is neither a human nor from Mars.\nPremise 5.2: Marvin cannot be from Earth and from Mars.\nConclusion 5: Marvin is neither a human nor from Mars.\nAnswer: A. Yes", "logic_premises": "[[(0→1), 2], [(0→1), (2→3)], [((5→6)∪((7→8)∪(9→a))), 2], [(0→1), (2→3)], [(0→1), 2]]", "logic_conclusion": "[(3→4), (4→5), (3→4), (4→5), 3]", "correspondance": [{"0": "Marvin is not from Earth .", "1": "Marvin is an extraterrestrial .", "2": "Marvin can not be from Earth and from Mars .", "3": "Marvin is not from Earth .", "4": "Marvin is not from Mars ."}, {"0": "X is from Mars .", "1": "X are aliens .", "2": "X is an extraterrestrial .", "3": "X is not human .", "4": "X is from Mars .", "5": "X are not human ."}, {"0": "X is a person from Earth .", "1": "X is a human .", "2": "Marvin can not be from Earth and from Mars .", "3": "Marvin is not from Earth .", "4": "Marvin is not a human .", "5": "Marvin is a person from Earth .", "6": "Marvin is a human .", "7": "Mars is a person from Earth .", "8": "Mars is a human .", "9": "Earth is a person from Earth .", "a": "Earth is a human ."}, {"0": "Marvin is not from Earth .", "1": "Marvin is not a human .", "2": "Marvin is not from Earth .", "3": "Marvin is not from Mars .", "4": "Marvin is not from Earth .", "5": "Marvin is neither a human nor from Mars ."}, {"0": "Marvin is not from Earth .", "1": "Marvin is neither a human nor from Mars .", "2": "Marvin can not be from Earth and from Mars .", "3": "Marvin is neither a human nor from Mars ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "(¬4)": ["0"]}, {"1": ["2", "5"], "4": ["0", "2"], "3": ["5"]}, {"2": ["(¬8)", "(¬a)"], "6": ["(¬2)"], "8": ["(¬2)"], "a": ["(¬2)"], "3": ["(¬a)", "(¬6)", "(¬8)"], "(¬4)": ["5"]}, {"4": ["0", "2"], "3": ["5"]}, {"1": ["3"]}], "predicted_steps": [false, true, false, true, false]}
{"text": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Marvin is not from Mars, then Marvin is a human?", "id": "29", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nPremise 1.2: No extraterrestrial is human.\nConclusion 1: If Marvin is not from Earth, then Marvin is not a human.\n\nPremise 2.1: Marvin cannot be from Earth and from Mars.\nPremise 2.2: Everyone from Earth is a human.\nConclusion 2: If Marvin is from Mars, then Marvin is not from Earth.\n\nPremise 3.1: If Marvin is from Mars, then Marvin is an alien.\nPremise 3.2: All aliens are extraterrestrial.\nConclusion 3: If Marvin is from Mars, then Marvin is an extraterrestrial.\n\nPremise 4.1: If Marvin is not from Mars, then Marvin is not an extraterrestrial (from Conclusion 3).\nPremise 4.2: If Marvin is not from Earth, then Marvin is an extraterrestrial (from Conclusion 1).\nConclusion 4: If Marvin is not from Mars, then Marvin is from Earth.\n\nPremise 5.1: If Marvin is not from Mars, then Marvin is from Earth (from Conclusion 4).\nPremise 5.2: Everyone from Earth is a human.\nConclusion 5: If Marvin is not from Mars, then Marvin is a human.\n\nAnswer: A. Yes", "logic_premises": "[[(0→1), ((6→7)∪(8→9))], [0, ((5→6)∪((7→8)∪(9→a)))], [(0→1), ((6→7)∪(8→9))], [(0→1), (2→3)], [(0→1), ((6→7)∪((8→9)∪(a→b)))]]", "logic_conclusion": "[(4→5), (3→4), (4→5), (4→5), (4→5)]", "correspondance": [{"0": "Marvin is not from Earth .", "1": "Marvin is an extraterrestrial .", "2": "X is an extraterrestrial .", "3": "X is not human .", "4": "Marvin is not from Earth .", "5": "Marvin is not a human .", "6": "Marvin is an extraterrestrial .", "7": "Marvin is not human .", "8": "Earth is an extraterrestrial .", "9": "Earth is not human ."}, {"0": "Marvin can not be from Earth and from Mars .", "1": "X is a person from Earth .", "2": "X is a human .", "3": "Marvin is from Mars .", "4": "Marvin is not from Earth .", "5": "Marvin is a person from Earth .", "6": "Marvin is a human .", "7": "Mars is a person from Earth .", "8": "Mars is a human .", "9": "Earth is a person from Earth .", "a": "Earth is a human ."}, {"0": "Marvin is from Mars .", "1": "Marvin is an alien .", "2": "X is an alien .", "3": "X is extraterrestrial .", "4": "Marvin is from Mars .", "5": "Marvin is an extraterrestrial .", "6": "Marvin is an alien .", "7": "Marvin is extraterrestrial .", "8": "Mars is an alien .", "9": "Mars is extraterrestrial ."}, {"0": "Marvin is not from Mars .", "1": "Marvin is not an extraterrestrial .", "2": "Marvin is not from Earth .", "3": "Marvin is an extraterrestrial .", "4": "Marvin is not from Mars .", "5": "Marvin is from Earth ."}, {"0": "Marvin is not from Mars .", "1": "Marvin is from Earth .", "2": "X is a person from Earth .", "3": "X is a human .", "4": "Marvin is not from Mars .", "5": "Marvin is a human .", "6": "Marvin is a person from Earth .", "7": "Marvin is a human .", "8": "Mars is a person from Earth .", "9": "Mars is a human .", "a": "Earth is a person from Earth .", "b": "Earth is a human ."}], "errors": [[]], "entailments_dict": [{"1": ["6", "5"], "4": ["0", "6"], "7": ["5"]}, {"0": ["(¬a)", "(¬8)"], "6": ["(¬0)"], "8": ["(¬0)"], "a": ["(¬0)"], "3": ["(¬a)", "(¬6)", "(¬8)"], "(¬4)": ["5"]}, {"1": ["6", "5"], "4": ["0", "6"], "7": ["5"]}, {"4": ["0"], "1": ["5", "(¬3)"], "3": ["(¬1)"], "(¬5)": ["2"], "(¬0)": ["2"], "(¬2)": ["0"]}, {"1": ["6", "(¬9)", "(¬b)"], "7": ["0", "5"], "4": ["0", "(¬9)", "(¬b)"]}], "predicted_steps": [true, false, true, true, true]}
{"text": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Djokovic is a Grand Slam champion?", "id": "30", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nPremise 1.2: If a person is an athlete then they are famous.\nConclusion 1: Djokovic is an athlete.\nPremise 2.1: All professional tennis players are athletes.\nPremise 2.2: Djokovic is an athlete.\nConclusion 2: Djokovic is a professional tennis player.\nPremise 3.1: All people who are Grand Slam champions are professional tennis players.\nPremise 3.2: Djokovic is a professional tennis player.\nConclusion 3: Djokovic is a Grand Slam champion.\nPremise 4.1: A person is either a Grand Slam champion or an Oscar-nominated actor.\nPremise 4.2: Djokovic is a Grand Slam champion.\nAnswer: A. Yes", "logic_premises": "[[((0∧1)→2), ((7∧8)→9)], [(4→5), 2], [((4→5)∪(6→7)), 2]]", "logic_conclusion": "[6, 3, 3]", "correspondance": [{"0": "Djokovic is famous .", "1": "Djokovic is an athlete .", "2": "Djokovic lives in well paid .", "3": "X is a person", "4": "X is an athlete .", "5": "X are famous .", "6": "Djokovic is an athlete .", "7": "Djokovic is a person", "8": "Djokovic is an athlete .", "9": "Djokovic are famous ."}, {"0": "X is a professional tennis player .", "1": "X is an athlete .", "2": "Djokovic is an athlete .", "3": "Djokovic is a professional tennis player .", "4": "Djokovic is a professional tennis player .", "5": "Djokovic is an athlete ."}, {"0": "X is a person who is Grand Slam champions .", "1": "X is professional tennis a player .", "2": "Djokovic is a professional tennis player .", "3": "Djokovic is a Grand Slam champion .", "4": "Grand Slam champions is a person who is Grand Slam champions .", "5": "Grand Slam champions is professional tennis a player .", "6": "Djokovic is a person who is Grand Slam champions .", "7": "Djokovic is professional tennis a player ."}], "errors": [[]], "entailments_dict": [{"9": ["0", "1", "6"], "2": ["8", "7", "6"], "6": ["1", "7", "8"], "(¬6)": ["7"], "(¬0)": ["7", "8"], "(¬1)": ["7"]}, {"5": ["2", "3"], "2": ["4", "3"], "3": ["4", "2"], "(¬3)": ["2"], "(¬4)": ["2"]}, {"5": ["2"], "7": ["2", "3"], "2": ["4", "6", "3"], "3": ["4", "6", "2"], "(¬3)": ["4", "2"], "(¬6)": ["2"]}], "predicted_steps": [false, true, true]}
{"text": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Djokovic lives in a tax haven?", "id": "31", "ground_truth": "True", "reasoning": "Premise 1.1: Djokovic is famous and is an athlete.\nPremise 1.2: If a person is an athlete then they are famous.\nConclusion 1: Djokovic is an athlete.\nPremise 2.1: Djokovic is an athlete.\nPremise 2.2: All professional tennis players are athletes.\nConclusion 2: Djokovic is a professional tennis player.\nPremise 3.1: Djokovic is a professional tennis player.\nPremise 3.2: All people who are Grand Slam champions are professional tennis players.\nConclusion 3: Djokovic is a Grand Slam champion.\nPremise 4.1: Djokovic is a Grand Slam champion.\nPremise 4.2: If a person is a celebrity then they are well paid.\nPremise 4.3: All Oscar-nominated actors are celebrities.\nConclusion 4: Djokovic is well paid.\nPremise 5.1: Djokovic is well paid.\nPremise 5.2: All well-paid people live in tax havens.\nConclusion 5: Djokovic lives in a tax haven.\nAnswer: A. Yes", "logic_premises": "[[(0∧1), ((6∧7)→8)], [0, (4→5)], [0, ((4→5)∪(6→7))], [0, (((7∧8)→9)∪((a∧b)→c)), ((d→e)∪(f→g))], [0, (4→5)]]", "logic_conclusion": "[5, 3, 3, 6, 3]", "correspondance": [{"0": "Djokovic is famous .", "1": "Djokovic is an athlete .", "2": "X is a person", "3": "X is an athlete .", "4": "X are famous .", "5": "Djokovic is an athlete .", "6": "Djokovic is a person", "7": "Djokovic is an athlete .", "8": "Djokovic are famous ."}, {"0": "Djokovic is an athlete .", "1": "X is a professional tennis player .", "2": "X is an athlete .", "3": "Djokovic is a professional tennis player .", "4": "Djokovic is a professional tennis player .", "5": "Djokovic is an athlete ."}, {"0": "Djokovic is a professional tennis player .", "1": "X is a person who is Grand Slam champions .", "2": "X is professional tennis a player .", "3": "Djokovic is a Grand Slam champion .", "4": "Grand Slam champions is a person who is Grand Slam champions .", "5": "Grand Slam champions is professional tennis a player .", "6": "Djokovic is a person who is Grand Slam champions .", "7": "Djokovic is professional tennis a player ."}, {"0": "Djokovic is a Grand Slam champion .", "1": "X is a person", "2": "X is a celebrity .", "3": "X are well paid .", "4": "X is an Oscar - nominated actor .", "5": "X is a celebrity .", "6": "Djokovic is well paid .", "7": "Oscar is a person", "8": "Oscar is a celebrity .", "9": "Oscar are well paid .", "a": "Djokovic is a person", "b": "Djokovic is a celebrity .", "c": "Djokovic are well paid .", "d": "Oscar is an Oscar - nominated actor .", "e": "Oscar is a celebrity .", "f": "Djokovic is an Oscar - nominated actor .", "g": "Djokovic is a celebrity ."}, {"0": "Djokovic is well paid .", "1": "X is a well - paid person .", "2": "X lives in tax havens .", "3": "Djokovic lives in a tax haven .", "4": "Djokovic is a well - paid person .", "5": "Djokovic lives in tax havens ."}], "errors": [[]], "entailments_dict": [{"1": ["6", "7", "5"], "8": ["0", "1", "5"], "0": ["7", "6", "5"], "5": ["1", "7", "6"], "(¬5)": ["6"], "(¬1)": ["6"], "(¬0)": ["7", "6"]}, {"5": ["0", "3"], "0": ["4", "3"], "3": ["0", "4"], "(¬3)": ["0"], "(¬4)": ["0"]}, {"5": ["0"], "0": ["4", "6", "3"], "7": ["0", "3"], "3": ["0", "4", "6"], "(¬3)": ["0", "4"], "(¬6)": ["0"]}, {"g": ["b", "0", "a"], "0": ["a"], "c": ["0", "6"], "e": ["8", "7"], "6": ["0", "a"], "(¬6)": ["0", "a"], "(¬f)": ["0", "a"], "(¬0)": ["a"]}, {"5": ["0", "3"], "0": ["4"], "3": ["4"]}], "predicted_steps": [true, true, true, false, true]}
{"text": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Djokovic does not live in a tax haven?", "id": "32", "ground_truth": "False", "reasoning": "Premise 1.1: Djokovic is famous and is an athlete.\nPremise 1.2: If a person is an athlete then they are famous.\nConclusion 1: Djokovic is an athlete.\nPremise 2.1: All professional tennis players are athletes.\nPremise 2.2: Djokovic is an athlete.\nConclusion 2: Djokovic is a professional tennis player.\nPremise 3.1: All people who are Grand Slam champions are professional tennis players.\nPremise 3.2: Djokovic is a professional tennis player.\nConclusion 3: Djokovic is a Grand Slam champion.\nPremise 4.1: If a person is a celebrity then they are well paid.\nPremise 4.2: All Oscar-nominated actors are celebrities.\nConclusion 4: If Djokovic is a celebrity then Djokovic is well paid.\nPremise 5.1: Djokovic is famous and is an athlete.\nPremise 5.2: If a person is an athlete then they are famous.\nConclusion 5: Djokovic is well paid.\nPremise 6.1: All well-paid people live in tax havens.\nPremise 6.2: Djokovic is well paid.\nConclusion 6: Djokovic lives in a tax haven.\nAnswer: B. No", "logic_premises": "[[(0∧1), ((6∧7)→8)], [(4→5), 2], [((4→5)∪(6→7)), 2], [(((7∧8)→9)∪((a∧b)→c)), ((d→e)∪(f→g))], [(0∧1), ((6∧7)→8)], [(4→5), 2]]", "logic_conclusion": "[5, 3, 3, (5→6), 5, 3]", "correspondance": [{"0": "Djokovic is famous .", "1": "Djokovic is an athlete .", "2": "X is a person", "3": "X is an athlete .", "4": "X are famous .", "5": "Djokovic is an athlete .", "6": "Djokovic is a person", "7": "Djokovic is an athlete .", "8": "Djokovic are famous ."}, {"0": "X is a professional tennis player .", "1": "X is an athlete .", "2": "Djokovic is an athlete .", "3": "Djokovic is a professional tennis player .", "4": "Djokovic is a professional tennis player .", "5": "Djokovic is an athlete ."}, {"0": "X is a person who is Grand Slam champions .", "1": "X is professional tennis a player .", "2": "Djokovic is a professional tennis player .", "3": "Djokovic is a Grand Slam champion .", "4": "Grand Slam champions is a person who is Grand Slam champions .", "5": "Grand Slam champions is professional tennis a player .", "6": "Djokovic is a person who is Grand Slam champions .", "7": "Djokovic is professional tennis a player ."}, {"0": "X is a person", "1": "X is a celebrity .", "2": "X are well paid .", "3": "X is an Oscar - nominated actor .", "4": "X is a celebrity .", "5": "Djokovic is a celebrity .", "6": "Djokovic is well paid .", "7": "Djokovic is a person", "8": "Djokovic is a celebrity .", "9": "Djokovic are well paid .", "a": "Oscar is a person", "b": "Oscar is a celebrity .", "c": "Oscar are well paid .", "d": "Djokovic is an Oscar - nominated actor .", "e": "Djokovic is a celebrity .", "f": "Oscar is an Oscar - nominated actor .", "g": "Oscar is a celebrity ."}, {"0": "Djokovic is famous .", "1": "Djokovic is an athlete .", "2": "X is a person", "3": "X is an athlete .", "4": "X are famous .", "5": "Djokovic is well paid .", "6": "Djokovic is a person", "7": "Djokovic is an athlete .", "8": "Djokovic are famous ."}, {"0": "X is a well - paid person .", "1": "X lives in tax havens .", "2": "Djokovic is well paid .", "3": "Djokovic lives in a tax haven .", "4": "Djokovic is a well - paid person .", "5": "Djokovic lives in tax havens ."}], "errors": [[]], "entailments_dict": [{"1": ["6", "7", "5"], "8": ["0", "1", "5"], "0": ["7", "6", "5"], "5": ["1", "7", "6"], "(¬5)": ["6"], "(¬1)": ["6"], "(¬0)": ["7", "6"]}, {"5": ["2", "3"], "2": ["4", "3"], "3": ["4", "2"], "(¬3)": ["2"], "(¬4)": ["2"]}, {"5": ["2"], "7": ["2", "3"], "2": ["4", "6", "3"], "3": ["4", "6", "2"], "(¬3)": ["4", "2"], "(¬6)": ["2"]}, {"g": ["a", "b"], "e": ["8", "7"], "5": ["7", "8"], "9": ["6"], "(¬6)": ["7"], "(¬d)": ["7"]}, {"1": ["6", "7", "5"], "8": ["0", "1"], "0": ["7", "6"], "5": ["1", "7", "6"], "(¬5)": ["1", "7", "6"], "(¬1)": ["6"], "(¬0)": ["7", "6"]}, {"5": ["2", "3"], "2": ["4"], "3": ["4"]}], "predicted_steps": [true, true, true, true, true, true]}
{"text": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Roderick strong leads a professional wrestling stable?", "id": "33", "ground_truth": "True", "reasoning": "Premise 1.1: Diamond Mine is a professional wrestling stable, formed in WWE.\nPremise 1.2: Roderick Strong leads Diamond Mine.\nConclusion 1: Roderick Strong leads a professional wrestling stable.\nAnswer: A. Yes.", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "Diamond Mine is a professional wrestling stable , formed in WWE .", "1": "Roderick Strong leads Diamond Mine .", "2": "Roderick Strong leads a professional wrestling stable ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Roderick strong leads the Creed Brothers?", "id": "34", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Roderick Strong leads Diamond Mine.\nPremise 1.2: Diamond Mine includes the Creed Brothers.\nConclusion 1: Roderick Strong leads Diamond Mine, which includes the Creed Brothers.\nPremise 2.1: Roderick Strong leads Diamond Mine, which includes the Creed Brothers.\nConclusion 2: Roderick Strong leads the Creed Brothers.\nAnswer: A. Yes.", "logic_premises": "[[0, 1], [(0∧1)]]", "logic_conclusion": "[(2∧3), 2]", "correspondance": [{"0": "Roderick Strong leads Diamond Mine .", "1": "Diamond Mine includes the Creed Brothers .", "2": "Roderick Strong leads Diamond Mine .", "3": "Diamond Mine includes the Creed Brothers ."}, {"0": "Roderick Strong leads Diamond Mine .", "1": "Diamond Mine includes the Creed Brothers .", "2": "Roderick Strong leads the Creed Brothers ."}], "errors": [[]], "entailments_dict": [{"2": ["0"], "3": ["1"], "0": ["2"], "1": ["3"]}, {}], "predicted_steps": [true, false]}
{"text": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile?", "id": "35", "ground_truth": "False", "reasoning": "Premise 1.1: Diamond Mine includes Ivy Nile.\nPremise 1.2: Imperium has a feud with Diamond Mine.\nConclusion 1: Imperium has a feud with a professional wrestling stable that includes Ivy Nile.\nPremise 2.1: Imperium has a feud with a professional wrestling stable that includes Ivy Nile.\nAnswer: B. No", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "Diamond Mine includes Ivy Nile .", "1": "Imperium has a feud with Diamond Mine .", "2": "Imperium has a feud with a professional wrestling stable that includes Ivy Nile ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Beethoven is a composer?", "id": "36", "ground_truth": "True", "reasoning": "Premise 1.1: Composers write music pieces.\nPremise 1.2: Beethoven wrote Symphony No. 9.\nPremise 1.3: Symphony No. 9 is a music piece.\nConclusion 1: Beethoven is a composer.\nPremise 2.1: Beethoven is a composer.\nAnswer: A. Yes", "logic_premises": "[[((6→7)∪(8→9)), ((a→b)∪(c→d)), 4]]", "logic_conclusion": "[5]", "correspondance": [{"0": "X is a Composer .", "1": "X writes music pieces .", "2": "X is a Symphony . 9 .", "3": "Beethoven did not write X .", "4": "Symphony No . 9 is a music piece .", "5": "Beethoven is a composer .", "6": "Symphony No. 9 is a Composer .", "7": "Symphony No. 9 writes music pieces .", "8": "Beethoven is a Composer .", "9": "Beethoven writes music pieces .", "a": "Symphony No. 9 is a Symphony . 9 .", "b": "Beethoven did not write Symphony No. 9 .", "c": "Beethoven is a Symphony . 9 .", "d": "Beethoven did not write Beethoven ."}], "errors": [[]], "entailments_dict": [{"d": ["4", "8", "5", "(¬7)"], "b": ["8", "4", "5", "(¬7)"], "4": ["8", "a", "5", "(¬d)", "(¬7)"], "7": ["a", "4", "5", "(¬d)", "(¬b)"], "9": ["4", "a", "5", "(¬d)", "(¬b)"], "5": ["8", "a", "4", "(¬d)", "(¬b)"], "(¬5)": ["a"], "(¬a)": ["4", "8"], "(¬c)": ["4"], "(¬6)": ["a", "4"], "(¬8)": ["4", "a"]}], "predicted_steps": [false]}
{"text": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some orchestras premiered music pieces?", "id": "37", "ground_truth": "True", "reasoning": "Premise 1.1: Vienna Music Society premiered Symphony No. 9.\nPremise 1.2: Vienna Music Society is an orchestra.\nConclusion 1: The Vienna Music Society, which is an orchestra, premiered Symphony No. 9.\nPremise 2.1: Symphony No. 9 is a music piece.\nPremise 2.2: The Vienna Music Society, which is an orchestra, premiered Symphony No. 9.\nConclusion 2: Some orchestras premiered music pieces.\nAnswer: A. Yes", "logic_premises": "[[], [0, (((5→6)∧3)∪((7→8)∧3))]]", "logic_conclusion": "['-1', 4]", "correspondance": [{"0": "X is a Symphony . 9 .", "1": "Vienna Music Society did not premiere X .", "2": "Vienna Music Society is an orchestra ."}, {"0": "Symphony No . 9 is a music piece .", "1": "X is a Symphony . 9 .", "2": "The Vienna Music Society did not premiere X .", "3": "The Vienna Music Society is an orchestra .", "4": "Some orchestras premiered music pieces .", "5": "The Vienna Music Society, which is an orchestra, is a Symphony . 9 .", "6": "The Vienna Music Society did not premiere The Vienna Music Society, which is an orchestra, .", "7": "Symphony No. 9 is a Symphony . 9 .", "8": "The Vienna Music Society did not premiere Symphony No. 9 ."}], "errors": ["Logic Transform Error -  Step n°: 0 sentence not supported", ["Entailments Error -  Step n°: 0 'str' object has no attribute 'get_variables_implications'"]], "entailments_dict": [{}, {"6": ["0", "4"], "8": ["0", "4"], "0": ["7"], "4": ["0", "7"], "(¬4)": ["0", "7"], "(¬7)": ["0"], "(¬5)": ["0"], "(¬3)": ["0"]}], "predicted_steps": [false, true]}
{"text": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Beethoven is not a conductor?", "id": "38", "ground_truth": "False", "reasoning": "Premise 1.1: Beethoven leads the Vienna Music Society.\nPremise 1.2: Vienna Music Society is an orchestra.\nConclusion 1: Beethoven leads an orchestra.\nPremise 2.1: Beethoven leads an orchestra.\nPremise 2.2: Orchestras are led by conductors.\nConclusion 2: Beethoven is a conductor.\nPremise 3.1: Beethoven is a conductor.\nAnswer: B. No", "logic_premises": "[[0, 1], [0, 1]]", "logic_conclusion": "[2, 2]", "correspondance": [{"0": "Beethoven leads the Vienna Music Society .", "1": "the Vienna Music Society is an orchestra .", "2": "Beethoven leads an orchestra ."}, {"0": "Beethoven leads an orchestra .", "1": "Orchestras are led by conductors .", "2": "Beethoven is a conductor ."}], "errors": [[]], "entailments_dict": [{}, {"2": ["0", "1"], "0": ["2"], "(¬2)": ["1"]}], "predicted_steps": [false, true]}
{"text": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A design by Max is a mass product design?", "id": "39", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nPremise 1.2: All of Zaha Hadid's design styles are timeless.\nPremise 1.3: No mass product design is timeless.\nConclusion 1: Kelly Wearstler's design style.\nPremise 2.1: Kelly Wearstler's design style.\nPremise 2.2: All of Kelly Wearstler's design styles are evocative.\nConclusion 2: Kelly Wearstler's design styles are evocative.\nPremise 3.1: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nPremise 3.2: Kelly Wearstler's design styles are evocative.\nConclusion 3: It is uncertain whether a design by Max is a mass product design.\nAnswer: C. Uncertain.", "logic_premises": "[[0, (6→7), (8→9)], [0, (4→5)], [(((6∧7)→8)∪((9∧a)→b)), 3]]", "logic_conclusion": "[5, 3, ((c→d)∪(e→f))]", "correspondance": [{"0": "Either Zaha Hadid 's 's design style or Kelly Wearstler 's 's design style .", "1": "X is of a Zaha Hadid 's 's design styles .", "2": "X is timeless .", "3": "X is a mass product design .", "4": "X is not timeless .", "5": "Kelly Wearstler 's 's design style .", "6": "Zaha Hadids design styles is of a Zaha Hadid 's 's design styles .", "7": "Zaha Hadids design styles is timeless .", "8": "Zaha Hadids design styles is a mass product design .", "9": "Zaha Hadids design styles is not timeless ."}, {"0": "Kelly Wearstler 's 's design style .", "1": "X is of a Kelly Wearstler 's 's design styles .", "2": "X is evocative .", "3": "Kelly Wearstler 's 's design styles are evocative .", "4": "Kelly Wearstlers design styles is of a Kelly Wearstler 's 's design styles .", "5": "Kelly Wearstlers design styles is evocative ."}, {"0": "X is a design by Max", "1": "X is timeless .", "2": "X is a mass product design and evocative .", "3": "Kelly Wearstler 's design styles are evocative .", "4": "It is uncertain that X is a design by Max", "5": "It is uncertain that X is a mass product design .", "6": "Max is a design by Max", "7": "Max is timeless .", "8": "Max is a mass product design and evocative .", "9": "Kelly Wearstlers design styles is a design by Max", "a": "Kelly Wearstlers design styles is timeless .", "b": "Kelly Wearstlers design styles is a mass product design and evocative .", "c": "It is uncertain that Max is a design by Max", "d": "It is uncertain that Max is a mass product design .", "e": "It is uncertain that Kelly Wearstlers design styles is a design by Max", "f": "It is uncertain that Kelly Wearstlers design styles is a mass product design ."}], "errors": [[]], "entailments_dict": [{"0": ["6", "5"], "7": ["(¬9)"], "9": ["(¬7)"]}, {"5": ["0", "3"], "0": ["4"], "3": ["0"], "(¬3)": ["0"], "(¬4)": ["0"]}, {"b": ["3"], "c": ["(¬b)"]}], "predicted_steps": [true, true, false]}
{"text": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A design by Max is evocative and dreamy?", "id": "40", "ground_truth": "True", "reasoning": "Premise 1.1: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nPremise 1.2: All of Zaha Hadid's design styles are timeless.\nPremise 1.3: No mass product design is timeless.\nConclusion 1: Kelly Wearstler's design style.\nPremise 2.1: Kelly Wearstler's design style.\nPremise 2.2: All of Kelly Wearstler's design styles are evocative and dreamy.\nConclusion 2: Kelly Wearstler's design styles are evocative and dreamy.\nPremise 3.1: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nPremise 3.2: No mass product design is timeless.\nConclusion 3: A design by Max is not timeless.\nPremise 4.1: A design by Max is not timeless.\nPremise 4.2: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nConclusion 4: We can't conclude about a design by Max being evocative and dreamy.\nAnswer: C. Uncertain.", "logic_premises": "[[0, (6→7), (8→9)], [0, (6→(7∧8))], [((6∧7)→8), (9→a)], [0, ((6∧7)→8)]]", "logic_conclusion": "[5, (4∧5), 5, (4∧5)]", "correspondance": [{"0": "Either Zaha Hadid 's 's design style or Kelly Wearstler 's 's design style .", "1": "X is of a Zaha Hadid 's 's design styles .", "2": "X is timeless .", "3": "X is a mass product design .", "4": "X is not timeless .", "5": "Kelly Wearstler 's 's design style .", "6": "Zaha Hadids design styles is of a Zaha Hadid 's 's design styles .", "7": "Zaha Hadids design styles is timeless .", "8": "Zaha Hadids design styles is a mass product design .", "9": "Zaha Hadids design styles is not timeless ."}, {"0": "Kelly Wearstler 's 's design style .", "1": "X is of a Kelly Wearstler 's 's design styles .", "2": "X is evocative .", "3": "X is dreamy .", "4": "Kelly Wearstler 's 's design styles are evocative .", "5": "Kelly Wearstler 's 's design styles are dreamy .", "6": "Kelly Wearstlers design styles is of a Kelly Wearstler 's 's design styles .", "7": "Kelly Wearstlers design styles is evocative .", "8": "Kelly Wearstlers design styles is dreamy ."}, {"0": "X is a design by Max", "1": "X is timeless .", "2": "X is a mass product design and evocative .", "3": "X is a mass product design .", "4": "X is not timeless .", "5": "A design by Max is not timeless .", "6": "Max is a design by Max", "7": "Max is timeless .", "8": "Max is a mass product design and evocative .", "9": "Max is a mass product design .", "a": "Max is not timeless ."}, {"0": "A design by Max is not timeless .", "1": "X is a design by Max", "2": "X is timeless .", "3": "X is a mass product design and evocative .", "4": "We ca n't conclude about a design by Max being evocative .", "5": "We ca n't conclude about a design by Max being dreamy .", "6": "Max is a design by Max", "7": "Max is timeless .", "8": "Max is a mass product design and evocative ."}], "errors": [[]], "entailments_dict": [{"0": ["6", "5"], "7": ["(¬9)"], "9": ["(¬7)"]}, {"7": ["0", "4"], "8": ["0", "5"], "0": ["6"], "4": ["0"], "5": ["0", "6"], "(¬4)": ["0"], "(¬5)": ["0", "6"], "(¬6)": ["0"]}, {"8": ["9"], "a": ["5"]}, {"5": ["(¬8)"]}], "predicted_steps": [true, true, false, false]}
{"text": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A design by Max is either evocative or dreamy?", "id": "41", "ground_truth": "False", "reasoning": "Premise 1.1: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nPremise 1.2: All of Zaha Hadid's design styles are timeless.\nPremise 1.3: No mass product design is timeless.\nConclusion 1: Kelly Wearstler's design style.\nPremise 2.1: Kelly Wearstler's design style.\nPremise 2.2: All of Kelly Wearstler's design styles are evocative.\nPremise 2.3: All of Kelly Wearstler's design styles are dreamy.\nConclusion 2: Kelly Wearstler's design styles are evocative and dreamy.\nPremise 3.1: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nPremise 3.2: (Not applicable, as we don't know if a design by Max is timeless)\nConclusion 3: (Not applicable)\nPremise 4.1: Kelly Wearstler's design styles are evocative and dreamy.\nAnswer: A. Yes", "logic_premises": "[[0, (6→7), (8→9)], [0, (7→8), (9→a)], [((5∧6)→7), 3]]", "logic_conclusion": "[5, (5∧6), 4]", "correspondance": [{"0": "Either Zaha Hadid 's 's design style or Kelly Wearstler 's 's design style .", "1": "X is of a Zaha Hadid 's 's design styles .", "2": "X is timeless .", "3": "X is a mass product design .", "4": "X is not timeless .", "5": "Kelly Wearstler 's 's design style .", "6": "Zaha Hadids design styles is of a Zaha Hadid 's 's design styles .", "7": "Zaha Hadids design styles is timeless .", "8": "Zaha Hadids design styles is a mass product design .", "9": "Zaha Hadids design styles is not timeless ."}, {"0": "Kelly Wearstler 's 's design style .", "1": "X is of a Kelly Wearstler 's 's design styles .", "2": "X is evocative .", "3": "X is of a Kelly Wearstler 's 's design styles .", "4": "X is dreamy .", "5": "Kelly Wearstler 's 's design styles are evocative .", "6": "Kelly Wearstler 's 's design styles are dreamy .", "7": "Kelly Wearstlers design styles is of a Kelly Wearstler 's 's design styles .", "8": "Kelly Wearstlers design styles is evocative .", "9": "Kelly Wearstlers design styles is of a Kelly Wearstler 's 's design styles .", "a": "Kelly Wearstlers design styles is dreamy ."}, {"0": "X is a design by Max", "1": "X is timeless .", "2": "X is a mass product design and evocative .", "3": ".", "4": ".", "5": "Max is a design by Max", "6": "Max is timeless .", "7": "Max is a mass product design and evocative ."}], "errors": [[]], "entailments_dict": [{"0": ["6", "5"], "7": ["(¬9)"], "9": ["(¬7)"]}, {"8": ["0", "5"], "0": ["7", "9"], "a": ["0", "6"], "6": ["0", "7", "9"], "5": ["0"], "(¬6)": ["0", "7", "9"], "(¬5)": ["0"], "(¬9)": ["0"], "(¬7)": ["0"]}, {"4": ["3"], "3": ["4"]}], "predicted_steps": [true, true, true]}
{"text": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Coco Gauff is among the most active players in major tennis?", "id": "42", "ground_truth": "True", "reasoning": "Premise 1.1: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\nPremise 1.2: Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\nConclusion 1: All female tennis players at Roland Garros 2022 are ranked highly by the Women's Tennis Association.\nPremise 2.1: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nPremise 2.2: All female tennis players at Roland Garros 2022 are ranked highly by the Women's Tennis Association.\nConclusion 2: All female tennis players at Roland Garros 2022 are among the most active players in major tennis.\nPremise 3.1: Coco Gauff is a female tennis player at Roland Garros 2022 (Implicit assumption).\nConclusion 3: Coco Gauff is among the most active players in major tennis.\nAnswer: A. Yes", "logic_premises": "[[(0→1), (2→3)], [((0∧1)→2), (3→4)], [0]]", "logic_conclusion": "[(4→5), (5→6), 1]", "correspondance": [{"0": "X is a female tennis player at Roland Garros 2022 .", "1": "X lost to Iga Świątek .", "2": "X is a person who lost to Iga Świątek .", "3": "X is ranked highly by the Women 's Tennis Association .", "4": "X is a female tennis player at Roland Garros 2022 .", "5": "X is ranked highly by the Women 's Tennis Association ."}, {"0": "X is a player", "1": "X is ranked highly by the Women 's Tennis Association .", "2": "X are among the most active players in major tennis .", "3": "X is a female tennis player at Roland Garros 2022 .", "4": "X is ranked highly by the Women 's Tennis Association .", "5": "X is a female tennis player at Roland Garros 2022 .", "6": "X is among the most active players in major tennis ."}, {"0": "Coco Gauff is a female tennis player at Roland Garros 2022 .", "1": "Coco Gauff is among the most active players in major tennis ."}], "errors": [[]], "entailments_dict": [{"1": ["2"], "4": ["0"], "3": ["5"]}, {"4": ["0", "1"], "5": ["0", "3"], "2": ["6"], "(¬6)": ["0"], "(¬3)": ["0"]}, {}], "predicted_steps": [true, true, false]}
{"text": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Coco Gauff has lost to Rafael Nadal?", "id": "43", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\nPremise 1.2: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\nConclusion 1: All female tennis players at Roland Garros 2022 are ranked highly by the Women's Tennis Association.\n\nPremise 2.1: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nPremise 2.2: All female tennis players at Roland Garros 2022 are ranked highly by the Women's Tennis Association.\nConclusion 2: All female tennis players at Roland Garros 2022 are among the most active players in major tennis.\n\nPremise 3.1: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nPremise 3.2: All female tennis players at Roland Garros 2022 are among the most active players in major tennis.\nConclusion 3: Coco Gauff is a female tennis player at Roland Garros 2022.\n\nPremise 4.1: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nPremise 4.2: Coco Gauff is a female tennis player at Roland Garros 2022.\nConclusion 4: Coco Gauff is not a player who lost to Rafael Nadal.\nAnswer: B. No", "logic_premises": "[[(0→1), (2→3)], [((0∧1)→2), (3→4)], [0, ((4→5)∪((6→7)∪(8→9)))], [((0∨1)→2), 3]]", "logic_conclusion": "[(4→5), (5→6), 3, 4]", "correspondance": [{"0": "X is a person who lost to Iga Świątek .", "1": "X is ranked highly by the Women 's Tennis Association .", "2": "X is a female tennis player at Roland Garros 2022 .", "3": "X lost to Iga Świątek .", "4": "X is a female tennis player at Roland Garros 2022 .", "5": "X is ranked highly by the Women 's Tennis Association ."}, {"0": "X is a player", "1": "X is ranked highly by the Women 's Tennis Association .", "2": "X are among the most active players in major tennis .", "3": "X is a female tennis player at Roland Garros 2022 .", "4": "X is ranked highly by the Women 's Tennis Association .", "5": "X is a female tennis player at Roland Garros 2022 .", "6": "X is among the most active players in major tennis ."}, {"0": "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022 .", "1": "X is a female tennis player at Roland Garros 2022 .", "2": "X is among the most active players in major tennis .", "3": "Coco Gauff is a female tennis player at Roland Garros 2022 .", "4": "Roland Garros 2022 is a female tennis player at Roland Garros 2022 .", "5": "Roland Garros 2022 is among the most active players in major tennis .", "6": "the most active players in major tennis is a female tennis player at Roland Garros 2022 .", "7": "the most active players in major tennis is among the most active players in major tennis .", "8": "Coco Gauff is a female tennis player at Roland Garros 2022 .", "9": "Coco Gauff is among the most active players in major tennis ."}, {"0": "Coco Gauff is a player who is ranked highly by the Women 's Tennis Association .", "1": "Coco Gauff is a player who lost to Rafael Nadal .", "2": "Coco Gauff is not a male tennis player at Roland Garros 2022 .", "3": "Coco Gauff is a female tennis player at Roland Garros 2022 .", "4": "Coco Gauff is not a player who lost to Rafael Nadal ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["2"], "1": ["5"]}, {"4": ["0", "1"], "5": ["0", "3"], "2": ["6"], "(¬6)": ["0"], "(¬3)": ["0"]}, {"3": ["0", "8"], "0": ["(¬5)"]}, {"2": ["3"], "(¬4)": ["1"]}], "predicted_steps": [true, true, false, false]}
{"text": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Coco Gauff is not a player who lost to Iga Świątek or one of the most active players in major tennis?", "id": "44", "ground_truth": "False", "reasoning": "Premise 1.1: Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\nPremise 1.2: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\nConclusion 1: All female tennis players at Roland Garros 2022 are ranked highly by the Women's Tennis Association.\n\nPremise 2.1: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nPremise 2.2: All female tennis players at Roland Garros 2022 are ranked highly by the Women's Tennis Association.\nConclusion 2: All female tennis players at Roland Garros 2022 are among the most active players in major tennis.\n\nPremise 3.1: Coco Gauff is a female tennis player at Roland Garros 2022 (assumed for the sake of contradiction).\nPremise 3.2: All female tennis players at Roland Garros 2022 are among the most active players in major tennis.\nConclusion 3: Coco Gauff is among the most active players in major tennis.\n\nPremise 4.1: Coco Gauff is a female tennis player at Roland Garros 2022 (assumed for the sake of contradiction).\nPremise 4.2: Coco Gauff is among the most active players in major tennis.\nConclusion 4: Coco Gauff is a player who lost to Iga Świątek and one of the most active players in major tennis.\n\nAnswer: B. No", "logic_premises": "[[(0→1), (2→3)], [((0∧1)→2), (3→4)], [0, ((4→5)∪((6→7)∪(8→9)))], [0, 1]]", "logic_conclusion": "[(4→5), (5→6), 3, (2∧3)]", "correspondance": [{"0": "X is a person who lost to Iga Świątek .", "1": "X is ranked highly by the Women 's Tennis Association .", "2": "X is a female tennis player at Roland Garros 2022 .", "3": "X lost to Iga Świątek .", "4": "X is a female tennis player at Roland Garros 2022 .", "5": "X is ranked highly by the Women 's Tennis Association ."}, {"0": "X is a player", "1": "X is ranked highly by the Women 's Tennis Association .", "2": "X are among the most active players in major tennis .", "3": "X is a female tennis player at Roland Garros 2022 .", "4": "X is ranked highly by the Women 's Tennis Association .", "5": "X is a female tennis player at Roland Garros 2022 .", "6": "X is among the most active players in major tennis ."}, {"0": "Coco Gauff is a female tennis player at Roland Garros 2022 .", "1": "X is a female tennis player at Roland Garros 2022 .", "2": "X is among the most active players in major tennis .", "3": "Coco Gauff is among the most active players in major tennis .", "4": "Roland Garros 2022 is a female tennis player at Roland Garros 2022 .", "5": "Roland Garros 2022 is among the most active players in major tennis .", "6": "the most active players in major tennis is a female tennis player at Roland Garros 2022 .", "7": "the most active players in major tennis is among the most active players in major tennis .", "8": "Coco Gauff is a female tennis player at Roland Garros 2022 .", "9": "Coco Gauff is among the most active players in major tennis ."}, {"0": "Coco Gauff is a female tennis player at Roland Garros 2022 .", "1": "Coco Gauff is among the most active players in major tennis .", "2": "Coco Gauff is a player who lost to Iga Świątek .", "3": "Coco Gauff is one of the most active players in major tennis ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["2"], "1": ["5"]}, {"4": ["0", "1"], "5": ["0", "3"], "2": ["6"], "(¬6)": ["0"], "(¬3)": ["0"]}, {"0": ["8"], "9": ["3"]}, {"3": ["1"], "1": ["3"]}], "predicted_steps": [true, true, true, false]}
{"text": "All cats are mammals. Some pets are not mammals.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that No pets are cats?", "id": "45", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: All cats are mammals.\nPremise 1.2: Some pets are not mammals.\nConclusion 1: Some pets are not cats (because they are not mammals).\nPremise 2.1: Some pets are not cats.\nPremise 2.2: (No information about pets that are cats)\nConclusion 2: Uncertain about whether no pets are cats.\nAnswer: C. Uncertain.", "logic_premises": "[[(0→1), 2], [0, 1]]", "logic_conclusion": "[3, 2]", "correspondance": [{"0": "X is a cat .", "1": "X is a mammal .", "2": "Some pets are not mammals .", "3": "Some pets are not cats ."}, {"0": "Some pets are not cats .", "1": ".", "2": "Uncertain about whether no pets are cats ."}], "errors": [[]], "entailments_dict": [{}, {"2": ["0", "(¬1)"], "(¬2)": ["0"]}], "predicted_steps": [false, "Contradiction in the premises"]}
{"text": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James's favorite season is summer?", "id": "46", "ground_truth": "True", "reasoning": "Premise 1.1: All students who want to have a long vacation love summer the most.\nPremise 1.2: James wants to have a long vacation.\nConclusion 1: James loves summer the most.\nPremise 2.1: James loves summer the most.\nPremise 2.2: Emma's favorite season is summer.\nConclusion 2: James's favorite season is summer.\nPremise 3.1: James's favorite season is summer.\nAnswer: A. Yes.", "logic_premises": "[[(4→5), 2], [0, 1]]", "logic_conclusion": "[3, 2]", "correspondance": [{"0": "X is a student who wants to has a long vacation .", "1": "X loves summer the most .", "2": "James wants to have a long vacation .", "3": "James loves summer the most .", "4": "James is a student who wants to has a long vacation .", "5": "James loves summer the most ."}, {"0": "James loves summer the most .", "1": "Emma 's favorite season is summer .", "2": "James 's favorite season is summer ."}], "errors": [[]], "entailments_dict": [{"5": ["3"]}, {"2": ["0"], "0": ["2"]}], "predicted_steps": [false, true]}
{"text": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James's favorite season is fall?", "id": "47", "ground_truth": "False", "reasoning": "Premise 1.1: All students who want to have a long vacation love summer the most.\nPremise 1.2: James wants to have a long vacation.\nConclusion 1: James's favorite season is summer.\nPremise 2.1: James's favorite season is summer.\nPremise 2.2: The question asks if James's favorite season is fall.\nConclusion 2: It is not true that James's favorite season is fall.\nAnswer: B. No.", "logic_premises": "[[((4→5)∪(6→7)), 2], [0, 1]]", "logic_conclusion": "[3, 2]", "correspondance": [{"0": "X is a student who wants to has a long vacation .", "1": "X loves summer the most .", "2": "James wants to have a long vacation .", "3": "James 's favorite season is summer .", "4": "Jamess favorite season is a student who wants to has a long vacation .", "5": "Jamess favorite season loves summer the most .", "6": "James is a student who wants to has a long vacation .", "7": "James loves summer the most ."}, {"0": "James 's 's favorite season is summer .", "1": "The question asks that James 's 's favorite season is fall .", "2": "It is not true that James 's 's favorite season is fall ."}], "errors": [[]], "entailments_dict": [{"7": ["3"], "5": ["3"]}, {"0": ["2", "(¬1)"]}], "predicted_steps": [false, "Contradiction in the premises"]}
{"text": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Mia's favorite season is spring?", "id": "48", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Emma's favorite season is summer.\nPremise 1.2: Mia's favorite season is not the same as Emma's.\nConclusion 1: Mia's favorite season is not summer.\nPremise 2.1: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nPremise 2.2: Mia's favorite season is not summer.\nConclusion 2: Mia's favorite season is either Spring, Fall, or Winter.\nAnswer: C. Uncertain.", "logic_premises": "[[0, 1], [(0∧(1∧(2∧3))), 4]]", "logic_conclusion": "[2, (5⊻6)]", "correspondance": [{"0": "Emma 's 's favorite season is summer .", "1": "Mia 's 's favorite season is not the same as Emma 's 's .", "2": "Mia 's 's favorite season is not summer ."}, {"0": "There are four seasons in a year : Spring .", "1": "There are four seasons in a year : Summer .", "2": "There are four seasons in a year : Fall .", "3": "There are four seasons in a year : Winter .", "4": "Mia 's 's favorite season is not Summer .", "5": "Mia 's 's favorite season is Spring .", "6": "Mia 's 's favorite season is Fall ."}], "errors": [[]], "entailments_dict": [{}, {"4": ["1"], "6": ["2", "4"], "5": ["0", "4"], "(¬6)": ["2"], "(¬5)": ["0"], "(¬4)": ["1"]}], "predicted_steps": [false, false]}
{"text": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that 1984 is printed text?", "id": "49", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: If 1984 is a streaming service, then 1984 is a hardcover book.\nPremise 1.2: 1984 is not a streaming service (by assumption, 1984 is a book title).\nConclusion 1: 1984 is not a hardcover book (by modus tollens).\nPremise 2.1: If an object is a hardcover book then it is printed text.\nPremise 2.2: 1984 is not a hardcover book.\nConclusion 2: 1984 is not printed text (by modus tollens).\nPremise 3.1: 1984 is not printed text.\nAnswer: B. No.", "logic_premises": "[[(0→1), 2], [((0∧1)→2), 3]]", "logic_conclusion": "[3, 4]", "correspondance": [{"0": "1984 is a streaming service .", "1": "1984 is a hardcover book .", "2": "1984 is not a streaming service .", "3": "1984 is not a hardcover book ."}, {"0": "X is an object", "1": "X is a hardcover book .", "2": "X is printed text .", "3": "1984 is not a hardcover book .", "4": "1984 is not printed text ."}], "errors": [[]], "entailments_dict": [{"1": ["2"], "3": ["(¬1)"], "(¬3)": ["2"], "(¬0)": ["2"], "(¬2)": ["0"]}, {}], "predicted_steps": [false, false]}
{"text": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that 1984 is a streaming service?", "id": "50", "ground_truth": "False", "reasoning": "Premise 1.1: If 1984 is a streaming service, then 1984 is a hardcover book.\nPremise 1.2: Every printed text is analog.\nPremise 1.3: All streaming services are digital.\nConclusion 1: 1984 cannot be both analog and digital.\nPremise 2.1: If an object is a hardcover book then it is printed text.\nPremise 2.2: Every printed text is analog.\nConclusion 2: If 1984 is a hardcover book, then 1984 is analog.\nPremise 3.1: Conclusion 1 and Conclusion 2\nConclusion 3: 1984 is not a streaming service.\nPremise 4.1: 1984 is not a streaming service.\nAnswer: B. No", "logic_premises": "[[(0→1), (2→3), (4→5)], [((0∧1)→2), (3→4)], [0]]", "logic_conclusion": "[(6∧7), (5→6), 1]", "correspondance": [{"0": "1984 is a streaming service .", "1": "1984 is a hardcover book .", "2": "X is a printed text .", "3": "X is analog .", "4": "X is streaming a service .", "5": "X is digital .", "6": "1984 can not be analog .", "7": "1984 can not be digital ."}, {"0": "X is an object", "1": "X is a hardcover book .", "2": "X is printed text .", "3": "X is a printed text .", "4": "X is analog .", "5": "1984 is a hardcover book .", "6": "1984 is analog ."}, {"0": "Conclusion 1 and Conclusion 2", "1": "1984 is not a streaming service ."}], "errors": [[]], "entailments_dict": [{"3": ["(¬5)"], "5": ["(¬3)"], "7": ["(¬3)"], "6": ["(¬5)"]}, {"2": ["3", "(¬4)"]}, {}], "predicted_steps": [false, "Contradiction in the premises", false]}
{"text": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that 1984 is not a streaming service?", "id": "51", "ground_truth": "True", "reasoning": "Premise 1.1: If 1984 is a streaming service, then 1984 is a hardcover book.\nPremise 1.2: Every printed text is analog.\nPremise 1.3: All streaming services are digital.\nConclusion 1: If 1984 is a streaming service, then 1984 is not digital.\nPremise 2.1: If 1984 is a streaming service, then 1984 is not digital.\nPremise 2.2: All streaming services are digital.\nConclusion 2: 1984 is not a streaming service.\nPremise 3.1: 1984 is not a streaming service.\nAnswer: A. Yes", "logic_premises": "[[(0→1), (2→3), (4→5)], [(0→1), (2→3)]]", "logic_conclusion": "[(6→7), 4]", "correspondance": [{"0": "1984 is a streaming service .", "1": "1984 is a hardcover book .", "2": "X is a printed text .", "3": "X is analog .", "4": "X is streaming a service .", "5": "X is digital .", "6": "1984 is a streaming service .", "7": "1984 is not digital ."}, {"0": "1984 is a streaming service .", "1": "1984 is not digital .", "2": "X is streaming a service .", "3": "X is digital .", "4": "1984 is not a streaming service ."}], "errors": [[]], "entailments_dict": [{"6": ["0", "(¬1)", "(¬3)"], "1": ["7"], "3": ["(¬5)"], "5": ["(¬3)"]}, {"(¬4)": ["0"]}], "predicted_steps": ["Contradiction in the premises", false]}
{"text": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Basque is a Romance language?", "id": "52", "ground_truth": "False", "reasoning": "Premise 1.1: Basque is not related to any other language.\nPremise 1.2: All languages within a language family are related to each other.\nConclusion 1: Basque is not part of any language family.\nPremise 2.1: The Romance languages are a language family.\nPremise 2.2: Basque is not part of any language family.\nConclusion 2: Basque is not a Romance language.\nPremise 3.1: Basque is not a Romance language.\nAnswer: B. No", "logic_premises": "[[(0→1), (2→3)], [0, ((4→5)∪(6→7))]]", "logic_conclusion": "[(4→5), 3]", "correspondance": [{"0": "X is an other language .", "1": "Basque is not related to X .", "2": "X is a language within a language family .", "3": "X is related to each other .", "4": "X is a part of language family .", "5": "Basque is not X ."}, {"0": "The Romance languages are a language family .", "1": "X is a part of language family .", "2": "Basque is not X .", "3": "Basque is not a Romance language .", "4": "Basque is a part of language family .", "5": "Basque is not Basque .", "6": "The Romance languages is a part of language family .", "7": "Basque is not The Romance languages ."}], "errors": [[]], "entailments_dict": [{"4": ["2", "(¬1)"], "3": ["(¬1)"], "1": ["(¬3)"]}, {"7": ["0", "3"], "0": ["6", "(¬5)"], "3": ["0", "6", "(¬5)"], "5": ["(¬0)"], "(¬3)": ["0", "4", "6"]}], "predicted_steps": [false, "Contradiction in the premises"]}
{"text": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that German is a Romance language?", "id": "53", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: French and Spanish are both Romance languages.\nPremise 1.2: All languages within a language family are related to each other.\nConclusion 1: French and Spanish are related to each other.\nPremise 2.1: German is related to Spanish.\nPremise 2.2: French and Spanish are related to each other.\nConclusion 2: German is related to French and Spanish.\nPremise 3.1: German is related to French and Spanish.\nPremise 3.2: French and Spanish are Romance languages.\nConclusion 3: German is not necessarily a Romance language (it's just related to Romance languages).\nAnswer: B. No", "logic_premises": "[[(0∧1), ((7→8)∪(9→a))], [0, ((6→(7∧8))∪((9→(a∧b))∪(c→(d∧e))))], [(0∧1), (2∧3)]]", "logic_conclusion": "[((b→(c∧d))∪(e→(f∧g))), (4∧5), 4]", "correspondance": [{"0": "French are both Romance languages .", "1": "Spanish are both Romance languages .", "2": "X is a language within a language family .", "3": "X is related to each other .", "4": "X is an other .", "5": "French is related to X .", "6": "Spanish is related to X .", "7": "French and Spanish is a language within a language family .", "8": "French and Spanish is related to each other .", "9": "Romance languages is a language within a language family .", "a": "Romance languages is related to each other .", "b": "French and Spanish is an other .", "c": "French is related to French and Spanish .", "d": "Spanish is related to French and Spanish .", "e": "Romance languages is an other .", "f": "French is related to Romance languages .", "g": "Spanish is related to Romance languages ."}, {"0": "German is related to Spanish .", "1": "X is an other .", "2": "French is related to X .", "3": "Spanish is related to X .", "4": "German is related to French .", "5": "German is related to Spanish .", "6": "French and Spanish is an other .", "7": "French is related to French and Spanish .", "8": "Spanish is related to French and Spanish .", "9": "German is an other .", "a": "French is related to German .", "b": "Spanish is related to German .", "c": "Spanish is an other .", "d": "French is related to Spanish .", "e": "Spanish is related to Spanish ."}, {"0": "German is related to French .", "1": "German is related to Spanish .", "2": "French are Romance languages .", "3": "Spanish are Romance languages .", "4": "German is not necessarily a Romance language ."}], "errors": [[]], "entailments_dict": [{"1": ["9", "g"], "a": ["0", "1", "f"], "0": ["9", "f"], "e": ["0", "1"], "8": ["c", "d"], "(¬1)": ["9"]}, {"b": ["0", "5"], "5": ["0"], "0": ["5"], "a": ["4"]}, {}], "predicted_steps": [false, false, false]}
{"text": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that French is an Indo-European language?", "id": "54", "ground_truth": "True", "reasoning": "Premise 1.1: All Romance languages are Indo-European languages.\nPremise 1.2: French and Spanish are both Romance languages.\nConclusion 1: French is an Indo-European language.\nAnswer: A. Yes.", "logic_premises": "[[((7→(8∧9))∪((a→(b∧c))∪((d→(e∧f))∪(g→(h∧i))))), (3∧4)]]", "logic_conclusion": "[(5∧6)]", "correspondance": [{"0": "X is Romance a language .", "1": "X is Indo a language .", "2": "X is European a language .", "3": "French are both Romance languages .", "4": "Spanish are both Romance languages .", "5": "French is an Indo language .", "6": "French is an European language .", "7": "French and Spanish is Romance a language .", "8": "French and Spanish is Indo a language .", "9": "French and Spanish is European a language .", "a": "All Romance languages is Romance a language .", "b": "All Romance languages is Indo a language .", "c": "All Romance languages is European a language .", "d": "Romance languages is Romance a language .", "e": "Romance languages is Indo a language .", "f": "Romance languages is European a language .", "g": "French is Romance a language .", "h": "French is Indo a language .", "i": "French is European a language ."}], "errors": [[]], "entailments_dict": [{"b": ["3", "4", "6", "5"], "4": ["d", "a", "(¬e)", "(¬8)"], "3": ["d", "g", "6", "(¬h)"], "e": ["3", "4"], "f": ["3", "4", "6"], "c": ["3", "4", "6"], "6": ["d"], "8": ["6", "5", "(¬3)", "(¬4)"], "i": ["6"], "h": ["6", "5", "(¬3)"], "9": ["6"], "5": ["(¬3)"], "(¬5)": ["d"]}], "predicted_steps": ["Contradiction in the premises"]}
{"text": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Robert Lewandowski is a soccer player?", "id": "55", "ground_truth": "True", "reasoning": "Premise 1.1: Robert Lewandowski is a striker.\nPremise 1.2: Strikers are soccer players.\nConclusion 1: Robert Lewandowski is a soccer player.\nPremise 2.1: Robert Lewandowski is a soccer player.\nAnswer: A. Yes", "logic_premises": "[[0, (4→5)]]", "logic_conclusion": "[3]", "correspondance": [{"0": "Robert Lewandowski is a striker .", "1": "X is a Striker .", "2": "X is soccer a player .", "3": "Robert Lewandowski is a soccer player .", "4": "Robert Lewandowski is a Striker .", "5": "Robert Lewandowski is soccer a player ."}], "errors": [[]], "entailments_dict": [{"0": ["4", "3"], "5": ["3"]}], "predicted_steps": [true]}
{"text": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Robert Lewandowski plays for Bayern Munchen?", "id": "56", "ground_truth": "False", "reasoning": "Premise 1.1: Robert Lewandowski left Bayern Munchen.\nPremise 1.2: If a player left a team they no longer play for that team.\nConclusion 1: Robert Lewandowski no longer plays for Bayern Munchen.\nPremise 2.1: Robert Lewandowski no longer plays for Bayern Munchen.\nAnswer: B. No", "logic_premises": "[[0, (((5∧6)→7)∪((8∧9)→a))]]", "logic_conclusion": "[4]", "correspondance": [{"0": "Robert Lewandowski left Bayern Munchen .", "1": "X is a player", "2": "X left a team .", "3": "X no longer play for a team .", "4": "Robert Lewandowski no longer plays for Bayern Munchen .", "5": "Robert Lewandowski is a player", "6": "Robert Lewandowski left a team .", "7": "Robert Lewandowski no longer play for a team .", "8": "Bayern Munchen is a player", "9": "Bayern Munchen left a team .", "a": "Bayern Munchen no longer play for a team ."}], "errors": [[]], "entailments_dict": [{"0": ["5", "6", "4", "(¬a)"], "7": ["0", "4"], "4": ["0", "6", "5", "(¬a)"], "(¬4)": ["5"], "(¬0)": ["5"]}], "predicted_steps": [true]}
{"text": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Robert Lewandowski is a star?", "id": "57", "ground_truth": "Uncertain", "reasoning": "There is no information in the passage about Robert Lewandowski being a star. The passage only talks about his profession (striker), his sport (soccer), and his team status (left Bayern Munchen).\n\nAnswer: C. Uncertain", "logic_premises": "[]", "logic_conclusion": "[]", "correspondance": [], "errors": ["No steps found in reasoning.", []], "entailments_dict": [], "predicted_steps": []}
{"text": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Butte and Pierre are in the same state?", "id": "58", "ground_truth": "False", "reasoning": "Premise 1.1: Montana includes the cities of Butte, Helena, and Missoula.\nPremise 1.2: The city of Pierre is not in Montana.\nConclusion 1: Butte is in Montana, and Pierre is not in Montana.\nPremise 2.1: Butte is in Montana, and Pierre is not in Montana.\nConclusion 2: Butte and Pierre are not in the same state.\nPremise 3.1: Butte and Pierre are not in the same state.\nAnswer: B. No", "logic_premises": "[[(0∧(1∧2)), 3], [(0∧1)]]", "logic_conclusion": "[(4∧5), (2∧3)]", "correspondance": [{"0": "Montana includes the cities of Butte .", "1": "Montana includes the cities of Helena .", "2": "Montana includes the cities of Missoula .", "3": "The city of Pierre is not in Montana .", "4": "Butte is in Montana .", "5": "The city of Pierre is not in Montana ."}, {"0": "Butte is in Montana .", "1": "Pierre is not in Montana .", "2": "Butte are not in the same state .", "3": "Pierre are not in the same state ."}], "errors": [[]], "entailments_dict": [{"4": ["0"], "5": ["3"], "0": ["4"], "3": ["5"]}, {"2": ["(¬0)"], "3": ["(¬0)"]}], "predicted_steps": [true, false]}
{"text": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Pierre and Bismarck are in the same state?", "id": "59", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: The city of Pierre is not in Montana.\nPremise 1.2: Billings is a city in Montana.\nConclusion 1: Pierre and Billings are not in the same state.\nPremise 2.1: Pierre and Bismarck are not mentioned together in the passage.\nConclusion 2: There is no information about Pierre and Bismarck being in the same state.\nAnswer: C. Uncertain.", "logic_premises": "[[0, 1], [(0∧1)]]", "logic_conclusion": "[2, (((5∧6)→7)∪(((8∧9)→a)∪((b∧c)→d)))]", "correspondance": [{"0": "the city of Pierre is not in Montana .", "1": "Billings is a city in Montana .", "2": "the city of Pierre and Billings are not in the same state ."}, {"0": "Pierre are not mentioned together in the passage .", "1": "Bismarck are not mentioned together in the passage .", "2": "X is an information about Pierre being in the same state .", "3": "X is an information about Bismarck being in the same state .", "4": "There is not X .", "5": "the passage is an information about Pierre being in the same state .", "6": "the passage is an information about Bismarck being in the same state .", "7": "There is not the passage .", "8": "Pierre and Bismarck is an information about Pierre being in the same state .", "9": "Pierre and Bismarck is an information about Bismarck being in the same state .", "a": "There is not Pierre and Bismarck .", "b": "the same state is an information about Pierre being in the same state .", "c": "the same state is an information about Bismarck being in the same state .", "d": "There is not the same state ."}], "errors": [[]], "entailments_dict": [{"2": ["0"]}, {"6": ["(¬0)", "(¬1)"], "8": ["(¬0)", "(¬1)"], "5": ["(¬0)", "(¬1)"], "b": ["(¬0)", "(¬1)"], "c": ["(¬0)", "(¬1)"], "9": ["(¬0)", "(¬1)"]}], "predicted_steps": [false, false]}
{"text": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Montana is home to the city of Missoula?", "id": "60", "ground_truth": "True", "reasoning": "Premise 1.1: Montana includes the cities of Butte, Helena, and Missoula.\nConclusion 1: Montana is home to the city of Missoula.\nPremise 2.1: Montana is home to the city of Missoula.\nAnswer: A. Yes", "logic_premises": "[[(0∧(1∧2))]]", "logic_conclusion": "[3]", "correspondance": [{"0": "Montana includes the cities of Butte .", "1": "Montana includes the cities of Helena .", "2": "Montana includes the cities of Missoula .", "3": "Montana is home to Missoula ."}], "errors": [[]], "entailments_dict": [{"3": ["2"], "2": ["3"]}], "predicted_steps": [true]}
{"text": "International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Mike has an F1 visa?", "id": "61", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: International students in US have either an F1 visa or a J1 visa.\nPremise 1.2: Mike is an international student.\nConclusion 1: Mike has either an F1 visa or a J1 visa.\nPremise 2.1: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nPremise 2.2: Mike needs to apply for CPT if he wants to work in the US.\nConclusion 2: Mike has an F1 visa.\nPremise 3.1: Mike has an F1 visa.\nAnswer: A. Yes.", "logic_premises": "[[((6→(7⊻8))∪(9→(a⊻b))), 3], [0, 1]]", "logic_conclusion": "[(4⊻5), 2]", "correspondance": [{"0": "X is an International student in US .", "1": "X has an F1 visa .", "2": "X has a J1 visa .", "3": "Mike is an international student .", "4": "Mike has an F1 visa .", "5": "Mike has a J1 visa .", "6": "Mike is an International student in US .", "7": "Mike has an F1 visa .", "8": "Mike has a J1 visa .", "9": "US is an International student in US .", "a": "US has an F1 visa .", "b": "US has a J1 visa ."}, {"0": "An international student in US with an F1 visa needs to apply for CPT . An international student in US with an F1 visa needs to apply for OPT that an international student in US with an F1 visa wants to work in US .", "1": "Mike needs to apply for CPT that Mike wants to work in US .", "2": "Mike has an F1 visa ."}], "errors": [[]], "entailments_dict": [{"4": ["6"], "5": ["6", "(¬7)"], "7": ["4"], "8": ["5"]}, {}], "predicted_steps": [false, false]}
{"text": "International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Mike has a J1 visa?", "id": "62", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: International students in US have either an F1 visa or a J1 visa.\nPremise 1.2: Mike is an international student.\nConclusion 1: Mike has either an F1 visa or a J1 visa.\nPremise 2.1: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nPremise 2.2: Mike needs to apply for CPT if he wants to work in the US.\nConclusion 2: Mike has an F1 visa.\nPremise 3.1: Mike has an F1 visa.\nPremise 3.2: Mike has either an F1 visa or a J1 visa.\nConclusion 3: Mike does not have a J1 visa.\nAnswer: B. No.", "logic_premises": "[[((6→(7⊻8))∪(9→(a⊻b))), 3], [0, 1], [0, (1⊻2)]]", "logic_conclusion": "[(4⊻5), 2, 3]", "correspondance": [{"0": "X is an International student in US .", "1": "X has an F1 visa .", "2": "X has a J1 visa .", "3": "Mike is an international student .", "4": "Mike has an F1 visa .", "5": "Mike has a J1 visa .", "6": "Mike is an International student in US .", "7": "Mike has an F1 visa .", "8": "Mike has a J1 visa .", "9": "US is an International student in US .", "a": "US has an F1 visa .", "b": "US has a J1 visa ."}, {"0": "An international student in US with an F1 visa needs to apply for CPT . An international student in US with an F1 visa needs to apply for OPT that an international student in US with an F1 visa wants to work in US .", "1": "Mike needs to apply for CPT that Mike wants to work in US .", "2": "Mike has an F1 visa ."}, {"0": "Mike has an F1 visa .", "1": "Mike has an F1 visa .", "2": "Mike has a J1 visa .", "3": "Mike does not have a J1 visa ."}], "errors": [[]], "entailments_dict": [{"4": ["6"], "5": ["6", "(¬7)"], "7": ["4"], "8": ["5"]}, {}, {"0": ["1"], "1": ["0"], "2": ["(¬0)"], "3": ["(¬2)"], "(¬3)": ["2"]}], "predicted_steps": [false, false, true]}
{"text": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ted is a pet?", "id": "63", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: All cows are bovines.\nPremise 1.2: If something is a bovine, then it is domesticated.\nConclusion 1: All cows are domesticated.\nPremise 2.1: Some pets are cows.\nPremise 2.2: All cows are domesticated.\nConclusion 2: Some pets are domesticated.\nPremise 3.1: No domesticated animals are alligators.\nPremise 3.2: Ted is an alligator.\nConclusion 3: Ted is not domesticated.\nPremise 4.1: Some pets are domesticated.\nPremise 4.2: Ted is not domesticated.\nConclusion 4: Ted is not a pet.\nAnswer: B. No", "logic_premises": "[[(0→1), (2→3)], [0, (1→2)], [(4→5), 2], [0, 1]]", "logic_conclusion": "[(4→5), 3, 3, 2]", "correspondance": [{"0": "X is a cow .", "1": "X is a bovine .", "2": "X is a bovine .", "3": "X is domesticated .", "4": "X is a cow .", "5": "X is domesticated ."}, {"0": "Some pets are cows .", "1": "X is a cow .", "2": "X is domesticated .", "3": "Some pets are domesticated ."}, {"0": "X is a domesticated animal .", "1": "X is not an alligator .", "2": "Ted is an alligator .", "3": "Ted is not domesticated .", "4": "Ted is a domesticated animal .", "5": "Ted is not an alligator ."}, {"0": "Some pets are domesticated .", "1": "Ted is not domesticated .", "2": "Ted is not a pet ."}], "errors": [[]], "entailments_dict": [{"1": ["2"], "4": ["0", "2"], "3": ["5"]}, {}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {}], "predicted_steps": [true, false, true, false]}
{"text": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ted is a pet and a cow?", "id": "64", "ground_truth": "False", "reasoning": "Premise 1.1: No domesticated animals are alligators.\nPremise 1.2: Ted is an alligator.\nConclusion 1: Ted is not domesticated.\nPremise 2.1: If something is a bovine, then it is domesticated.\nPremise 2.2: Ted is not domesticated.\nConclusion 2: Ted is not a bovine.\nPremise 3.1: All cows are bovines.\nPremise 3.2: Ted is not a bovine.\nConclusion 3: Ted is not a cow.\nPremise 4.1: Some pets are cows.\nPremise 4.2: Ted is not a cow.\nConclusion 4: Ted is not a pet and a cow.\nAnswer: B. No", "logic_premises": "[[(4→5), 2], [(4→5), 2], [(4→5), 2], [0, 1]]", "logic_conclusion": "[3, 3, 3, (2∧3)]", "correspondance": [{"0": "X is a domesticated animal .", "1": "X is not an alligator .", "2": "Ted is an alligator .", "3": "Ted is not domesticated .", "4": "Ted is a domesticated animal .", "5": "Ted is not an alligator ."}, {"0": "X is a bovine .", "1": "X is domesticated .", "2": "Ted is not domesticated .", "3": "Ted is not a bovine .", "4": "Ted is a bovine .", "5": "Ted is domesticated ."}, {"0": "X is a cow .", "1": "X is a bovine .", "2": "Ted is not a bovine .", "3": "Ted is not a cow .", "4": "Ted is a cow .", "5": "Ted is a bovine ."}, {"0": "Some pets are cows .", "1": "Ted is not a cow .", "2": "Ted is not a pet .", "3": "Ted is not a cow ."}], "errors": [[]], "entailments_dict": [{"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"3": ["2", "(¬5)"], "2": ["3", "(¬5)"], "5": ["(¬2)"], "(¬3)": ["4"], "(¬4)": ["2"], "(¬2)": ["4"]}, {"3": ["1"], "1": ["3"]}], "predicted_steps": [true, true, true, false]}
{"text": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Ted is a cow, then Ted is not a pet?", "id": "65", "ground_truth": "True", "reasoning": "Premise 1.1: No domesticated animals are alligators.\nPremise 1.2: Ted is an alligator.\nConclusion 1: Ted is not domesticated.\nPremise 2.1: If something is a bovine, then it is domesticated.\nPremise 2.2: Ted is not domesticated.\nConclusion 2: Ted is not a bovine.\nPremise 3.1: All cows are bovines.\nPremise 3.2: Ted is not a bovine.\nConclusion 3: Ted is not a cow.\nPremise 4.1: Some pets are cows.\nPremise 4.2: Ted is not a cow.\nConclusion 4: If Ted is a cow, then Ted is not a pet.\nAnswer: A. Yes", "logic_premises": "[[(4→5), 2], [(4→5), 2], [(4→5), 2], [0, 1]]", "logic_conclusion": "[3, 3, 3, (2→3)]", "correspondance": [{"0": "X is a domesticated animal .", "1": "X is not an alligator .", "2": "Ted is an alligator .", "3": "Ted is not domesticated .", "4": "Ted is a domesticated animal .", "5": "Ted is not an alligator ."}, {"0": "X is a bovine .", "1": "X is domesticated .", "2": "Ted is not domesticated .", "3": "Ted is not a bovine .", "4": "Ted is a bovine .", "5": "Ted is domesticated ."}, {"0": "X is a cow .", "1": "X is a bovine .", "2": "Ted is not a bovine .", "3": "Ted is not a cow .", "4": "Ted is a cow .", "5": "Ted is a bovine ."}, {"0": "Some pets are cows .", "1": "Ted is not a cow .", "2": "Ted is a cow .", "3": "Ted is not a pet ."}], "errors": [[]], "entailments_dict": [{"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"3": ["2", "(¬5)"], "2": ["3", "(¬5)"], "5": ["(¬2)"], "(¬3)": ["4"], "(¬4)": ["2"], "(¬2)": ["4"]}, {"2": ["(¬1)"]}], "predicted_steps": [true, true, true, false]}
{"text": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A private Ivy League research university moved to New Haven?", "id": "66", "ground_truth": "True", "reasoning": "Premise 1.1: Yale University is a private Ivy League research university.\nPremise 1.2: Yale University moved to New Haven in 1716.\nConclusion 1: A private Ivy League research university moved to New Haven.\nPremise 2.1: A private Ivy League research university moved to New Haven.\nAnswer: A. Yes.", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "Yale University is a private Ivy League research university .", "1": "Yale University moved to New Haven in 1716 .", "2": "Yale University moved to New Haven ."}], "errors": [[]], "entailments_dict": [{"1": ["0", "2"], "2": ["0"], "(¬2)": ["0"], "(¬1)": ["0"]}], "predicted_steps": [true]}
{"text": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Yale University has the largest university endowment of any educational institution?", "id": "67", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Yale university's endowment was valued at $42.3 billion.\nConclusion 1: Yale University has a large endowment.\nPremise 2.1: The passage does not provide information about other universities' endowments.\nConclusion 2: We cannot determine if Yale University has the largest university endowment.\nAnswer: C. Uncertain.", "logic_premises": "[[0], [0]]", "logic_conclusion": "[1, 1]", "correspondance": [{"0": "Yale university 's 's endowment was valued at $ 42.3 billion .", "1": "Yale university 's has a large endowment ."}, {"0": "The passage does not provide information about other universities ' endowments .", "1": "We can not determine that Yale University has the largest university endowment ."}], "errors": [[]], "entailments_dict": [{"0": ["1"]}, {"1": ["0"]}], "predicted_steps": [true, false]}
{"text": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Pierson College is a residential college at Yale?", "id": "68", "ground_truth": "True", "reasoning": "Premise 1.1: A list of residential colleges at Yale includes Pierson College.\nConclusion 1: Pierson College is a residential college at Yale.\nPremise 2.1: Pierson College is a residential college at Yale.\nAnswer: A. Yes.", "logic_premises": "[[0]]", "logic_conclusion": "[1]", "correspondance": [{"0": "A list of residential colleges at Yale includes Pierson College .", "1": "Pierson College is a residential college at Yale ."}], "errors": [[]], "entailments_dict": [{"1": ["0"], "0": ["1"]}], "predicted_steps": [true]}
{"text": "Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\"?", "id": "69", "ground_truth": "True", "reasoning": "Premise 1.1: The Working title \"The Secret Dude Society\" was used for Badults.\nPremise 1.2: Andrew Collins was the script editor for Badults.\nConclusion 1: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nAnswer: A. Yes.", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "The Working title \" The Secret Dude Society \" was used for Badults .", "1": "Andrew Collins was the script editor for Badults .", "2": "Andrew Collins was the script editor for a series with the working title \" The Secret Dude Society \" ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that No members of Pappy's have starred for a show piloting on BBC Two or BBC Three?", "id": "70", "ground_truth": "False", "reasoning": "Premise 1.1: Badults is a British Sitcom series, starring members of Pappy's.\nPremise 1.2: Badults piloted in July 2013 on BBC Three.\nConclusion 1: Members of Pappy's have starred for a show piloting on BBC Three.\nPremise 2.1: Members of Pappy's have starred for a show piloting on BBC Three.\nConclusion 2: It is not true that No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nAnswer: B. No.", "logic_premises": "[[0, 1], [0]]", "logic_conclusion": "[2, ((4→(5∧6))∪((7→(8∧9))∪(a→(b∧c))))]", "correspondance": [{"0": "Badults is a British Sitcom series , starring members of Pappy 's 's .", "1": "Badults piloted in July 2013 on BBC Three .", "2": "Members of Pappy 's 's have starred for a show piloting on BBC Three ."}, {"0": "Members of Pappy 's 's have starred for a show piloting on BBC Three .", "1": "X is a member of Pappy 's 's .", "2": "It is true that X has starred for a show piloting on BBC Two .", "3": "It is true that X has starred for a show piloting on BBC Three .", "4": "BBC Two or BBC Three is a member of Pappy 's 's .", "5": "It is true that BBC Two or BBC Three has starred for a show piloting on BBC Two .", "6": "It is true that BBC Two or BBC Three has starred for a show piloting on BBC Three .", "7": "Pappys is a member of Pappy 's 's .", "8": "It is true that Pappys has starred for a show piloting on BBC Two .", "9": "It is true that Pappys has starred for a show piloting on BBC Three .", "a": "BBC Three is a member of Pappy 's 's .", "b": "It is true that BBC Three has starred for a show piloting on BBC Two .", "c": "It is true that BBC Three has starred for a show piloting on BBC Three ."}], "errors": [[]], "entailments_dict": [{}, {"0": ["9"], "(¬9)": ["0"]}], "predicted_steps": [false, false]}
{"text": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that KO is a company stock?", "id": "71", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: KO is a mature company’s stock.\nConclusion 1: KO is a company stock.\nPremise 2.1: KO is a company stock.\nAnswer: A. Yes", "logic_premises": "[[0]]", "logic_conclusion": "[1]", "correspondance": [{"0": "KO is a mature company ’s stock .", "1": "KO is a company stock ."}], "errors": [[]], "entailments_dict": [{"0": ["1"]}], "predicted_steps": [true]}
{"text": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that KO is a company stock and a growth company’s stock?", "id": "72", "ground_truth": "False", "reasoning": "Premise 1.1: KO is a mature company's stock.\nPremise 1.2: All mature companies' stocks are suitable for a retirement fund.\nConclusion 1: KO is suitable for a retirement fund.\nPremise 2.1: If the stock price is volatile, then it is not suitable for a retirement fund.\nPremise 2.2: KO is suitable for a retirement fund.\nConclusion 2: KO's stock price is not volatile.\nPremise 3.1: All growth companies' stocks are volatile.\nPremise 3.2: KO's stock price is not volatile.\nConclusion 3: KO is not a growth company's stock.\nPremise 4.1: KO is a company stock.\nPremise 4.2: KO is not a growth company's stock.\nConclusion 4: KO is a company stock and not a growth company's stock.\nAnswer: B. No", "logic_premises": "[[0, (4→5)], [(0→1), 2], [((4→5)∪(6→7)), 2], [0, 1]]", "logic_conclusion": "[3, 3, 3, (2∧3)]", "correspondance": [{"0": "KO is a mature company 's stock .", "1": "X is a mature company ' stocks .", "2": "X is suitable for a retirement fund .", "3": "KO is suitable for a retirement fund .", "4": "KO is a mature company ' stocks .", "5": "KO is suitable for a retirement fund ."}, {"0": "the stock price is volatile .", "1": "the stock price is not suitable for a retirement fund .", "2": "KO is suitable for a retirement fund .", "3": "KO 's stock price is not volatile ."}, {"0": "X is growth a company ' stocks .", "1": "X is volatile .", "2": "KO 's stock price is not volatile .", "3": "KO is not a growth company 's stock .", "4": "KOs stock price is growth a company ' stocks .", "5": "KOs stock price is volatile .", "6": "KO is growth a company ' stocks .", "7": "KO is volatile ."}, {"0": "KO is a company stock .", "1": "KO is not a growth company 's stock .", "2": "KO is a company stock .", "3": "KO is a growth company 's stock ."}], "errors": [[]], "entailments_dict": [{"0": ["4"], "5": ["3"]}, {"2": ["(¬1)"], "1": ["(¬2)"], "(¬3)": ["0"]}, {"5": ["(¬2)"], "7": ["(¬2)"], "2": ["(¬5)", "(¬7)"], "(¬3)": ["4", "6"]}, {"2": ["0"], "3": ["0", "(¬1)"], "0": ["2"], "(¬3)": ["1"], "(¬1)": ["0"]}], "predicted_steps": [true, true, true, "Contradiction in the premises"]}
{"text": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If KO is a growth company’s stock or if its price is volatile, then KO is neither a company’s stock nor is its price volatile?", "id": "73", "ground_truth": "True", "reasoning": "Premise 1.1: KO is a mature company's stock.\nPremise 1.2: All mature companies' stocks are suitable for a retirement fund.\nConclusion 1: KO is suitable for a retirement fund.\nPremise 2.1: If the stock price is volatile, then it is not suitable for a retirement fund.\nPremise 2.2: KO is suitable for a retirement fund.\nConclusion 2: KO's price is not volatile.\nPremise 3.1: KO's price is not volatile.\nPremise 3.2: If KO is a growth company's stock, then its price is volatile.\nConclusion 3: KO is not a growth company's stock.\nPremise 4.1: KO is not a growth company's stock.\nPremise 4.2: KO's price is not volatile.\nConclusion 4: The statement \"If KO is a growth company's stock or if its price is volatile, then KO is neither a company's stock nor is its price volatile\" is false.\nAnswer: B. No", "logic_premises": "[[0, (4→5)], [(0→1), 2], [0, (1→2)], [0, 1]]", "logic_conclusion": "[3, 3, 3, 2]", "correspondance": [{"0": "KO is a mature company 's stock .", "1": "X is a mature company ' stocks .", "2": "X is suitable for a retirement fund .", "3": "KO is suitable for a retirement fund .", "4": "KO is a mature company ' stocks .", "5": "KO is suitable for a retirement fund ."}, {"0": "the stock price is volatile .", "1": "the stock price is not suitable for a retirement fund .", "2": "KO is suitable for a retirement fund .", "3": "KO 's price is not volatile ."}, {"0": "KO 's 's price is not volatile .", "1": "KO 's is a growth company 's stock .", "2": "KO 's 's price is volatile .", "3": "KO 's is not a growth company 's stock ."}, {"0": "KO is not a growth company 's stock .", "1": "KO 's price is not volatile .", "2": "The statement \" If KO is a growth company 's stock or if KO 's price is volatile , then KO is neither a company 's stock nor is KO 's price volatile \" is false ."}], "errors": [[]], "entailments_dict": [{"0": ["4"], "5": ["3"]}, {"2": ["(¬1)"], "1": ["(¬2)"], "(¬3)": ["0"]}, {"0": ["(¬2)"], "2": ["(¬0)"], "(¬3)": ["1"]}, {}], "predicted_steps": [true, true, true, false]}
{"text": "All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul. Joe's vehicle registration plate is from Istanbul. Tom's license plate begins with the number 35. [BG] If a license plate begins with the number 35, then it does not begin with the number 34.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Joe's license plate begins with the number 34?", "id": "74", "ground_truth": "True", "reasoning": "Premise 1.1: Joe's vehicle registration plate is from Istanbul.\nPremise 1.2: Plates that do not begin with the number 34 are not from Istanbul.\nConclusion 1: Joe's license plate begins with the number 34.\nPremise 2.1: Conclusion 1\nAnswer: A. Yes", "logic_premises": "[[0, ((4→5)∪((6→7)∪((8→9)∪(a→b))))]]", "logic_conclusion": "[3]", "correspondance": [{"0": "Joe 's 's vehicle registration plate is from Istanbul .", "1": "X is a Plate that do not begin with the number 34 .", "2": "X is not from Istanbul .", "3": "Joe 's 's license plate begins with the number 34 .", "4": "Joes vehicle registration plate is a Plate that do not begin with the number 34 .", "5": "Joes vehicle registration plate is not from Istanbul .", "6": "Istanbul is a Plate that do not begin with the number 34 .", "7": "Istanbul is not from Istanbul .", "8": "the number 34 is a Plate that do not begin with the number 34 .", "9": "the number 34 is not from Istanbul .", "a": "Joes license plate is a Plate that do not begin with the number 34 .", "b": "Joes license plate is not from Istanbul ."}], "errors": [[]], "entailments_dict": [{"0": ["(¬b)", "(¬5)", "(¬7)"], "7": ["(¬0)"], "b": ["(¬0)"], "5": ["(¬0)"], "3": ["(¬7)"], "(¬3)": ["a", "4"]}], "predicted_steps": [true]}
{"text": "All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul. Joe's vehicle registration plate is from Istanbul. Tom's license plate begins with the number 35. [BG] If a license plate begins with the number 35, then it does not begin with the number 34.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom's license plate is from Istanbul?", "id": "75", "ground_truth": "False", "reasoning": "Premise 1.1: Tom's license plate begins with the number 35.\nPremise 1.2: If a license plate begins with the number 35, then it does not begin with the number 34.\nConclusion 1: Tom's license plate does not begin with the number 34.\nPremise 2.1: Plates that do not begin with the number 34 are not from Istanbul.\nPremise 2.2: Tom's license plate does not begin with the number 34.\nConclusion 2: Tom's license plate is not from Istanbul.\nPremise 3.1: Tom's license plate is not from Istanbul.\nAnswer: B. No.", "logic_premises": "[[0, (((5∧6)→7)∪(((8∧9)→a)∪((b∧c)→d)))], [((4→5)∪((6→7)∪(8→9))), 2]]", "logic_conclusion": "[4, 3]", "correspondance": [{"0": "Tom 's 's license plate begins with the number 35 .", "1": "X is a license plate", "2": "X begins with the number 35 .", "3": "X does not begin with the number 34 .", "4": "Tom 's 's license plate does not begin with the number 34 .", "5": "Toms license plate is a license plate", "6": "Toms license plate begins with the number 35 .", "7": "Toms license plate does not begin with the number 34 .", "8": "the number 35 is a license plate", "9": "the number 35 begins with the number 35 .", "a": "the number 35 does not begin with the number 34 .", "b": "the number 34 is a license plate", "c": "the number 34 begins with the number 35 .", "d": "the number 34 does not begin with the number 34 ."}, {"0": "X is a Plate that do not begin with the number 34 .", "1": "X is not from Istanbul .", "2": "Tom 's 's license plate does not begin with the number 34 .", "3": "Tom 's 's license plate is not from Istanbul .", "4": "Toms license plate is a Plate that do not begin with the number 34 .", "5": "Toms license plate is not from Istanbul .", "6": "Istanbul is a Plate that do not begin with the number 34 .", "7": "Istanbul is not from Istanbul .", "8": "the number 34 is a Plate that do not begin with the number 34 .", "9": "the number 34 is not from Istanbul ."}], "errors": [[]], "entailments_dict": [{"0": ["5", "6", "8", "4", "(¬d)"], "4": ["5"], "7": ["4"], "(¬4)": ["5", "b"], "(¬0)": ["5"]}, {"2": ["4", "(¬7)"], "5": ["3"]}], "predicted_steps": [true, true]}
{"text": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Mary needs to earn money to help pay for her college tuition?", "id": "76", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nPremise 1.2: If people order takeout frequently in college, then they work in student jobs on campus.\nPremise 1.3: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nConclusion 1: If people order takeout frequently in college, then they need to earn money to help pay for their college tuition.\n\nPremise 2.1: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nPremise 2.2: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nPremise 2.3: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nConclusion 2: Mary does not enjoy the dining hall meals and recipes.\n\nPremise 3.1: Mary does not enjoy the dining hall meals and recipes.\nPremise 3.2: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nConclusion 3: Mary orders takeout frequently in college.\n\nPremise 4.1: Mary orders takeout frequently in college.\nPremise 4.2: If people order takeout frequently in college, then they need to earn money to help pay for their college tuition.\nConclusion 4: Mary needs to earn money to help pay for her college tuition.\n\nPremise 5.1: Mary needs to earn money to help pay for her college tuition.\nPremise 5.2: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nConclusion 5: Contradiction (Mary needs to earn money, but Mary is neither picky nor needs to earn money)\n\nAnswer: B. No", "logic_premises": "[[(0→(1⊻(2∧(3∧4)))), (5→6), (7→8)], [((g→(h⊻(i∧(j∧k))))∪(l→(m⊻(n∧(o∧p))))), (((q∧(r∧s))→t)∪((u∧(v∧w))→x)), ((9∧a)→(b∧c))], [(0∧(1∧2)), ((9→(a⊻(b∧(c∧d))))∪(e→(f⊻(g∧(h∧i)))))], [0, (4→5)], [0, ((1∧2)→(3∧4))]]", "logic_conclusion": "[(9→a), (d∧(e∧f)), 8, 3, 5]", "correspondance": [{"0": "X is a person .", "1": "X orders takeout frequently in college .", "2": "X enjoys the dining hall .", "3": "X enjoys the meals .", "4": "X enjoys the recipes .", "5": "X order takeout frequently in college .", "6": "X work in student jobs on campus .", "7": "X work in student jobs on campus .", "8": "X need to earn money to help pay for X 's college tuition .", "9": "X order takeout frequently in college .", "a": "X need to earn money to help pay for X 's college tuition ."}, {"0": "X is a person .", "1": "X orders takeout frequently in college .", "2": "X enjoys the dining hall .", "3": "X enjoys the meals .", "4": "X enjoys the recipes .", "5": "X enjoy the dining hall .", "6": "X enjoy the meals .", "7": "X enjoy the recipes .", "8": "X are not picky eaters .", "9": "Mary works in student jobs on campus .", "a": "Mary needs to earn money to help pay for Mary 's college tuition .", "b": "Mary VP .", "c": "Mary does not need to earn money to help pay for Mary 's college tuition .", "d": "Mary does not enjoy the dining hall .", "e": "Mary does not enjoy the meals .", "f": "Mary does not enjoy the recipes .", "g": "Mary is a person .", "h": "Mary orders takeout frequently in college .", "i": "Mary enjoys the dining hall .", "j": "Mary enjoys the meals .", "k": "Mary enjoys the recipes .", "l": "the dining hall meals and recipes is a person .", "m": "the dining hall meals and recipes orders takeout frequently in college .", "n": "the dining hall meals and recipes enjoys the dining hall .", "o": "the dining hall meals and recipes enjoys the meals .", "p": "the dining hall meals and recipes enjoys the recipes .", "q": "Mary enjoy the dining hall .", "r": "Mary enjoy the meals .", "s": "Mary enjoy the recipes .", "t": "Mary are not picky eaters .", "u": "the dining hall meals and recipes enjoy the dining hall .", "v": "the dining hall meals and recipes enjoy the meals .", "w": "the dining hall meals and recipes enjoy the recipes .", "x": "the dining hall meals and recipes are not picky eaters ."}, {"0": "Mary does not enjoy the dining hall .", "1": "Mary does not enjoy the meals .", "2": "Mary does not enjoy the recipes .", "3": "X is a person .", "4": "X orders takeout frequently in college .", "5": "X enjoys the dining hall .", "6": "X enjoys the meals .", "7": "X enjoys the recipes .", "8": "Mary orders takeout frequently in college .", "9": "Mary is a person .", "a": "Mary orders takeout frequently in college .", "b": "Mary enjoys the dining hall .", "c": "Mary enjoys the meals .", "d": "Mary enjoys the recipes .", "e": "the dining hall meals and recipes is a person .", "f": "the dining hall meals and recipes orders takeout frequently in college .", "g": "the dining hall meals and recipes enjoys the dining hall .", "h": "the dining hall meals and recipes enjoys the meals .", "i": "the dining hall meals and recipes enjoys the recipes ."}, {"0": "Mary orders takeout frequently in college .", "1": "X order takeout frequently in college .", "2": "X need to earn money to help pay for X 's college tuition .", "3": "Mary needs to earn money to help pay for Mary 's college tuition .", "4": "Mary order takeout frequently in college .", "5": "Mary need to earn money to help pay for Mary 's college tuition ."}, {"0": "Mary needs to earn money to help pay for Mary 's college tuition .", "1": "Mary works in student jobs on campus .", "2": "Mary needs to earn money to help pay for Mary 's college tuition .", "3": "Mary VP .", "4": "Mary does not need to earn money to help pay for Mary 's college tuition .", "5": "Contradiction ."}], "errors": [[]], "entailments_dict": [{"8": ["0", "a"], "1": ["5"], "6": ["7"], "9": ["5"], "(¬a)": ["0"], "(¬7)": ["0"], "(¬5)": ["0"]}, {"j": ["r"], "p": ["w"], "i": ["q", "v", "w", "r"], "k": ["s"], "c": ["g"], "o": ["v"], "b": ["g", "(¬m)"], "n": ["u"], "t": ["g", "(¬m)"], "f": ["g", "(¬o)", "(¬k)", "(¬n)", "(¬t)", "(¬x)"], "d": ["g", "(¬j)", "(¬o)", "(¬p)", "(¬i)", "(¬n)", "(¬x)"], "e": ["g", "(¬j)", "(¬o)", "(¬p)", "(¬i)", "(¬k)", "(¬n)", "(¬t)", "(¬x)"], "h": ["(¬x)"], "m": ["(¬b)"], "x": ["(¬b)"], "(¬f)": ["g", "s"], "(¬d)": ["g", "w", "r", "v", "q"], "(¬e)": ["g", "r"], "(¬a)": ["g"], "(¬9)": ["g"], "(¬q)": ["g"], "(¬s)": ["g"], "(¬r)": ["g"]}, {"0": ["9", "(¬i)", "(¬h)", "(¬g)", "(¬c)", "(¬b)"], "1": ["9", "(¬c)", "(¬b)", "(¬i)", "(¬d)", "(¬h)", "(¬g)"], "2": ["9", "(¬d)", "(¬g)", "(¬h)"], "8": ["9", "(¬h)"], "a": ["8"], "h": ["(¬2)", "(¬0)"], "i": ["(¬2)", "(¬1)"], "d": ["(¬2)"], "b": ["(¬0)", "(¬1)"], "c": ["(¬2)", "(¬1)"], "g": ["(¬2)", "(¬1)"], "(¬8)": ["9"], "(¬1)": ["9"], "(¬0)": ["9"], "(¬2)": ["9"]}, {"0": ["4"], "5": ["3"]}, {"0": ["2", "(¬4)"], "4": ["(¬0)"], "5": ["(¬3)"]}], "predicted_steps": [true, false, false, true, false]}
{"text": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls?", "id": "77", "ground_truth": "True", "reasoning": "Premise 1.1: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nPremise 1.2: If people order takeout frequently in college, then they work in student jobs on campus.\nPremise 1.3: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nPremise 1.4: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition.\nConclusion 1: Mary doesn't need to earn money to help pay for her college tuition (contradiction).\nPremise 2.1: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nPremise 2.2: Mary doesn't order takeout frequently in college (otherwise, she would need to earn money).\nConclusion 2: Mary enjoys the dining hall meals and recipes.\nPremise 3.1: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nPremise 3.2: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nPremise 3.3: Mary enjoys the dining hall meals and recipes.\nConclusion 3: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nAnswer: A. Yes", "logic_premises": "[[((c→(d⊻(e∧(f∧g))))∪(h→(i⊻(j∧(k∧l))))), ((m→n)∪(o→p)), ((q→r)∪(s→t)), (9∧a)], [((9→(a⊻(b∧(c∧d))))∪(e→(f⊻(g∧(h∧i))))), 5], [(((d∧(e∧f))→g)∪(((h∧(i∧j))→k)∪((l∧(m∧n))→o))), (((p∧(q∧r))→s)∪(((t∧(u∧v))→w)∪((x∧(y∧z))→A))), (8∧(9∧a))]]", "logic_conclusion": "[b, (6∧(7∧8)), (b∧c)]", "correspondance": [{"0": "X is a person .", "1": "X orders takeout frequently in college .", "2": "X enjoys the dining hall .", "3": "X enjoys the meals .", "4": "X enjoys the recipes .", "5": "X order takeout frequently in college .", "6": "X work in student jobs on campus .", "7": "X work in student jobs on campus .", "8": "X need to earn money to help pay for X 's college tuition .", "9": "Mary works in student jobs on campus .", "a": "Mary needs to earn money to help pay for Mary 's college tuition .", "b": "Mary does n't need to earn money to help pay for Mary 's college tuition .", "c": "Mary is a person .", "d": "Mary orders takeout frequently in college .", "e": "Mary enjoys the dining hall .", "f": "Mary enjoys the meals .", "g": "Mary enjoys the recipes .", "h": "the dining hall meals and recipes is a person .", "i": "the dining hall meals and recipes orders takeout frequently in college .", "j": "the dining hall meals and recipes enjoys the dining hall .", "k": "the dining hall meals and recipes enjoys the meals .", "l": "the dining hall meals and recipes enjoys the recipes .", "m": "Mary order takeout frequently in college .", "n": "Mary work in student jobs on campus .", "o": "the dining hall meals and recipes order takeout frequently in college .", "p": "the dining hall meals and recipes work in student jobs on campus .", "q": "Mary work in student jobs on campus .", "r": "Mary need to earn money to help pay for Mary 's college tuition .", "s": "the dining hall meals and recipes work in student jobs on campus .", "t": "the dining hall meals and recipes need to earn money to help pay for the dining hall meals and recipes 's college tuition ."}, {"0": "X is a person .", "1": "X orders takeout frequently in college .", "2": "X enjoys the dining hall .", "3": "X enjoys the meals .", "4": "X enjoys the recipes .", "5": "Mary does n't order takeout frequently in college .", "6": "Mary enjoys the dining hall .", "7": "Mary enjoys the meals .", "8": "Mary enjoys the recipes .", "9": "Mary is a person .", "a": "Mary orders takeout frequently in college .", "b": "Mary enjoys the dining hall .", "c": "Mary enjoys the meals .", "d": "Mary enjoys the recipes .", "e": "the dining hall meals and recipes is a person .", "f": "the dining hall meals and recipes orders takeout frequently in college .", "g": "the dining hall meals and recipes enjoys the dining hall .", "h": "the dining hall meals and recipes enjoys the meals .", "i": "the dining hall meals and recipes enjoys the recipes ."}, {"0": "X enjoy the dining hall .", "1": "X enjoy the meals .", "2": "X enjoy the recipes .", "3": "X are not picky eaters .", "4": "X enjoy the dining hall .", "5": "X enjoy the meals .", "6": "X enjoy the recipes .", "7": "X spend a lot of X 's time eating and catching up with friends in the campus dining halls .", "8": "Mary enjoys the dining hall .", "9": "Mary enjoys the meals .", "a": "Mary enjoys the recipes .", "b": "Mary is not a picky eater .", "c": "Mary spends a lot of Mary 's time eating and catching up with friends in the campus dining halls .", "d": "Mary enjoy the dining hall .", "e": "Mary enjoy the meals .", "f": "Mary enjoy the recipes .", "g": "Mary are not picky eaters .", "h": "the campus dining halls enjoy the dining hall .", "i": "the campus dining halls enjoy the meals .", "j": "the campus dining halls enjoy the recipes .", "k": "the campus dining halls are not picky eaters .", "l": "the dining hall meals and recipes enjoy the dining hall .", "m": "the dining hall meals and recipes enjoy the meals .", "n": "the dining hall meals and recipes enjoy the recipes .", "o": "the dining hall meals and recipes are not picky eaters .", "p": "Mary enjoy the dining hall .", "q": "Mary enjoy the meals .", "r": "Mary enjoy the recipes .", "s": "Mary spend a lot of Mary 's time eating and catching up with friends in the campus dining halls .", "t": "the campus dining halls enjoy the dining hall .", "u": "the campus dining halls enjoy the meals .", "v": "the campus dining halls enjoy the recipes .", "w": "the campus dining halls spend a lot of the campus dining halls 's time eating and catching up with friends in the campus dining halls .", "x": "the dining hall meals and recipes enjoy the dining hall .", "y": "the dining hall meals and recipes enjoy the meals .", "z": "the dining hall meals and recipes enjoy the recipes .", "A": "the dining hall meals and recipes spend a lot of the dining hall meals and recipes 's time eating and catching up with friends in the campus dining halls ."}], "errors": [[]], "entailments_dict": [{"t": ["h"], "d": ["m", "(¬p)"], "n": ["9", "q", "c"], "r": ["c", "a"], "a": ["c"], "i": ["o"], "9": ["c", "q"], "p": ["h", "s", "(¬d)"], "b": ["c", "(¬n)", "(¬p)", "(¬r)", "(¬a)", "(¬9)"], "(¬b)": ["c", "a"], "(¬m)": ["c"], "(¬a)": ["c"], "(¬9)": ["c"], "(¬s)": ["h"], "(¬q)": ["c"]}, {"5": ["9", "(¬a)", "(¬f)"], "7": ["9"], "6": ["9"], "8": ["9"], "c": ["7"], "b": ["7", "6"], "d": ["8"], "a": ["(¬5)"], "f": ["(¬5)"], "(¬7)": ["9"], "(¬6)": ["9"], "(¬8)": ["9"], "(¬5)": ["9"]}, {"8": ["e", "n", "z", "y", "p", "q", "m", "d"], "9": ["e", "q"], "s": ["d", "8", "c"], "a": ["f", "r"], "w": ["h"], "A": ["l"], "c": ["d", "p", "8"], "g": ["b"]}], "predicted_steps": [false, true, true]}
{"text": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls?", "id": "78", "ground_truth": "False", "reasoning": "Premise 1.1: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nPremise 1.2: If people order takeout frequently in college, then they work in student jobs on campus.\nPremise 1.3: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nConclusion 1: If people order takeout frequently in college, then they need to earn money to help pay for their college tuition.\n\nPremise 2.1: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nPremise 2.2: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nConclusion 2: If people enjoy the dining hall meals and recipes, then they are not picky eaters and spend a lot of their time eating and catching up with friends in the campus dining halls.\n\nPremise 3.1: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition.\nPremise 3.2: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition. (Contradiction)\nConclusion 3: Mary does not work in student jobs on campus and does not need to earn money to help pay for her college tuition.\n\nPremise 4.1: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nPremise 4.2: Mary does not work in student jobs on campus and does not need to earn money to help pay for her college tuition.\nConclusion 4: Mary enjoys the dining hall meals and recipes.\n\nPremise 5.1: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nPremise 5.2: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nPremise 5.3: Mary enjoys the dining hall meals and recipes.\nConclusion 5: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\n\nAnswer: A. Yes", "logic_premises": "[[(0→(1⊻(2∧(3∧4)))), (5→6), (7→8)], [((0∧(1∧2))→3), ((4∧(5∧6))→7)], [(0∧1), ((2∧3)→(4∧5))], [((a→(b⊻(c∧(d∧e))))∪(f→(g⊻(h∧(i∧j))))), (5∧6)], [(((e∧(f∧g))→h)∪(((i∧(j∧k))→l)∪((m∧(n∧o))→p))), (((q∧(r∧s))→t)∪(((u∧(v∧w))→x)∪((y∧(z∧A))→B))), (8∧(9∧a))]]", "logic_conclusion": "[(9→a), ((8∧(9∧a))→(b∧c)), (6∧7), (7∧(8∧9)), (b⊻(c→d))]", "correspondance": [{"0": "X is a person .", "1": "X orders takeout frequently in college .", "2": "X enjoys the dining hall .", "3": "X enjoys the meals .", "4": "X enjoys the recipes .", "5": "X order takeout frequently in college .", "6": "X work in student jobs on campus .", "7": "X work in student jobs on campus .", "8": "X need to earn money to help pay for X 's college tuition .", "9": "X order takeout frequently in college .", "a": "X need to earn money to help pay for X 's college tuition ."}, {"0": "X enjoy the dining hall .", "1": "X enjoy the meals .", "2": "X enjoy the recipes .", "3": "X are not picky eaters .", "4": "X enjoy the dining hall .", "5": "X enjoy the meals .", "6": "X enjoy the recipes .", "7": "X spend a lot of X 's time eating and catching up with friends in the campus dining halls .", "8": "X enjoy the dining hall .", "9": "X enjoy the meals .", "a": "X enjoy the recipes .", "b": "X are not picky eaters .", "c": "X spend a lot of X 's time eating and catching up with friends in the campus dining halls ."}, {"0": "Mary works in student jobs on campus .", "1": "Mary needs to earn money to help pay for Mary 's college tuition .", "2": "Mary works in student jobs on campus .", "3": "Mary needs to earn money to help pay for Mary 's college tuition .", "4": "Mary VP . .", "5": "Mary does not need to earn money to help pay for Mary 's college tuition . .", "6": "Mary does not work in student jobs on campus .", "7": "Mary does not need to earn money to help pay for Mary 's college tuition ."}, {"0": "X is a person .", "1": "X orders takeout frequently in college .", "2": "X enjoys the dining hall .", "3": "X enjoys the meals .", "4": "X enjoys the recipes .", "5": "Mary does not work in student jobs on campus .", "6": "Mary does not need to earn money to help pay for Mary 's college tuition .", "7": "Mary enjoys the dining hall .", "8": "Mary enjoys the meals .", "9": "Mary enjoys the recipes .", "a": "Mary is a person .", "b": "Mary orders takeout frequently in college .", "c": "Mary enjoys the dining hall .", "d": "Mary enjoys the meals .", "e": "Mary enjoys the recipes .", "f": "the dining hall meals and recipes is a person .", "g": "the dining hall meals and recipes orders takeout frequently in college .", "h": "the dining hall meals and recipes enjoys the dining hall .", "i": "the dining hall meals and recipes enjoys the meals .", "j": "the dining hall meals and recipes enjoys the recipes ."}, {"0": "X enjoy the dining hall .", "1": "X enjoy the meals .", "2": "X enjoy the recipes .", "3": "X are not picky eaters .", "4": "X enjoy the dining hall .", "5": "X enjoy the meals .", "6": "X enjoy the recipes .", "7": "X spend a lot of X 's time eating and catching up with friends in the campus dining halls .", "8": "Mary enjoys the dining hall .", "9": "Mary enjoys the meals .", "a": "Mary enjoys the recipes .", "b": "Mary is not a picky eater .", "c": "Mary is .", "d": "Mary spends a lot of Mary 's time eating and catching up with friends in the campus dining halls .", "e": "Mary enjoy the dining hall .", "f": "Mary enjoy the meals .", "g": "Mary enjoy the recipes .", "h": "Mary are not picky eaters .", "i": "the campus dining halls enjoy the dining hall .", "j": "the campus dining halls enjoy the meals .", "k": "the campus dining halls enjoy the recipes .", "l": "the campus dining halls are not picky eaters .", "m": "the dining hall meals and recipes enjoy the dining hall .", "n": "the dining hall meals and recipes enjoy the meals .", "o": "the dining hall meals and recipes enjoy the recipes .", "p": "the dining hall meals and recipes are not picky eaters .", "q": "Mary enjoy the dining hall .", "r": "Mary enjoy the meals .", "s": "Mary enjoy the recipes .", "t": "Mary spend a lot of Mary 's time eating and catching up with friends in the campus dining halls .", "u": "the campus dining halls enjoy the dining hall .", "v": "the campus dining halls enjoy the meals .", "w": "the campus dining halls enjoy the recipes .", "x": "the campus dining halls spend a lot of the campus dining halls 's time eating and catching up with friends in the campus dining halls .", "y": "the dining hall meals and recipes enjoy the dining hall .", "z": "the dining hall meals and recipes enjoy the meals .", "A": "the dining hall meals and recipes enjoy the recipes .", "B": "the dining hall meals and recipes spend a lot of the dining hall meals and recipes 's time eating and catching up with friends in the campus dining halls ."}], "errors": [[]], "entailments_dict": [{"8": ["0", "a"], "1": ["5"], "6": ["7"], "9": ["5"], "(¬a)": ["0"], "(¬7)": ["0"], "(¬5)": ["0"]}, {"7": ["0", "c"], "a": ["2", "6"], "8": ["0", "1", "4", "5"], "9": ["1", "5"], "3": ["b"]}, {"0": ["2", "(¬5)", "(¬4)"], "1": ["3", "(¬5)"], "5": ["7", "(¬1)", "(¬0)"], "4": ["(¬0)"], "7": ["(¬0)", "(¬1)"], "6": ["(¬0)"], "(¬7)": ["1", "3"], "(¬6)": ["0", "2"]}, {"6": ["a"], "5": ["a", "(¬g)"], "7": ["a", "(¬5)"], "8": ["a"], "9": ["a"], "c": ["7", "8", "(¬5)"], "e": ["9"], "d": ["8"], "i": ["(¬5)"], "g": ["(¬5)"], "j": ["(¬5)"], "h": ["(¬5)"], "(¬7)": ["a"], "(¬8)": ["a"], "(¬9)": ["a"], "(¬5)": ["a"], "(¬6)": ["a"]}, {"8": ["e", "n", "z", "o", "f", "r", "A", "q"], "t": ["8", "e", "d"], "x": ["i"], "B": ["m"], "9": ["f", "r"], "a": ["s", "g"], "h": ["b"]}], "predicted_steps": [true, true, "Contradiction in the premises", false, false]}
{"text": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dried Thai chilies are a product of Baked by Melissa?", "id": "79", "ground_truth": "False", "reasoning": "Premise 1.1: No bakery is spicy.\nPremise 1.2: All cupcakes are bakeries.\nConclusion 1: No cupcake is spicy.\nPremise 2.1: All products of Baked by Melissa are cupcakes.\nPremise 2.2: No cupcake is spicy.\nConclusion 2: No product of Baked by Melissa is spicy.\nPremise 3.1: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nPremise 3.2: Dried Thai chilies are spicy.\nConclusion 3: Dried Thai chilies are a hotpot or are spicy.\nPremise 4.1: No product of Baked by Melissa is spicy.\nPremise 4.2: Dried Thai chilies are spicy.\nConclusion 4: Dried Thai chilies are not a product of Baked by Melissa.\nAnswer: B. No", "logic_premises": "[[(0→1), (2→3)], [(0→1), (2→3)], [(0→(1∨2)), (3→4)], [(0→1), (2→3)]]", "logic_conclusion": "[(4→5), (4→5), (5→(6∨7)), (4→5)]", "correspondance": [{"0": "X is a bakery .", "1": "X is not spicy .", "2": "X is a cupcake .", "3": "X is a bakery .", "4": "X is a cupcake .", "5": "X is not spicy ."}, {"0": "X is a product of Baked by Melissa .", "1": "X is a cupcake .", "2": "X is a cupcake .", "3": "X is not spicy .", "4": "X is a product of Baked by Melissa .", "5": "X is not spicy ."}, {"0": "dried Thai chilies are spicy or a bakery .", "1": "dried Thai chilies are a hotpot .", "2": "dried Thai chilies are spicy .", "3": "X is Dried a Thai chile .", "4": "X is spicy .", "5": "X is Dried a Thai chile .", "6": "X is a hotpot .", "7": "X is spicy ."}, {"0": "X is a product of Baked by Melissa .", "1": "X is not spicy .", "2": "X is Dried a Thai chile .", "3": "X is spicy .", "4": "X is Dried a Thai chile .", "5": "X is not a product of Baked by Melissa ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["2", "(¬3)"], "1": ["5"]}, {"1": ["2"], "4": ["0"], "3": ["5"]}, {"5": ["3"], "4": ["7"]}, {"4": ["2", "(¬1)"], "3": ["(¬1)"], "1": ["(¬3)"], "(¬5)": ["0"]}], "predicted_steps": ["Contradiction in the premises", true, true, true]}
{"text": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dried Thai chilies are not a product of Baked by Melissa?", "id": "80", "ground_truth": "True", "reasoning": "Premise 1.1: All products of Baked by Melissa are cupcakes.\nPremise 1.2: All cupcakes are bakeries.\nConclusion 1: All products of Baked by Melissa are bakeries.\nPremise 2.1: No bakery is spicy.\nPremise 2.2: All products of Baked by Melissa are bakeries.\nConclusion 2: No product of Baked by Melissa is spicy.\nPremise 3.1: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nPremise 3.2: Dried Thai chilies are spicy.\nConclusion 3: Dried Thai chilies are a hotpot or are spicy.\nPremise 4.1: No product of Baked by Melissa is spicy.\nPremise 4.2: Dried Thai chilies are spicy.\nConclusion 4: Dried Thai chilies are not a product of Baked by Melissa.\nAnswer: A. Yes", "logic_premises": "[[(0→1), (2→3)], [(0→1), (2→3)], [(0→(1∨2)), (3→4)], [(0→1), (2→3)]]", "logic_conclusion": "[(4→5), (4→5), (5→(6∨7)), (4→5)]", "correspondance": [{"0": "X is a product of Baked by Melissa .", "1": "X is a cupcake .", "2": "X is a cupcake .", "3": "X is a bakery .", "4": "X is a product of Baked by Melissa .", "5": "X is a bakery ."}, {"0": "X is a bakery .", "1": "X is not spicy .", "2": "X is a product of Baked by Melissa .", "3": "X is a bakery .", "4": "X is a product of Baked by Melissa .", "5": "X is not spicy ."}, {"0": "dried Thai chilies are spicy or a bakery .", "1": "dried Thai chilies are a hotpot .", "2": "dried Thai chilies are spicy .", "3": "X is Dried a Thai chile .", "4": "X is spicy .", "5": "X is Dried a Thai chile .", "6": "X is a hotpot .", "7": "X is spicy ."}, {"0": "X is a product of Baked by Melissa .", "1": "X is not spicy .", "2": "X is Dried a Thai chile .", "3": "X is spicy .", "4": "X is Dried a Thai chile .", "5": "X is not a product of Baked by Melissa ."}], "errors": [[]], "entailments_dict": [{"1": ["2", "(¬3)"], "4": ["0", "(¬3)"], "3": ["5", "(¬1)"]}, {"3": ["0"], "4": ["2", "(¬3)"], "1": ["5"]}, {"5": ["3"], "4": ["7"]}, {"4": ["2", "(¬1)"], "3": ["(¬1)"], "1": ["(¬3)"], "(¬5)": ["0"]}], "predicted_steps": ["Contradiction in the premises", "Contradiction in the premises", true, true]}
{"text": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dried Thai chilies are a hotpot?", "id": "81", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: No bakery is spicy.\nPremise 1.2: All cupcakes are bakeries.\nConclusion 1: No cupcake is spicy.\nPremise 2.1: All products of Baked by Melissa are cupcakes.\nPremise 2.2: No cupcake is spicy.\nConclusion 2: No product of Baked by Melissa is spicy.\nPremise 3.1: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nPremise 3.2: Dried Thai chilies are not spicy (since they are a product of Baked by Melissa).\nConclusion 3: If dried Thai chilies are a bakery, then dried Thai chilies are a hotpot.\nPremise 4.1: No bakery is spicy.\nPremise 4.2: All hotpots are spicy.\nConclusion 4: No bakery is a hotpot.\nPremise 5.1: If dried Thai chilies are a bakery, then dried Thai chilies are a hotpot.\nPremise 5.2: No bakery is a hotpot.\nConclusion 5: Dried Thai chilies are not a bakery.\nPremise 6.1: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nPremise 6.2: Dried Thai chilies are not a bakery.\nConclusion 6: If dried Thai chilies are spicy, then dried Thai chilies are a hotpot.\nPremise 7.1: All hotpots are spicy.\nPremise 7.2: Dried Thai chilies are spicy (since they are a product of Baked by Melissa and not a bakery).\nConclusion 7: Dried Thai chilies are a hotpot.\nAnswer: A. Yes", "logic_premises": "[[(0→1), (2→3)], [(0→1), (2→3)], [(0→(1∨2)), (3→4)], [(0→1), (2→3)], [(0→1), (2→3)], [(0→(1∨2)), (3→4)], [(0→1), (2→3)]]", "logic_conclusion": "[(4→5), (4→5), (5→6), (4→5), (4→5), (5→6), (4→5)]", "correspondance": [{"0": "X is a bakery .", "1": "X is not spicy .", "2": "X is a cupcake .", "3": "X is a bakery .", "4": "X is a cupcake .", "5": "X is not spicy ."}, {"0": "X is a product of Baked by Melissa .", "1": "X is a cupcake .", "2": "X is a cupcake .", "3": "X is not spicy .", "4": "X is a product of Baked by Melissa .", "5": "X is not spicy ."}, {"0": "dried Thai chilies are spicy or a bakery .", "1": "dried Thai chilies are a hotpot .", "2": "dried Thai chilies are spicy .", "3": "X is Dried a Thai chile .", "4": "X is not spicy .", "5": "dried Thai chilies are a bakery .", "6": "dried Thai chilies are a hotpot ."}, {"0": "X is a bakery .", "1": "X is not spicy .", "2": "X is a hotpot .", "3": "X is spicy .", "4": "X is a bakery .", "5": "X is not a hotpot ."}, {"0": "dried Thai chilies are a bakery .", "1": "dried Thai chilies are a hotpot .", "2": "X is a bakery .", "3": "X is not a hotpot .", "4": "X is Dried a Thai chile .", "5": "X is not a bakery ."}, {"0": "dried Thai chilies are spicy or a bakery .", "1": "dried Thai chilies are a hotpot .", "2": "dried Thai chilies are spicy .", "3": "X is Dried a Thai chile .", "4": "X is not a bakery .", "5": "dried Thai chilies are spicy .", "6": "dried Thai chilies are a hotpot ."}, {"0": "X is a hotpot .", "1": "X is spicy .", "2": "X is Dried a Thai chile .", "3": "X is spicy .", "4": "X is Dried a Thai chile .", "5": "X is a hotpot ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["2", "(¬3)"], "1": ["5"]}, {"1": ["2"], "4": ["0"], "3": ["5"]}, {"1": ["6", "(¬4)"], "4": ["(¬1)"], "5": ["(¬1)", "(¬4)"]}, {"4": ["0"], "3": ["(¬1)"], "1": ["(¬3)"], "(¬5)": ["2"]}, {"(¬5)": ["2"]}, {"1": ["6"], "4": ["(¬1)"]}, {"4": ["2"]}], "predicted_steps": ["Contradiction in the premises", true, false, true, false, false, false]}
{"text": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dried Thai chilies are neither a product of Baked by Melissa nor a bakery?", "id": "82", "ground_truth": "True", "reasoning": "Premise 1.1: All cupcakes are bakeries.\nPremise 1.2: All products of Baked by Melissa are cupcakes.\nConclusion 1: All products of Baked by Melissa are bakeries.\nPremise 2.1: No bakery is spicy.\nPremise 2.2: All products of Baked by Melissa are bakeries.\nConclusion 2: No product of Baked by Melissa is spicy.\nPremise 3.1: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nPremise 3.2: No product of Baked by Melissa is spicy.\nConclusion 3: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nPremise 4.1: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nAnswer: A. Yes", "logic_premises": "[[(0→1), (2→3)], [(0→1), (2→3)], [(0→(1∨2)), (8→9)]]", "logic_conclusion": "[(4→5), (4→5), (a→(b∧c))]", "correspondance": [{"0": "X is a cupcake .", "1": "X is a bakery .", "2": "X is a product of Baked by Melissa .", "3": "X is a cupcake .", "4": "X is a product of Baked by Melissa .", "5": "X is a bakery ."}, {"0": "X is a bakery .", "1": "X is not spicy .", "2": "X is a product of Baked by Melissa .", "3": "X is a bakery .", "4": "X is a product of Baked by Melissa .", "5": "X is not spicy ."}, {"0": "dried Thai chilies are spicy or a bakery .", "1": "dried Thai chilies are a hotpot .", "2": "dried Thai chilies are spicy .", "3": "X is a product of Baked by Melissa .", "4": "X is not spicy .", "5": "X is Dried a Thai chile .", "6": "X is not a product of Baked by Melissa .", "7": "X is not a bakery .", "8": "Melissa is a product of Baked by Melissa .", "9": "Melissa is not spicy .", "a": "Melissa is Dried a Thai chile .", "b": "Melissa is not a product of Baked by Melissa .", "c": "Melissa is not a bakery ."}], "errors": [[]], "entailments_dict": [{"3": ["0", "(¬1)"], "4": ["2", "(¬1)"], "1": ["5", "(¬3)"]}, {"3": ["0"], "4": ["2", "(¬3)"], "1": ["5"]}, {"a": ["(¬1)", "(¬9)"], "(¬b)": ["8"]}], "predicted_steps": ["Contradiction in the premises", "Contradiction in the premises", false]}
{"text": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dried Thai chilies are cupcakes and a product of Baked by Melissa?", "id": "83", "ground_truth": "False", "reasoning": "Premise 1.1: No bakery is spicy.\nPremise 1.2: All cupcakes are bakeries.\nConclusion 1: No cupcake is spicy.\n\nPremise 2.1: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nPremise 2.2: No cupcake is spicy.\nConclusion 2: Dried Thai chilies are not a bakery.\n\nPremise 3.1: All products of Baked by Melissa are cupcakes.\nPremise 3.2: Dried Thai chilies are not a bakery.\nConclusion 3: Dried Thai chilies are not a product of Baked by Melissa.\n\nPremise 4.1: Dried Thai chilies are not a product of Baked by Melissa.\nPremise 4.2: Dried Thai chilies are not a cupcake.\nAnswer: B. No", "logic_premises": "[[(0→1), (2→3)], [(0→(1∨2)), (3→4)], [(0→1), (2→3)]]", "logic_conclusion": "[(4→5), (5→6), (4→5)]", "correspondance": [{"0": "X is a bakery .", "1": "X is not spicy .", "2": "X is a cupcake .", "3": "X is a bakery .", "4": "X is a cupcake .", "5": "X is not spicy ."}, {"0": "dried Thai chilies are spicy or a bakery .", "1": "dried Thai chilies are a hotpot .", "2": "dried Thai chilies are spicy .", "3": "X is a cupcake .", "4": "X is not spicy .", "5": "X is Dried a Thai chile .", "6": "X is not a bakery ."}, {"0": "X is a product of Baked by Melissa .", "1": "X is a cupcake .", "2": "X is Dried a Thai chile .", "3": "X is not a bakery .", "4": "X is Dried a Thai chile .", "5": "X is not a product of Baked by Melissa ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["2", "(¬3)"], "1": ["5"]}, {"1": ["(¬4)"], "4": ["(¬1)"], "5": ["(¬4)"]}, {"4": ["2", "(¬1)"], "(¬5)": ["0"]}], "predicted_steps": ["Contradiction in the premises", false, true]}
{"text": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service?", "id": "84", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: All restaurants that are popular among local residents have ratings greater than 9.\nPremise 1.2: Subway has a rating greater than 9 or is popular among local residents.\nConclusion 1: Subway has a rating greater than 9 or has a rating greater than 9.\nPremise 2.1: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\nPremise 2.2: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\nConclusion 2: If Subway has a rating greater than 9, then it does not receive many negative reviews.\nPremise 3.1: If Subway provides take-out service and receives many negative reviews.\nPremise 3.2: If Subway has a rating greater than 9, then it does not receive many negative reviews.\nConclusion 3: Subway does not provide take-out service.\nPremise 4.1: Subway has a rating greater than 9.\nPremise 4.2: If Subway provides take-out service and receives many negative reviews.\nConclusion 4: The statement is true.\nAnswer: A. Yes", "logic_premises": "[[(6→7), (2∨3)], [((6→7)∪((8→9)∪(a→b))), (2→3)], [0, (1→2)], [0, 1]]", "logic_conclusion": "[(4∨5), (4→5), 3, 2]", "correspondance": [{"0": "X is a restaurant that is popular among local a resident .", "1": "X has ratings greater than 9 .", "2": "Subway has a rating greater than 9 .", "3": "Subway is popular among local residents .", "4": "Subway has a rating greater than 9 .", "5": "Subway has a rating greater than 9 .", "6": "Subway is a restaurant that is popular among local a resident .", "7": "Subway has ratings greater than 9 ."}, {"0": "X is a restaurant with a rating greater than 9 .", "1": "X is listed in Yelp ’s 's recommendations .", "2": "the restaurant is listed in Yelp ’s 's recommendations .", "3": "the restaurant does not receive many negative reviews .", "4": "Subway has a rating greater than 9 .", "5": "Subway does not receive many negative reviews .", "6": "Subway is a restaurant with a rating greater than 9 .", "7": "Subway is listed in Yelp ’s 's recommendations .", "8": "Yelp’s recommendations is a restaurant with a rating greater than 9 .", "9": "Yelp’s recommendations is listed in Yelp ’s 's recommendations .", "a": "the restaurant is a restaurant with a rating greater than 9 .", "b": "the restaurant is listed in Yelp ’s 's recommendations ."}, {"0": "If Subway provides take - out service and receives many negative reviews .", "1": "Subway has a rating greater than 9 .", "2": "Subway does not receive many negative reviews .", "3": "Subway does not provide take - out service ."}, {"0": "Subway has a rating greater than 9 .", "1": "If Subway provides take - out service and receives many negative reviews .", "2": "The statement is true ."}], "errors": [[]], "entailments_dict": [{"3": ["6"], "7": ["2", "4", "5"], "4": ["2"], "5": ["2"], "2": ["4", "5"]}, {"7": ["2"], "b": ["2"], "4": ["a", "6"]}, {"0": ["(¬2)"], "2": ["(¬0)"], "3": ["(¬0)"]}, {"0": ["(¬1)"], "1": ["(¬0)"]}], "predicted_steps": [true, false, false, "Contradiction in the premises"]}
{"text": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Subway provides take-out service and does not receive many negative reviews?", "id": "85", "ground_truth": "True", "reasoning": "Premise 1.1: All restaurants that are popular among local residents have ratings greater than 9.\nPremise 1.2: Subway has a rating greater than 9 or is popular among local residents.\nConclusion 1: Subway has a rating greater than 9.\nPremise 2.1: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\nPremise 2.2: Subway has a rating greater than 9.\nConclusion 2: Subway is listed in Yelp’s recommendations.\nPremise 3.1: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\nPremise 3.2: Subway is listed in Yelp’s recommendations.\nConclusion 3: Subway does not receive many negative reviews.\nPremise 4.1: Some restaurants that do not provide take-out service receive many negative reviews.\nPremise 4.2: Subway does not receive many negative reviews.\nConclusion 4: Subway provides take-out service.\nPremise 5.1: Subway provides take-out service.\nPremise 5.2: Subway does not receive many negative reviews.\nAnswer: A. Yes", "logic_premises": "[[(5→6), (2∨3)], [((4→5)∪(6→7)), 2], [(0→1), 2], [0, 1]]", "logic_conclusion": "[4, 3, 3, 2]", "correspondance": [{"0": "X is a restaurant that is popular among local a resident .", "1": "X has ratings greater than 9 .", "2": "Subway has a rating greater than 9 .", "3": "Subway is popular among local residents .", "4": "Subway has a rating greater than 9 .", "5": "Subway is a restaurant that is popular among local a resident .", "6": "Subway has ratings greater than 9 ."}, {"0": "X is a restaurant with a rating greater than 9 .", "1": "X is listed in Yelp ’s 's recommendations .", "2": "Subway has a rating greater than 9 .", "3": "Subway is listed in Yelp ’s 's recommendations .", "4": "Subway is a restaurant with a rating greater than 9 .", "5": "Subway is listed in Yelp ’s 's recommendations .", "6": "Yelp’s recommendations is a restaurant with a rating greater than 9 .", "7": "Yelp’s recommendations is listed in Yelp ’s 's recommendations ."}, {"0": "the restaurant is listed in Yelp ’s 's recommendations .", "1": "the restaurant does not receive many negative reviews .", "2": "Subway is listed in Yelp ’s 's recommendations .", "3": "Subway does not receive many negative reviews ."}, {"0": "Some restaurants that do not provide take - out service receive many negative reviews .", "1": "Subway does not receive many negative reviews .", "2": "Subway provides take - out service ."}], "errors": [[]], "entailments_dict": [{"3": ["5"], "6": ["2", "4"], "4": ["2"], "2": ["4"]}, {"2": ["4"], "5": ["3"]}, {"2": ["0"]}, {"1": ["2"]}], "predicted_steps": [true, true, false, true]}
{"text": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Subway does not provide take-out service?", "id": "86", "ground_truth": "False", "reasoning": "Premise 1.1: All restaurants that are popular among local residents have ratings greater than 9.\nPremise 1.2: Subway has a rating greater than 9 or is popular among local residents.\nConclusion 1: Subway has a rating greater than 9 or is popular among local residents.\nPremise 2.1: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\nPremise 2.2: Subway has a rating greater than 9 or is popular among local residents.\nConclusion 2: Subway is listed in Yelp’s recommendations.\nPremise 3.1: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\nPremise 3.2: Subway is listed in Yelp’s recommendations.\nConclusion 3: Subway does not receive many negative reviews.\nPremise 4.1: Some restaurants that do not provide take-out service receive many negative reviews.\nPremise 4.2: Subway does not receive many negative reviews.\nConclusion 4: Subway provides take-out service.\nPremise 5.1: Subway provides take-out service.\nAnswer: B. No", "logic_premises": "[[(6→7), (2∨3)], [((5→6)∪(7→8)), (2∨3)], [(0→1), 2], [0, 1]]", "logic_conclusion": "[(4∨5), 4, 3, 2]", "correspondance": [{"0": "X is a restaurant that is popular among local a resident .", "1": "X has ratings greater than 9 .", "2": "Subway has a rating greater than 9 .", "3": "Subway is popular among local residents .", "4": "Subway has a rating greater than 9 .", "5": "Subway is popular among local residents .", "6": "Subway is a restaurant that is popular among local a resident .", "7": "Subway has ratings greater than 9 ."}, {"0": "X is a restaurant with a rating greater than 9 .", "1": "X is listed in Yelp ’s 's recommendations .", "2": "Subway has a rating greater than 9 .", "3": "Subway is popular among local residents .", "4": "Subway is listed in Yelp ’s 's recommendations .", "5": "Subway is a restaurant with a rating greater than 9 .", "6": "Subway is listed in Yelp ’s 's recommendations .", "7": "Yelp’s recommendations is a restaurant with a rating greater than 9 .", "8": "Yelp’s recommendations is listed in Yelp ’s 's recommendations ."}, {"0": "the restaurant is listed in Yelp ’s 's recommendations .", "1": "the restaurant does not receive many negative reviews .", "2": "Subway is listed in Yelp ’s 's recommendations .", "3": "Subway does not receive many negative reviews ."}, {"0": "Some restaurants that do not provide take - out service receive many negative reviews .", "1": "Subway does not receive many negative reviews .", "2": "Subway provides take - out service ."}], "errors": [[]], "entailments_dict": [{"3": ["6", "5"], "7": ["2", "4"], "4": ["2"], "5": ["6", "3"], "2": ["4"]}, {"2": ["5"], "6": ["4"]}, {"2": ["0"]}, {"1": ["2"]}], "predicted_steps": [true, false, false, true]}
{"text": "In superhero movies, the good guys always win. The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie. Good guys fight bad guys and vice versa. Sir Digby fights his nemesis. If a superhero movie is named after a character, that character is a good guy. The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby. If somebody wins a fight, the person they are fighting loses. If a superhero movie is named after a character, that character appears in the movie.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Sir Digby’s nemesis loses?", "id": "87", "ground_truth": "True", "reasoning": "Premise 1.1: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\nPremise 1.2: In superhero movies, the good guys always win.\nConclusion 1: The good guys always win in The Surprising Adventures of Sir Digby Chicken Caesar.\n\nPremise 2.1: The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\nPremise 2.2: If a superhero movie is named after a character, that character is a good guy.\nConclusion 2: Sir Digby is a good guy.\n\nPremise 3.1: Sir Digby fights his nemesis.\nPremise 3.2: Good guys fight bad guys and vice versa.\nConclusion 3: Sir Digby's nemesis is a bad guy.\n\nPremise 4.1: The good guys always win in The Surprising Adventures of Sir Digby Chicken Caesar.\nPremise 4.2: Sir Digby is a good guy.\nPremise 4.3: Sir Digby fights his nemesis.\nConclusion 4: Sir Digby wins the fight against his nemesis.\n\nPremise 5.1: If somebody wins a fight, the person they are fighting loses.\nPremise 5.2: Sir Digby wins the fight against his nemesis.\nConclusion 5: Sir Digby's nemesis loses.\n\nAnswer: A. Yes", "logic_premises": "[[0, 1], [0, (((5∧6)→3)∪((7∧8)→3))], [0, 1], [0, 1, 2], [((4→5)∪((6→7)∪((8→9)∪(a→b)))), 2]]", "logic_conclusion": "[2, 4, 2, 3, 3]", "correspondance": [{"0": "the Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie .", "1": "In superhero movies , the good guys always win .", "2": "The good guys always win in the Surprising Adventures of Sir Digby Chicken Caesar ."}, {"0": "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby .", "1": "X is a superhero movie", "2": "X is named after a character .", "3": "a character is a good guy .", "4": "Sir Digby is a good guy .", "5": "Sir Digby is a superhero movie", "6": "Sir Digby is named after a character .", "7": "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie", "8": "The Surprising Adventures of Sir Digby Chicken Caesar is named after a character ."}, {"0": "Sir Digby fights Sir Digby 's nemesis .", "1": "Good guys fight bad guys and vice versa .", "2": "Sir Digby 's nemesis is a bad guy ."}, {"0": "The good guys always win in The Surprising Adventures of Sir Digby Chicken Caesar .", "1": "Sir Digby Chicken Caesar is a good guy .", "2": "Sir Digby Chicken Caesar fights Sir Digby Chicken Caesar 's nemesis .", "3": "Sir Digby Chicken Caesar wins the fight against Sir Digby Chicken Caesar 's nemesis ."}, {"0": "X wins a fight .", "1": "the person X are fighting loses .", "2": "Sir Digby wins the fight against Sir Digby 's nemesis .", "3": "Sir Digby 's nemesis loses .", "4": "the person they are fighting wins a fight .", "5": "the person the person they are fighting are fighting loses .", "6": "Sir Digby wins a fight .", "7": "the person Sir Digby are fighting loses .", "8": "Sir Digbys nemesis wins a fight .", "9": "the person Sir Digbys nemesis are fighting loses .", "a": "the fight against his nemesis wins a fight .", "b": "the person the fight against his nemesis are fighting loses ."}], "errors": [[]], "entailments_dict": [{}, {"0": ["8"]}, {}, {"3": ["2"], "(¬3)": ["2"]}, {"2": ["a", "6", "3"], "b": ["2"], "3": ["4", "6"], "7": ["3"], "9": ["3"], "(¬2)": ["8", "6"], "(¬8)": ["2"]}], "predicted_steps": [false, false, false, false, true]}
{"text": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Walden contains knowledge?", "id": "88", "ground_truth": "True", "reasoning": "Premise 1.1: Harry read the book “Walden” by Henry Thoreau.\nPremise 1.2: When a person reads a book, that person gains knowledge.\nConclusion 1: Harry gained knowledge.\nPremise 2.1: Harry gained knowledge.\nPremise 2.2: If a person gains knowledge, they become smarter.\nConclusion 2: (Not relevant to the question)\nPremise 3.1: Books contain tons of knowledge.\nPremise 3.2: Harry read the book “Walden” by Henry Thoreau.\nConclusion 3: Walden contains knowledge.\nAnswer: A. Yes.", "logic_premises": "[[0, (1→2)], [0, ((5∧6)→7)], [((4→5)∪((6→7)∪(8→9))), 2]]", "logic_conclusion": "[3, 4, 3]", "correspondance": [{"0": "Harry read the book “ Walden ” by Henry Thoreau .", "1": "a person reads a book .", "2": "a person gains knowledge .", "3": "Harry gained knowledge ."}, {"0": "Harry gained knowledge .", "1": "X is a person", "2": "X gains knowledge .", "3": "X become smarter .", "4": ".", "5": "Harry is a person", "6": "Harry gains knowledge .", "7": "Harry become smarter ."}, {"0": "X is a Book .", "1": "X contains tons of knowledge .", "2": "Harry read the book “ Walden ” by Henry Thoreau .", "3": "the book “ Walden ” by Henry Thoreau contains knowledge .", "4": "Harry is a Book .", "5": "Harry contains tons of knowledge .", "6": "the book “Walden” by Henry Thoreau is a Book .", "7": "the book “Walden” by Henry Thoreau contains tons of knowledge .", "8": "Walden is a Book .", "9": "Walden contains tons of knowledge ."}], "errors": [[]], "entailments_dict": [{"0": ["1", "3"], "(¬0)": ["1"]}, {"7": ["0"], "0": ["6"]}, {"2": ["8", "6"], "3": ["6", "8"], "7": ["3"], "9": ["3"], "(¬3)": ["6", "8"], "(¬2)": ["8", "6"]}], "predicted_steps": [true, false, true]}
{"text": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Harry is smarter than before?", "id": "89", "ground_truth": "True", "reasoning": "Premise 1.1: Harry read the book “Walden” by Henry Thoreau.\nPremise 1.2: When a person reads a book, that person gains knowledge.\nConclusion 1: Harry gains knowledge.\nPremise 2.1: Harry gains knowledge.\nPremise 2.2: If a person gains knowledge, they become smarter.\nConclusion 2: Harry becomes smarter.\nPremise 3.1: Harry becomes smarter.\nAnswer: A. Yes.", "logic_premises": "[[0, (1→2)], [0, ((5∧6)→7)]]", "logic_conclusion": "[3, 4]", "correspondance": [{"0": "Harry read the book “ Walden ” by Henry Thoreau .", "1": "a person reads a book .", "2": "a person gains knowledge .", "3": "Harry gains knowledge ."}, {"0": "Harry gains knowledge .", "1": "X is a person", "2": "X gains knowledge .", "3": "X become smarter .", "4": "Harry becomes smarter .", "5": "Harry is a person", "6": "Harry gains knowledge .", "7": "Harry become smarter ."}], "errors": [[]], "entailments_dict": [{"0": ["1", "3"], "(¬0)": ["1"]}, {"7": ["0", "4"], "0": ["6", "4"], "4": ["0", "6"]}], "predicted_steps": [true, true]}
{"text": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A person who is smarter has gained knowledge?", "id": "90", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: If a person gains knowledge, they become smarter.\nPremise 1.2: Harry read the book “Walden” by Henry Thoreau.\nPremise 1.3: When a person reads a book, that person gains knowledge.\nConclusion 1: Harry gained knowledge.\nPremise 2.1: If a person gains knowledge, they become smarter.\nPremise 2.2: Harry gained knowledge.\nConclusion 2: Harry became smarter.\nPremise 3.1: If a person gains knowledge, they become smarter.\nConclusion 3: A person who is smarter has gained knowledge.\nAnswer: A. Yes.", "logic_premises": "[[(((7∧8)→9)∪((a∧b)→c)), 3, (4→5)], [((5∧6)→7), 3], [((0∧1)→2)]]", "logic_conclusion": "[6, 4, 3]", "correspondance": [{"0": "X is a person", "1": "X gains knowledge .", "2": "X become smarter .", "3": "Harry read the book “ Walden ” by Henry Thoreau .", "4": "a person reads a book .", "5": "a person gains knowledge .", "6": "Harry gained knowledge .", "7": "Harry is a person", "8": "Harry gains knowledge .", "9": "Harry become smarter .", "a": "the book “Walden” by Henry Thoreau is a person", "b": "the book “Walden” by Henry Thoreau gains knowledge .", "c": "the book “Walden” by Henry Thoreau become smarter ."}, {"0": "X is a person", "1": "X gains knowledge .", "2": "X become smarter .", "3": "Harry gained knowledge .", "4": "Harry became smarter .", "5": "Harry is a person", "6": "Harry gains knowledge .", "7": "Harry become smarter ."}, {"0": "X is a person", "1": "X gains knowledge .", "2": "X become smarter .", "3": "A person who is smarter has gained knowledge ."}], "errors": [[]], "entailments_dict": [{"3": ["8", "7", "4", "6"], "c": ["4", "6"], "6": ["8"], "9": ["6"], "(¬3)": ["7", "4"]}, {"7": ["3", "4"], "3": ["6", "4"], "4": ["6", "3"]}, {}], "predicted_steps": [true, true, false]}
{"text": "Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Machine translation is a language generation task?", "id": "91", "ground_truth": "True", "reasoning": "Premise 1.1: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nPremise 1.2: The output of machine translation is a text sequence.\nConclusion 1: Machine translation is a language generation task.\nPremise 2.1: Machine translation is a language generation task.\nAnswer: A. Yes.", "logic_premises": "[[(((5∧6)→7)∪((8∧9)→a)), 3]]", "logic_conclusion": "[4]", "correspondance": [{"0": "X is a natural language processing task", "1": "the output of X is a text sequence .", "2": "X is a language generation task .", "3": "The output of machine translation is a text sequence .", "4": "Machine translation is a language generation task .", "5": "The output of machine translation is a natural language processing task", "6": "the output of The output of machine translation is a text sequence .", "7": "The output of machine translation is a language generation task .", "8": "the output of a natural language processing task is a natural language processing task", "9": "the output of the output of a natural language processing task is a text sequence .", "a": "the output of a natural language processing task is a language generation task ."}], "errors": [[]], "entailments_dict": [{"3": ["6"], "4": ["6", "3"]}], "predicted_steps": [false]}
{"text": "Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Machine translation is a language understanding task?", "id": "92", "ground_truth": "False", "reasoning": "Premise 1.1: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nPremise 1.2: The output of machine translation is a text sequence.\nConclusion 1: Machine translation is a language generation task.\nPremise 2.1: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nPremise 2.2: Machine translation is a language generation task.\nConclusion 2: Machine translation is not a language understanding task.\nPremise 3.1: Machine translation is not a language understanding task.\nAnswer: B. No", "logic_premises": "[[(((5∧6)→7)∪((8∧9)→a)), 3], [(0⊻1), 2]]", "logic_conclusion": "[4, 3]", "correspondance": [{"0": "X is a natural language processing task", "1": "the output of X is a text sequence .", "2": "X is a language generation task .", "3": "The output of machine translation is a text sequence .", "4": "Machine translation is a language generation task .", "5": "The output of machine translation is a natural language processing task", "6": "the output of The output of machine translation is a text sequence .", "7": "The output of machine translation is a language generation task .", "8": "the output of a natural language processing task is a natural language processing task", "9": "the output of the output of a natural language processing task is a text sequence .", "a": "the output of a natural language processing task is a language generation task ."}, {"0": "Natural language processing tasks can be categorized as language generation task .", "1": "Natural language processing tasks can be categorized as language understanding task .", "2": "Machine translation is a language generation task .", "3": "Machine translation is not a language understanding task ."}], "errors": [[]], "entailments_dict": [{"3": ["6"], "4": ["6", "3"]}, {"2": ["3"], "3": ["(¬0)"]}], "predicted_steps": [false, true]}
{"text": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom will rent an apartment in The Olive Garden?", "id": "93", "ground_truth": "False", "reasoning": "Premise 1.1: The Olive Garden is a managed building.\nPremise 1.2: A deposit is required to rent an apartment in a managed building.\nConclusion 1: A deposit is required to rent an apartment in The Olive Garden.\n\nPremise 2.1: The security deposit can be either equal to one month's rent or more.\nPremise 2.2: The monthly rent at the Olive Garden is $2000.\nConclusion 2: The security deposit at The Olive Garden is either $2000 or more.\n\nPremise 3.1: $2000 is more than $1500.\nPremise 3.2: The security deposit at The Olive Garden is either $2000 or more.\nConclusion 3: The security deposit at The Olive Garden is more than $1500.\n\nPremise 4.1: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nPremise 4.2: The security deposit at The Olive Garden is more than $1500.\nConclusion 4: Tom will not rent an apartment in The Olive Garden.\n\nAnswer: B. No", "logic_premises": "[[0, 1], [(0∨1), 2], [0, 1], [((5→(1∨6))∪((7→(1∨8))∪((9→(1∨a))∪((b→(1∨c))∪(d→(1∨e)))))), 3]]", "logic_conclusion": "[2, 3, 2, 4]", "correspondance": [{"0": "the Olive Garden is a managed building .", "1": "A deposit is required to rent an apartment in a managed building .", "2": "A deposit is required to rent an apartment in the Olive Garden ."}, {"0": "the security deposit can be either equal to one month 's rent .", "1": "the security deposit can be either equal to more .", "2": "The monthly rent at the Olive Garden is $ 2000 .", "3": "The security deposit at the Olive Garden is either $ 2000 or more ."}, {"0": "$ 2000 is more than $ 1500 .", "1": "The security deposit at The Olive Garden is either $ 2000 or more .", "2": "The security deposit at The Olive Garden is more than $ 1500 ."}, {"0": "X is a more than $ 1500 .", "1": "Tom will not rent an apartment in a managed building that Tom is allowed to move in with Fluffy .", "2": "Tom will not rent an apartment in a managed building that the security deposit is X .", "3": "The security deposit at The Olive Garden is more than $ 1500 .", "4": "Tom will not rent an apartment in The Olive Garden .", "5": "The security deposit at The Olive Garden is a more than $ 1500 .", "6": "Tom will not rent an apartment in a managed building that the security deposit is The security deposit at The Olive Garden .", "7": "the security deposit is a more than $ 1500 .", "8": "Tom will not rent an apartment in a managed building that the security deposit is the security deposit .", "9": "The Olive Garden is a more than $ 1500 .", "a": "Tom will not rent an apartment in a managed building that the security deposit is The Olive Garden .", "b": "Tom is a more than $ 1500 .", "c": "Tom will not rent an apartment in a managed building that the security deposit is Tom .", "d": "Fluffy is a more than $ 1500 .", "e": "Tom will not rent an apartment in a managed building that the security deposit is Fluffy ."}], "errors": [[]], "entailments_dict": [{}, {"3": ["1"], "(¬3)": ["1"]}, {"1": ["0", "2"], "(¬1)": ["0"]}, {"3": ["5", "7"]}], "predicted_steps": [false, false, true, false]}
{"text": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom is allowed to move in an apartment in The Olive Garden with Fluffy?", "id": "94", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: The Olive Garden is a managed building.\nPremise 1.2: Pets are allowed in some managed buildings.\nConclusion 1: It is possible that pets are allowed in The Olive Garden.\n\nPremise 2.1: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nPremise 2.2: The monthly rent at the Olive Garden is $2000.\nPremise 2.3: The security deposit can be either equal to one month's rent or more.\nConclusion 2: The security deposit at The Olive Garden is more than $1500.\n\nPremise 3.1: It is possible that pets are allowed in The Olive Garden.\nPremise 3.2: The security deposit at The Olive Garden is more than $1500.\nConclusion 3: Tom is not allowed to move in an apartment in The Olive Garden with Fluffy.\n\nAnswer: B. No", "logic_premises": "[[0, 1], [((7→(1∨8))∪((9→(1∨a))∪((b→(1∨c))∪((d→(1∨e))∪((f→(1∨g))∪(h→(1∨i))))))), 3, (4∨5)], [0, 1]]", "logic_conclusion": "[2, 6, 2]", "correspondance": [{"0": "the Olive Garden is a managed building .", "1": "Pets are allowed in some managed buildings .", "2": "It is possible that pets are allowed in the Olive Garden ."}, {"0": "X is a more than $ 1500 .", "1": "Tom will not rent an apartment in a managed building that Tom is allowed to move in with Fluffy .", "2": "Tom will not rent an apartment in a managed building that the security deposit is X .", "3": "The monthly rent at the Olive Garden is $ 2000 .", "4": "the security deposit can be either equal to one month 's rent .", "5": "the security deposit can be either equal to more .", "6": "The security deposit at the Olive Garden is more than $ 1500 .", "7": "The monthly rent at the Olive Garden is a more than $ 1500 .", "8": "Tom will not rent an apartment in a managed building that the security deposit is The monthly rent at the Olive Garden .", "9": "The security deposit at The Olive Garden is a more than $ 1500 .", "a": "Tom will not rent an apartment in a managed building that the security deposit is The security deposit at The Olive Garden .", "b": "The security deposit is a more than $ 1500 .", "c": "Tom will not rent an apartment in a managed building that the security deposit is The security deposit .", "d": "the security deposit is a more than $ 1500 .", "e": "Tom will not rent an apartment in a managed building that the security deposit is the security deposit .", "f": "Tom is a more than $ 1500 .", "g": "Tom will not rent an apartment in a managed building that the security deposit is Tom .", "h": "Fluffy is a more than $ 1500 .", "i": "Tom will not rent an apartment in a managed building that the security deposit is Fluffy ."}, {"0": "It is possible that pets are allowed in The Olive Garden .", "1": "The security deposit at The Olive Garden is more than $ 1500 .", "2": "Tom is not allowed to move in an apartment in The Olive Garden with Fluffy ."}], "errors": [[]], "entailments_dict": [{"(¬2)": ["0"]}, {"3": ["7", "(¬a)"], "6": ["b", "d", "9", "(¬8)"], "a": ["(¬3)"], "i": ["(¬3)"], "c": ["(¬3)"]}, {"(¬2)": ["0"]}], "predicted_steps": [false, false, false]}
{"text": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The security deposit at the Olive Garden is either $2000 or more?", "id": "95", "ground_truth": "True", "reasoning": "Premise 1.1: The monthly rent at the Olive Garden is $2000.\nPremise 1.2: The security deposit can be either equal to one month's rent or more.\nConclusion 1: The security deposit at the Olive Garden is either $2000 or more.\nPremise 2.1: The security deposit at the Olive Garden is either $2000 or more.\nAnswer: A. Yes", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "The monthly rent at the Olive Garden is $ 2000 .", "1": "The security deposit can be either equal to one month 's rent or more .", "2": "The security deposit at the Olive Garden is either $ 2000 or more ."}], "errors": [[]], "entailments_dict": [{"2": ["1"]}], "predicted_steps": [false]}
{"text": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Koalas love to sleep?", "id": "96", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: All animals from Australia are loved by tourists.\nPremise 1.2: All quokka are animals from Australia.\nConclusion 1: All quokka are loved by tourists.\nPremise 2.1: If animals are loved by tourists, then they are Max's favorite animals.\nPremise 2.2: All quokka are loved by tourists.\nConclusion 2: All quokka are Max's favorite animals.\nPremise 3.1: All of Max's favorite animals love to sleep.\nPremise 3.2: All quokka are Max's favorite animals.\nConclusion 3: All quokka love to sleep.\nPremise 4.1: If a koala is very fluffy, then the koala is not a quokka.\nPremise 4.2: All of Max's favorite animals are very fluffy.\nConclusion 4: Koalas are not quokka.\nPremise 5.1: All quokka love to sleep.\nPremise 5.2: Koalas are not quokka.\nConclusion 5: The passage does not provide enough information about koalas.\nAnswer: C. Uncertain.", "logic_premises": "[[(0→1), (2→3)], [(0→1), (6→7)], [(0→1), (2→3)], [((0∧1)→2), (3→4)], [(5→6), (7→8)]]", "logic_conclusion": "[(4→5), (8→9), (4→5), (5→6), 4]", "correspondance": [{"0": "X is an animal from Australia .", "1": "X is loved by tourists .", "2": "X is a quokka .", "3": "X is an animal from Australia .", "4": "X is a quokka .", "5": "X is loved by tourists ."}, {"0": "animals are loved by tourists .", "1": "animals are Max 's 's favorite animals .", "2": "X is a quokka .", "3": "X is loved by tourists .", "4": "X is a quokka .", "5": "X is Max 's 's favorite animals .", "6": "Maxs favorite animals is a quokka .", "7": "Maxs favorite animals is loved by tourists .", "8": "Maxs favorite animals is a quokka .", "9": "Maxs favorite animals is Max 's 's favorite animals ."}, {"0": "X is of a Max 's 's favorite animals .", "1": "X loves to sleeps .", "2": "X is a quokka .", "3": "X is Max 's 's favorite animals .", "4": "X is a quokka .", "5": "X loves to sleeps ."}, {"0": "X is a koala", "1": "X is very fluffy .", "2": "X is not a quokka .", "3": "X is of a Max 's favorite animals .", "4": "X is very fluffy .", "5": "X is a Koala .", "6": "X is not quokka ."}, {"0": "X is a quokka .", "1": "X loves to sleeps .", "2": "X is a Koala .", "3": "X is not quokka .", "4": "The passage does not provide enough information about Koalas .", "5": "The passage is a quokka .", "6": "The passage loves to sleeps .", "7": "The passage is a Koala .", "8": "The passage is not quokka ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["2"], "1": ["5"]}, {"7": ["0"], "8": ["6"], "1": ["9"]}, {"3": ["0"], "4": ["2"], "1": ["5"]}, {"4": ["1"], "5": ["0"], "2": ["6"]}, {}], "predicted_steps": [true, true, true, false, false]}
{"text": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Koalas love to sleep and are quokka?", "id": "97", "ground_truth": "False", "reasoning": "Premise 1.1: All animals from Australia are loved by tourists.\nPremise 1.2: All quokka are animals from Australia.\nConclusion 1: All quokka are loved by tourists.\nPremise 2.1: If animals are loved by tourists, then they are Max's favorite animals.\nPremise 2.2: All quokka are loved by tourists.\nConclusion 2: All quokka are Max's favorite animals.\nPremise 3.1: All of Max's favorite animals love to sleep.\nPremise 3.2: All quokka are Max's favorite animals.\nConclusion 3: All quokka love to sleep.\nPremise 4.1: All of Max's favorite animals are very fluffy.\nPremise 4.2: All quokka are Max's favorite animals.\nConclusion 4: All quokka are very fluffy.\nPremise 5.1: If a koala is very fluffy, then the koala is not a quokka.\nPremise 5.2: All quokka are very fluffy.\nConclusion 5: No koala is a quokka.\nPremise 6.1: All quokka love to sleep.\nPremise 6.2: No koala is a quokka.\nAnswer: B. No", "logic_premises": "[[(0→1), (2→3)], [(0→1), (6→7)], [(0→1), (2→3)], [(0→1), (2→3)], [((0∧1)→2), (3→4)]]", "logic_conclusion": "[(4→5), (8→9), (4→5), (4→5), (5→6)]", "correspondance": [{"0": "X is an animal from Australia .", "1": "X is loved by tourists .", "2": "X is a quokka .", "3": "X is an animal from Australia .", "4": "X is a quokka .", "5": "X is loved by tourists ."}, {"0": "animals are loved by tourists .", "1": "animals are Max 's 's favorite animals .", "2": "X is a quokka .", "3": "X is loved by tourists .", "4": "X is a quokka .", "5": "X is Max 's 's favorite animals .", "6": "Maxs favorite animals is a quokka .", "7": "Maxs favorite animals is loved by tourists .", "8": "Maxs favorite animals is a quokka .", "9": "Maxs favorite animals is Max 's 's favorite animals ."}, {"0": "X is of a Max 's 's favorite animals .", "1": "X loves to sleeps .", "2": "X is a quokka .", "3": "X is Max 's 's favorite animals .", "4": "X is a quokka .", "5": "X loves to sleeps ."}, {"0": "X is of a Max 's 's favorite animals .", "1": "X is very fluffy .", "2": "X is a quokka .", "3": "X is Max 's 's favorite animals .", "4": "X is a quokka .", "5": "X is very fluffy ."}, {"0": "X is a koala", "1": "X is very fluffy .", "2": "X is not a quokka .", "3": "X is a quokka .", "4": "X is very fluffy .", "5": "X is a koala .", "6": "X is not a quokka ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["2"], "1": ["5"]}, {"7": ["0"], "8": ["6"], "1": ["9"]}, {"3": ["0"], "4": ["2"], "1": ["5"]}, {"3": ["0"], "4": ["2"], "1": ["5"]}, {"4": ["1"], "5": ["0"], "2": ["6"], "(¬6)": ["3"]}], "predicted_steps": [true, true, true, true, true]}
{"text": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If a koala is a quokka, then the koala either loves to sleep or is very fluffy?", "id": "98", "ground_truth": "True", "reasoning": "Premise 1.1: All quokka are animals from Australia.\nPremise 1.2: All animals from Australia are loved by tourists.\nConclusion 1: All quokka are loved by tourists.\nPremise 2.1: If animals are loved by tourists, then they are Max's favorite animals.\nPremise 2.2: All quokka are loved by tourists.\nConclusion 2: All quokka are Max's favorite animals.\nPremise 3.1: All of Max's favorite animals are very fluffy.\nPremise 3.2: All of Max's favorite animals love to sleep.\nConclusion 3: All quokka are very fluffy and love to sleep.\nPremise 4.1: If a koala is very fluffy, then the koala is not a quokka.\nPremise 4.2: All quokka are very fluffy.\nConclusion 4: If a koala is a quokka, then the koala is not very fluffy.\nPremise 5.1: If a koala is a quokka, then the koala is not very fluffy.\nPremise 5.2: All quokka love to sleep.\nConclusion 5: If a koala is a quokka, then the koala loves to sleep.\nPremise 6.1: If a koala is a quokka, then the koala is not very fluffy.\nPremise 6.2: If a koala is a quokka, then the koala loves to sleep.\nConclusion 6: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nAnswer: A. Yes", "logic_premises": "[[(0→1), (2→3)], [(0→1), (6→7)], [(0→1), (2→3)], [((0∧1)→2), (3→4)], [((0∧1)→2), (3→4)], [((0∧1)→2), ((3∧4)→5)]]", "logic_conclusion": "[(4→5), (8→9), (4→(5∧6)), ((5∧6)→7), ((5∧6)→7), ((6∧7)→(8⊻9))]", "correspondance": [{"0": "X is a quokka .", "1": "X is an animal from Australia .", "2": "X is an animal from Australia .", "3": "X is loved by tourists .", "4": "X is a quokka .", "5": "X is loved by tourists ."}, {"0": "animals are loved by tourists .", "1": "animals are Max 's 's favorite animals .", "2": "X is a quokka .", "3": "X is loved by tourists .", "4": "X is a quokka .", "5": "X is Max 's 's favorite animals .", "6": "Maxs favorite animals is a quokka .", "7": "Maxs favorite animals is loved by tourists .", "8": "Maxs favorite animals is a quokka .", "9": "Maxs favorite animals is Max 's 's favorite animals ."}, {"0": "X is of a Max 's 's favorite animals .", "1": "X is very fluffy .", "2": "X is of a Max 's 's favorite animals .", "3": "X loves to sleeps .", "4": "X is a quokka .", "5": "X is very fluffy .", "6": "X loves to sleeps ."}, {"0": "X is a koala", "1": "X is very fluffy .", "2": "X is not a quokka .", "3": "X is a quokka .", "4": "X is very fluffy .", "5": "X is a koala", "6": "X is a quokka .", "7": "X is not very fluffy ."}, {"0": "X is a koala", "1": "X is a quokka .", "2": "X is not very fluffy .", "3": "X is a quokka .", "4": "X loves to sleeps .", "5": "X is a koala", "6": "X is a quokka .", "7": "X loves to sleep ."}, {"0": "X is a koala", "1": "X is a quokka .", "2": "X is not very fluffy .", "3": "X is a koala", "4": "X is a quokka .", "5": "X loves to sleep .", "6": "X is a koala", "7": "X is a quokka .", "8": "X loves to sleep .", "9": "X is very fluffy ."}], "errors": [[]], "entailments_dict": [{"1": ["2"], "4": ["0"], "3": ["5"]}, {"7": ["0"], "8": ["6"], "1": ["9"]}, {"1": ["5"], "3": ["6"]}, {"4": ["1"], "6": ["3", "(¬2)"], "5": ["0"], "(¬7)": ["1"]}, {"6": ["1", "3"], "5": ["0"], "4": ["7"]}, {"7": ["1", "4"], "6": ["0", "3"], "5": ["8"]}], "predicted_steps": [true, true, false, false, true, false]}
{"text": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Harry is a CEO?", "id": "99", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: All CEOs are gentlemen.\nPremise 1.2: Harry is a gentleman.\nConclusion 1: It is possible that Harry is a CEO, but we can't conclude it yet.\n\nPremise 2.1: The passage doesn't provide enough information to conclude that Harry is a CEO.\nAnswer: C. Uncertain.", "logic_premises": "[[(5→6), 2]]", "logic_conclusion": "[(3∧4)]", "correspondance": [{"0": "X is a CEO .", "1": "X is a gentleman .", "2": "Harry is a gentleman .", "3": "It is possible that Harry is a CEO .", "4": "we ca n't conclude it yet .", "5": "Harry is a CEO .", "6": "Harry is a gentleman ."}], "errors": [[]], "entailments_dict": [{"6": ["2"]}], "predicted_steps": [false]}
{"text": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Harry is kind or a CEO?", "id": "100", "ground_truth": "True", "reasoning": "Premise 1.1: All CEOs are gentlemen.\nPremise 1.2: Harry is a gentleman.\nConclusion 1: Harry is a CEO or Harry is not a CEO (but we can't conclude which one).\n\nPremise 2.1: All gentlemen are handsome.\nPremise 2.2: Harry is a gentleman.\nConclusion 2: Harry is handsome.\n\nPremise 3.1: No ugly person is handsome.\nPremise 3.2: Harry is handsome.\nConclusion 3: Harry is not ugly.\n\nPremise 4.1: All evil people are ugly.\nPremise 4.2: Harry is not ugly.\nConclusion 4: Harry is not evil.\n\nPremise 5.1: A man is either kind or evil.\nPremise 5.2: Harry is not evil.\nConclusion 5: Harry is kind.\n\nPremise 6.1: Harry is a CEO or Harry is not a CEO.\nPremise 6.2: Harry is kind.\nConclusion 6: Harry is kind or Harry is a CEO.\nAnswer: A. Yes", "logic_premises": "[[(5→6), 2], [(4→5), 2], [(4→5), 2], [(4→5), 2], [(0⊻1), 2], [(0∨1), 2]]", "logic_conclusion": "[(3∨4), 3, 3, 3, 3, (3∨4)]", "correspondance": [{"0": "X is a CEO .", "1": "X is a gentleman .", "2": "Harry is a gentleman .", "3": "Harry is a CEO .", "4": "Harry is not a CEO .", "5": "Harry is a CEO .", "6": "Harry is a gentleman ."}, {"0": "X is a gentleman .", "1": "X is handsome .", "2": "Harry is a gentleman .", "3": "Harry is handsome .", "4": "Harry is a gentleman .", "5": "Harry is handsome ."}, {"0": "X is an ugly person .", "1": "X is not handsome .", "2": "Harry is handsome .", "3": "Harry is not ugly .", "4": "Harry is an ugly person .", "5": "Harry is not handsome ."}, {"0": "X is an evil person .", "1": "X is ugly .", "2": "Harry is not ugly .", "3": "Harry is not evil .", "4": "Harry is an evil person .", "5": "Harry is ugly ."}, {"0": "A man is kind .", "1": "A man is evil .", "2": "Harry is not evil .", "3": "Harry is kind ."}, {"0": "Harry is a CEO .", "1": "Harry is not a CEO .", "2": "Harry is kind .", "3": "Harry is kind .", "4": "Harry is a CEO ."}], "errors": [[]], "entailments_dict": [{"6": ["2"], "3": ["5"], "(¬4)": ["5"]}, {"2": ["4"], "5": ["3"]}, {"3": ["2"], "2": ["3", "(¬5)"], "5": ["(¬2)"], "(¬3)": ["4"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"3": ["0", "2", "(¬1)"], "0": ["(¬1)"]}, {"4": ["0", "(¬1)"], "3": ["2"], "0": ["4"], "2": ["3"], "(¬4)": ["1"]}], "predicted_steps": [false, true, true, true, false, true]}
{"text": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO?", "id": "101", "ground_truth": "False", "reasoning": "Premise 1.1: All CEOs are gentlemen.\nPremise 1.2: Harry is a gentleman.\nConclusion 1: Harry is a CEO.\nPremise 2.1: All gentlemen are handsome.\nPremise 2.2: Harry is a gentleman.\nConclusion 2: Harry is handsome.\nPremise 3.1: All evil people are ugly.\nPremise 3.2: Harry is handsome.\nConclusion 3: Harry is not evil.\nPremise 4.1: A man is either kind or evil.\nPremise 4.2: Harry is not evil.\nConclusion 4: Harry is kind.\nPremise 5.1: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nPremise 5.2: Harry is kind and a CEO.\nConclusion 5: The premise 5.1 is false.\nAnswer: B. No", "logic_premises": "[[(4→5), 2], [(4→5), 2], [(4→5), 2], [(0⊻1), 2], [(0∧1), 2]]", "logic_conclusion": "[3, 3, 3, 3, 3]", "correspondance": [{"0": "X is a CEO .", "1": "X is a gentleman .", "2": "Harry is a gentleman .", "3": "Harry is a CEO .", "4": "Harry is a CEO .", "5": "Harry is a gentleman ."}, {"0": "X is a gentleman .", "1": "X is handsome .", "2": "Harry is a gentleman .", "3": "Harry is handsome .", "4": "Harry is a gentleman .", "5": "Harry is handsome ."}, {"0": "X is an evil person .", "1": "X is ugly .", "2": "Harry is handsome .", "3": "Harry is not evil .", "4": "Harry is an evil person .", "5": "Harry is ugly ."}, {"0": "A man is kind .", "1": "A man is evil .", "2": "Harry is not evil .", "3": "Harry is kind ."}, {"0": "If Harry is not either both evil and ugly , or neither evil nor ugly , that then Harry is kind .", "1": "If Harry is not either both evil and ugly , or neither evil nor ugly , that then Harry is a CEO .", "2": "Harry is kind and a CEO .", "3": "The premise 5.1 is false ."}], "errors": [[]], "entailments_dict": [{"5": ["2"], "3": ["4"]}, {"2": ["4"], "5": ["3"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"3": ["0", "2", "(¬1)"], "0": ["(¬1)"]}, {"2": ["0", "1"]}], "predicted_steps": [false, true, true, false, false]}
{"text": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Luke spends a lot of time hanging out and playing with his siblings?", "id": "102", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nPremise 1.2: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nConclusion 1: If Luke is a twin or triplet, then he spends a lot of time hanging out with and playing with his siblings.\nPremise 2.1: If people do not develop strong bonds with their family members, then they do not live at home regularly.\nPremise 2.2: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nConclusion 2: If Luke develops strong bonds with his family members, then he spends a lot of time hanging out with and playing with his siblings.\nPremise 3.1: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nConclusion 3: Luke spends a lot of time hanging out with and playing with his siblings.\nAnswer: A. Yes", "logic_premises": "[[((0∧1)⊻(2∧3)), ((a∨b)→c)], [(6→7), (8→9)], [((0∧1)⊻(2∧3))]]", "logic_conclusion": "[((7∨8)→9), (4→5), 4]", "correspondance": [{"0": "Luke is a twin or triplet .", "1": "Luke develops strong bonds with Luke 's family members .", "2": "Luke is not a twin or triplet .", "3": "Luke does not develop strong bonds with Luke 's family members .", "4": "X are twins .", "5": "X are triplets .", "6": "X spend a lot of time hanging out with and playing with X 's siblings .", "7": "Luke is a twin .", "8": "Luke is a triplet .", "9": "Luke spends a lot of time hanging out with and playing with Luke 's siblings .", "a": "Luke are twins .", "b": "Luke are triplets .", "c": "Luke spend a lot of time hanging out with and playing with Luke 's siblings ."}, {"0": "X do not develop strong bonds with people 's family members .", "1": "X do not live at home regularly .", "2": "X spend a lot of time hanging out with and playing with people 's siblings .", "3": "X often did not live at home regularly .", "4": "Luke develops strong bonds with Luke 's family members .", "5": "Luke spends a lot of time hanging out with and playing with Luke 's siblings .", "6": "Luke do not develop strong bonds with people 's family members .", "7": "Luke do not live at home regularly .", "8": "Luke spend a lot of time hanging out with and playing with people 's siblings .", "9": "Luke often did not live at home regularly ."}, {"0": "Luke is a twin or triplet .", "1": "Luke develops strong bonds with Luke 's family members .", "2": "Luke is not a twin or triplet .", "3": "Luke does not develop strong bonds with Luke 's family members .", "4": "Luke spends a lot of time hanging out with and playing with Luke 's siblings ."}], "errors": [[]], "entailments_dict": [{"0": ["b", "a", "(¬2)"], "7": ["a", "(¬2)"], "8": ["0", "b", "(¬2)"], "c": ["9", "(¬3)"], "3": ["(¬c)"], "1": ["(¬3)"], "(¬2)": ["b", "a"], "(¬b)": ["2"]}, {"4": ["(¬7)"]}, {"4": ["(¬3)"], "0": ["(¬2)"], "1": ["(¬3)"]}], "predicted_steps": [true, false, false]}
{"text": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Luke complains often about annoying siblings?", "id": "103", "ground_truth": "False", "reasoning": "Premise 1.1: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nConclusion 1: Luke is either a twin or triplet or not a twin or triplet.\n\nPremise 2.1: If people have siblings who are the same age, then they are twins or triplets.\nPremise 2.2: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nPremise 2.3: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nPremise 2.4: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nConclusion 2: If Luke is a twin or triplet, then he does not develop strong bonds with his family members.\n\nPremise 3.1: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nPremise 3.2: If Luke is a twin or triplet, then he does not develop strong bonds with his family members.\nConclusion 3: Luke is neither a twin or triplet nor develops strong bonds with his family members.\n\nPremise 4.1: If people complain often about annoying siblings, then they have siblings who are the same age.\nPremise 4.2: If people have siblings who are the same age, then they are twins or triplets.\nPremise 4.3: Luke is neither a twin or triplet nor develops strong bonds with his family members.\nConclusion 4: Luke does not complain often about annoying siblings.\nAnswer: B. No", "logic_premises": "[[((0∧1)⊻(2∧3))], [((d→(e∨f))∪(g→(h∨i))), (((j∨k)→l)∪((m∨n)→o)), ((p→q)∪(r→s)), ((t→u)∪(v→w))], [((0∧1)⊻(2∧3)), ((4∨5)→6)], [((9→a)∪(b→c)), ((d→(3∨4))∪(e→(3∨4))), ((5∨6)∧7)]]", "logic_conclusion": "[((4∨5)⊻(6∨7)), ((a∨b)→c), ((7∨8)∧9), 8]", "correspondance": [{"0": "Luke is a twin or triplet .", "1": "Luke develops strong bonds with Luke 's family members .", "2": "Luke is not a twin or triplet .", "3": "Luke does not develop strong bonds with Luke 's family members .", "4": "Luke is a twin .", "5": "Luke is a triplet .", "6": "Luke is a twin .", "7": "Luke is a triplet ."}, {"0": "X have siblings who are the same age .", "1": "X are twins .", "2": "X are triplets .", "3": "X are twins .", "4": "X are triplets .", "5": "X spend a lot of time hanging out with and playing with X 's siblings .", "6": "X spend a lot of time hanging out with and playing with people 's siblings .", "7": "X often did not live at home regularly .", "8": "X do not live at home regularly .", "9": "X do not develop strong bonds with X 's family members .", "a": "Luke is a twin .", "b": "Luke is a triplet .", "c": "Luke does not develop strong bonds with Luke 's family members .", "d": "Luke have siblings who are the same age .", "e": "Luke are twins .", "f": "Luke are triplets .", "g": "the same age have siblings who are the same age .", "h": "the same age are twins .", "i": "the same age are triplets .", "j": "Luke are twins .", "k": "Luke are triplets .", "l": "Luke spend a lot of time hanging out with and playing with Luke 's siblings .", "m": "the same age are twins .", "n": "the same age are triplets .", "o": "the same age spend a lot of time hanging out with and playing with the same age 's siblings .", "p": "Luke spend a lot of time hanging out with and playing with people 's siblings .", "q": "Luke often did not live at home regularly .", "r": "the same age spend a lot of time hanging out with and playing with people 's siblings .", "s": "the same age often did not live at home regularly .", "t": "Luke do not live at home regularly .", "u": "Luke do not develop strong bonds with Luke 's family members .", "v": "the same age do not live at home regularly .", "w": "the same age do not develop strong bonds with the same age 's family members ."}, {"0": "Luke is a twin or triplet .", "1": "Luke develops strong bonds with Luke 's family members .", "2": "Luke is not a twin or triplet .", "3": "Luke does not develop strong bonds with Luke 's family members .", "4": "Luke is a twin .", "5": "Luke is a triplet .", "6": "Luke does not develop strong bonds with Luke 's family members .", "7": "Luke is neither a twin .", "8": "Luke is neither a triplet .", "9": "Luke does not develop strong bonds with Luke 's family members ."}, {"0": "X complain often about annoying siblings .", "1": "X have siblings who are the same age .", "2": "X have siblings who are the same age .", "3": "they are twins .", "4": "they are triplets .", "5": "Luke is neither a twin .", "6": "Luke is neither a triplet .", "7": "Luke does not develop strong bonds with Luke 's family members .", "8": "Luke does not complain often about annoying siblings .", "9": "Luke complain often about annoying siblings .", "a": "Luke have siblings who are the same age .", "b": "the same age complain often about annoying siblings .", "c": "the same age have siblings who are the same age .", "d": "Luke have siblings who are the same age .", "e": "the same age have siblings who are the same age ."}], "errors": [[]], "entailments_dict": [{"7": ["0", "(¬2)"], "5": ["0", "(¬2)"], "0": ["4", "6", "(¬2)"], "4": ["(¬2)"], "6": ["(¬2)"], "1": ["(¬3)"], "(¬7)": ["2"], "(¬5)": ["2"]}, {"e": ["j"], "o": ["r", "(¬w)", "(¬u)"], "i": ["n"], "h": ["m"], "f": ["k"], "q": ["t", "(¬l)"], "a": ["g", "d", "j", "(¬f)", "(¬i)"], "b": ["g", "k", "(¬h)", "(¬e)"], "u": ["c", "(¬l)", "(¬o)"], "l": ["(¬w)", "(¬u)", "(¬q)", "(¬s)"], "w": ["(¬o)", "(¬l)"]}, {"0": ["4", "(¬2)"], "6": ["3", "9", "(¬1)"], "8": ["2", "(¬0)"], "9": ["3", "(¬1)"], "2": ["7", "8"], "3": ["9"], "1": ["(¬6)", "(¬3)"], "7": ["(¬0)"], "(¬8)": ["2"], "(¬9)": ["1"], "(¬5)": ["2"], "(¬2)": ["4"]}, {"c": ["e"], "a": ["d"], "3": ["(¬5)"], "4": ["(¬6)"], "6": ["(¬c)", "(¬3)", "(¬4)"], "5": ["(¬3)", "(¬4)"], "(¬8)": ["9"]}], "predicted_steps": [false, false, false, false]}
{"text": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Luke is neither a twin nor triplet nor complains often about annoying siblings?", "id": "104", "ground_truth": "True", "reasoning": "Premise 1.1: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nPremise 1.2: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nPremise 1.3: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nConclusion 1: If Luke is a twin or triplet, then he often did not live at home regularly.\n\nPremise 2.1: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nPremise 2.2: Luke develops strong bonds with his family members.\nConclusion 2: Luke lives at home regularly.\n\nPremise 3.1: Luke lives at home regularly.\nPremise 3.2: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nConclusion 3: Luke is not a twin or triplet.\n\nPremise 4.1: If people have siblings who are the same age, then they are twins or triplets.\nPremise 4.2: Luke is not a twin or triplet.\nConclusion 4: Luke does not have siblings who are the same age.\n\nPremise 5.1: If people complain often about annoying siblings, then they have siblings who are the same age.\nPremise 5.2: Luke does not have siblings who are the same age.\nConclusion 5: Luke does not complain often about annoying siblings.\n\nPremise 6.1: Luke is neither a twin or triplet nor complains often about annoying siblings.\nAnswer: A. Yes", "logic_premises": "[[((0∧1)⊻(2∧3)), (c→d), ((e∨f)→g)], [(4→5), 2], [0, ((6∨7)→8)], [((6→(1∨2))∪(7→(1∨2))), (3∨4)], [((4→5)∪(6→7)), 2]]", "logic_conclusion": "[((9∨a)→b), 3, (4∨5), 5, 3]", "correspondance": [{"0": "Luke is a twin or triplet .", "1": "Luke develops strong bonds with Luke 's family members .", "2": "Luke is not a twin or triplet .", "3": "Luke does not develop strong bonds with Luke 's family members .", "4": "X spend a lot of time hanging out with and playing with people 's siblings .", "5": "X often did not live at home regularly .", "6": "X are twins .", "7": "X are triplets .", "8": "X spend a lot of time hanging out with and playing with X 's siblings .", "9": "Luke is a twin .", "a": "Luke is a triplet .", "b": "Luke often did not live at home regularly .", "c": "Luke spend a lot of time hanging out with and playing with people 's siblings .", "d": "Luke often did not live at home regularly .", "e": "Luke are twins .", "f": "Luke are triplets .", "g": "Luke spend a lot of time hanging out with and playing with Luke 's siblings ."}, {"0": "X do not live at home regularly .", "1": "X do not develop strong bonds with X 's family members .", "2": "Luke develops strong bonds with Luke 's family members .", "3": "Luke lives at home regularly .", "4": "Luke do not live at home regularly .", "5": "Luke do not develop strong bonds with Luke 's family members ."}, {"0": "Luke lives at home regularly .", "1": "X are twins .", "2": "X are triplets .", "3": "X spend a lot of time hanging out with and playing with X 's siblings .", "4": "Luke is not a twin .", "5": "Luke is not a triplet .", "6": "Luke are twins .", "7": "Luke are triplets .", "8": "Luke spend a lot of time hanging out with and playing with Luke 's siblings ."}, {"0": "X have siblings who are the same age .", "1": "they are twins .", "2": "they are triplets .", "3": "Luke is not a twin .", "4": "Luke is not a triplet .", "5": "Luke does not have siblings who are the same age .", "6": "Luke have siblings who are the same age .", "7": "the same age have siblings who are the same age ."}, {"0": "X complain often about annoying siblings .", "1": "X have siblings who are the same age .", "2": "Luke does not have siblings who are the same age .", "3": "Luke does not complain often about annoying siblings .", "4": "Luke complain often about annoying siblings .", "5": "Luke have siblings who are the same age .", "6": "the same age complain often about annoying siblings .", "7": "the same age have siblings who are the same age ."}], "errors": [[]], "entailments_dict": [{"0": ["e", "f", "(¬2)"], "a": ["0", "f", "(¬2)"], "9": ["e", "(¬2)"], "d": ["b", "(¬g)"], "3": ["(¬g)"], "g": ["(¬d)", "(¬3)"], "1": ["(¬3)"], "(¬2)": ["e", "f"], "(¬f)": ["2"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "3": ["(¬5)"], "(¬3)": ["4"]}, {"(¬4)": ["6"], "(¬5)": ["7"]}, {"3": ["(¬1)"], "4": ["(¬2)"], "5": ["(¬1)"], "(¬5)": ["6"], "(¬3)": ["7", "6"], "(¬4)": ["7"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}], "predicted_steps": [false, true, false, false, true]}
{"text": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom can apply for financial aid from ETS to take the GRE test?", "id": "105", "ground_truth": "True", "reasoning": "Premise 1.1: Tom lives in a single-parent family.\nPremise 1.2: His dad has been out of work for more than a year.\nConclusion 1: Tom's family has too little money or too few resources.\nPremise 2.1: Tom's family has too little money or too few resources.\nPremise 2.2: Economic hardship refers to difficulty caused by having too little money or too few resources.\nConclusion 2: Tom's family is experiencing economic hardship.\nPremise 3.1: Tom's family is experiencing economic hardship.\nPremise 3.2: ETS provides financial aid to those GRE applicants who prove economic hardship.\nConclusion 3: Tom can apply for financial aid from ETS to take the GRE test.\nAnswer: A. Yes", "logic_premises": "[[0, 1], [(0∨1), (2∨3)], [0, 1]]", "logic_conclusion": "[(2∨3), 4, (2∧3)]", "correspondance": [{"0": "Tom lives in a single - parent family .", "1": "Tom 's dad has been out of work for more than a year .", "2": "Tom 's family has too little money .", "3": "Tom 's family has too few resources ."}, {"0": "Tom 's 's family has too little money .", "1": "Tom 's 's family has too few resources .", "2": "Economic hardship refers to difficulty caused by having too little money .", "3": "Economic hardship refers to difficulty caused by having too few resources .", "4": "Tom 's 's family is experiencing economic hardship ."}, {"0": "Tom 's 's family is experiencing economic hardship .", "1": "ETS provides financial aid to those GRE applicants who prove economic hardship .", "2": "take the GRE test .", "3": "Tom 's can apply for financial aid from ETS ."}], "errors": [[]], "entailments_dict": [{}, {"0": ["3", "4"], "4": ["0", "1", "2", "3"], "1": ["4"]}, {"1": ["2"]}], "predicted_steps": [false, true, false]}
{"text": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that It cost below US $300 to take the GRE test?", "id": "106", "ground_truth": "True", "reasoning": "Premise 1.1: Tom's dad has been out of work for more than a year.\nPremise 1.2: Tom lives in a single-parent family.\nConclusion 1: Tom's family has too little money or too few resources.\nPremise 2.1: Tom's family has too little money or too few resources.\nPremise 2.2: Economic hardship refers to difficulty caused by having too little money or too few resources.\nConclusion 2: Tom's family faces economic hardship.\nPremise 3.1: Tom's family faces economic hardship.\nPremise 3.2: ETS provides financial aid to those GRE applicants who prove economic hardship.\nConclusion 3: Tom will receive financial aid.\nPremise 4.1: It costs US $205 to take the GRE test.\nPremise 4.2: Tom will receive financial aid.\nConclusion 4: It will cost Tom less than US $205 to take the GRE test.\nPremise 5.1: It will cost Tom less than US $205 to take the GRE test.\nConclusion 5: It will cost Tom below US $300 to take the GRE test.\nAnswer: A. Yes", "logic_premises": "[[0, 1], [(0∨1), (2∨3)], [0, 1], [(0∧1), 2], [(0∧1)]]", "logic_conclusion": "[(2∨3), 4, 2, (3∧4), (2∧3)]", "correspondance": [{"0": "Tom 's 's dad has been out of work for more than a year .", "1": "Tom 's lives in a single - parent family .", "2": "Tom 's 's family has too little money .", "3": "Tom 's 's family has too few resources ."}, {"0": "Tom 's 's family has too little money .", "1": "Tom 's 's family has too few resources .", "2": "Economic hardship refers to difficulty caused by having too little money .", "3": "Economic hardship refers to difficulty caused by having too few resources .", "4": "Tom 's 's family faces economic hardship ."}, {"0": "Tom 's 's family faces economic hardship .", "1": "ETS provides financial aid to those GRE applicants who prove economic hardship .", "2": "Tom 's will receive financial aid ."}, {"0": "take the GRE test .", "1": "It costs US $ 205 .", "2": "Tom will receive financial aid .", "3": "take the GRE test .", "4": "It will cost Tom less than US $ 205 ."}, {"0": "take the GRE test .", "1": "It will cost Tom less than US $ 205 .", "2": "take the GRE test .", "3": "It will cost Tom below US $ 300 ."}], "errors": [[]], "entailments_dict": [{"0": ["(¬1)"]}, {"0": ["3", "4"], "4": ["0", "1"], "1": ["4"]}, {}, {"3": ["0"], "0": ["3"], "4": ["(¬1)"], "(¬4)": ["1"]}, {"2": ["0"], "0": ["2"], "1": ["3"]}], "predicted_steps": ["Contradiction in the premises", true, false, false, true]}
{"text": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that There is no financial aid available for the GRE test?", "id": "107", "ground_truth": "False", "reasoning": "Premise 1.1: Tom lives in a single-parent family. His dad has been out of work for more than a year.\nConclusion 1: Tom's family has too little money or too few resources.\nPremise 2.1: Tom's family has too little money or too few resources.\nPremise 2.2: Economic hardship refers to difficulty caused by having too little money or too few resources.\nConclusion 2: Tom's family faces economic hardship.\nPremise 3.1: Tom's family faces economic hardship.\nPremise 3.2: ETS provides financial aid to those GRE applicants who prove economic hardship.\nConclusion 3: Financial aid is available for Tom.\nPremise 4.1: Financial aid is available for Tom.\nAnswer: B. No", "logic_premises": "[[], [(0∨1), (2∨3)], [0, 1]]", "logic_conclusion": "['-1', 4, 2]", "correspondance": [{}, {"0": "Tom 's 's family has too little money .", "1": "Tom 's 's family has too few resources .", "2": "Economic hardship refers to difficulty caused by having too little money .", "3": "Economic hardship refers to difficulty caused by having too few resources .", "4": "Tom 's 's family faces economic hardship ."}, {"0": "Tom 's 's family faces economic hardship .", "1": "ETS provides financial aid to those GRE applicants who prove economic hardship .", "2": "Financial aid is available for Tom 's ."}], "errors": ["Logic Transform Error -  Step n°: 0 The given 'sentence' contains more than one sentence. A ConstituentTree object can process only one sentence at a time.", ["Entailments Error -  Step n°: 0 'str' object has no attribute 'get_variables_implications'"]], "entailments_dict": [{}, {"0": ["3", "4"], "4": ["0", "1"], "1": ["4"]}, {}], "predicted_steps": [false, true, false]}
{"text": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Peter tidies his space consistently and enjoys the process of cleaning?", "id": "108", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nConclusion 1: Peter is either a foodie who goes out frequently to find new food restaurants to try or he grew up as an only child with no siblings.\n\nPremise 2.1: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nPremise 2.2: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\nConclusion 2: If Peter is a foodie, then he does not tidy his space consistently and enjoy the process of cleaning.\n\nPremise 3.1: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\nPremise 3.2: Peter is either a foodie or grew up as an only child with no siblings.\nConclusion 3: Peter tidies his space consistently and enjoys the process of cleaning.\n\nAnswer: A. Yes", "logic_premises": "[[((0→1)⊻(2→3))], [((8→9)∪(a→b)), ((c→(d∧e))∪(f→(g∧h)))], [((8→(9∧a))∪(b→(c∧d))), ((e→(4⊻f))∪(g→(4⊻h)))]]", "logic_conclusion": "[(4⊻(5→6)), (5→(6∧7)), (6∧7)]", "correspondance": [{"0": "X is both an a person who spills a lot of food on Peter 's clothing and grew up as an only child with a sibling .", "1": "Peter is not X .", "2": "X is neither an a person who spills a lot of food on Peter 's clothing nor grew up as an only child with a sibling .", "3": "Peter is not X .", "4": "Peter is a foodie who goes out frequently to find new food restaurants to try .", "5": "X is an only child with a sibling .", "6": "Peter did not grow up as X ."}, {"0": "X is a foody who goes out frequently to finds new food restaurants to tries .", "1": "X is a people who spills a lot of food on their clothing .", "2": "X spill a lot of food on people 's clothing .", "3": "X do not tidy X 's spaces consistently .", "4": "X do not enjoy the process of cleaning .", "5": "Peter is a foodie .", "6": "Peter does not tidy Peter 's space consistently .", "7": "Peter does not enjoy the process of cleaning .", "8": "the process of cleaning is a foody who goes out frequently to finds new food restaurants to tries .", "9": "the process of cleaning is a people who spills a lot of food on their clothing .", "a": "Peter is a foody who goes out frequently to finds new food restaurants to tries .", "b": "Peter is a people who spills a lot of food on their clothing .", "c": "the process of cleaning spill a lot of food on people 's clothing .", "d": "the process of cleaning do not tidy the process of cleaning 's spaces consistently .", "e": "the process of cleaning do not enjoy the process of cleaning .", "f": "Peter spill a lot of food on people 's clothing .", "g": "Peter do not tidy Peter 's spaces consistently .", "h": "Peter do not enjoy the process of cleaning ."}, {"0": "X grew up as only children with no siblings .", "1": "X tidy X 's spaces consistently .", "2": "X enjoy the process of cleaning .", "3": "X is an only child with a sibling .", "4": "Peter is not a foodie .", "5": "Peter did not grow up as X .", "6": "Peter tidies Peter 's space consistently .", "7": "Peter enjoys the process of cleaning .", "8": "the process of cleaning grew up as only children with no siblings .", "9": "the process of cleaning tidy the process of cleaning 's spaces consistently .", "a": "the process of cleaning enjoy the process of cleaning .", "b": "Peter grew up as only children with no siblings .", "c": "Peter tidy Peter 's spaces consistently .", "d": "Peter enjoy the process of cleaning .", "e": "the process of cleaning is an only child with a sibling .", "f": "Peter did not grow up as the process of cleaning .", "g": "Peter is an only child with a sibling .", "h": "Peter did not grow up as Peter ."}], "errors": [[]], "entailments_dict": [{"5": ["(¬1)", "(¬3)"], "0": ["(¬2)"], "1": ["(¬2)"]}, {"9": ["c"], "b": ["f"], "h": ["7"], "g": ["6", "(¬9)"], "5": ["(¬9)"]}, {"d": ["7"], "c": ["6", "(¬f)"], "f": ["(¬c)"], "6": ["(¬f)"]}], "predicted_steps": [false, false, false]}
{"text": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income?", "id": "109", "ground_truth": "False", "reasoning": "Premise 1.1: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nConclusion 1: Peter is either a person who spills a lot of food on his clothing or grew up as an only child with no siblings.\n\nPremise 2.1: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nPremise 2.2: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\nPremise 2.3: All households with a high net income have people who have parents who are very busy with their regular jobs.\nConclusion 2: If Peter is a person who spills a lot of food on his clothing, then he is a foodie who goes out frequently to find new food restaurants to try. If Peter grew up as an only child with no siblings, then he belongs to a household with a high net income.\n\nPremise 3.1: Peter is either a person who spills a lot of food on his clothing or grew up as an only child with no siblings.\nPremise 3.2: If Peter is a person who spills a lot of food on his clothing, then he is a foodie who goes out frequently to find new food restaurants to try. If Peter grew up as an only child with no siblings, then he belongs to a household with a high net income.\nConclusion 3: Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.\nAnswer: A. Yes", "logic_premises": "[[((0→1)⊻(2→3))], [], []]", "logic_conclusion": "[(4→5), '-1', '-1']", "correspondance": [{"0": "X is both an a person who spills a lot of food on Peter 's clothing and grew up as an only child with a sibling .", "1": "Peter is not X .", "2": "X is neither an a person who spills a lot of food on Peter 's clothing nor grew up as an only child with a sibling .", "3": "Peter is not X .", "4": "X is either an a person who spills a lot of food on Peter 's clothing or grew up as an only child with a sibling .", "5": "Peter is not X ."}, {"0": "X is a foody who goes out frequently to finds new food restaurants to tries .", "1": "X is a people who spills a lot of food on their clothing .", "2": "X have parents who are very busy with their regular jobs .", "3": "X grew up as only children with no siblings .", "4": "X is a household with a high net income .", "5": "X has people who has parents who is very busy with their regular jobs ."}, {"0": "X is either an a person who spills a lot of food on Peter 's clothing or grew up as an only child with a sibling .", "1": "Peter is not X ."}], "errors": ["Logic Transform Error -  Step n°: 1 The given 'sentence' contains more than one sentence. A ConstituentTree object can process only one sentence at a time.", "Logic Transform Error -  Step n°: 2 The given 'sentence' contains more than one sentence. A ConstituentTree object can process only one sentence at a time.", ["Entailments Error -  Step n°: 1 'str' object has no attribute 'get_variables_implications'", "Entailments Error -  Step n°: 2 'str' object has no attribute 'get_variables_implications'"]], "entailments_dict": [{"1": ["5", "(¬2)"], "3": ["5"], "0": ["(¬2)"]}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income?", "id": "110", "ground_truth": "True", "reasoning": "Premise 1.1: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nConclusion 1: Peter is either a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither.\n\nPremise 2.1: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nPremise 2.2: Peter is either a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither.\nConclusion 2: Peter is either a foodie who goes out frequently to find new food restaurants to try and grew up as an only child with no siblings, or he is neither a foodie who goes out frequently to find new food restaurants to try nor grew up as an only child with no siblings.\n\nPremise 3.1: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\nPremise 3.2: All households with a high net income have people who have parents who are very busy with their regular jobs.\nConclusion 3: Peter is either a foodie who goes out frequently to find new food restaurants to try and belongs to a household with a high net income, or he is neither a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.\n\nPremise 4.1: Peter is either a foodie who goes out frequently to find new food restaurants to try and belongs to a household with a high net income, or he is neither a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.\nAnswer: A. Yes", "logic_premises": "[[((0→1)⊻(2→3))], [(0→1), ((2→3)⊻4)], [(7→8), (9→a)]]", "logic_conclusion": "[((4→5)⊻6), ((5→6)⊻(7→8)), (4⊻(5∧6))]", "correspondance": [{"0": "X is both an a person who spills a lot of food on Peter 's clothing and grew up as an only child with a sibling .", "1": "Peter is not X .", "2": "X is neither an a person who spills a lot of food on Peter 's clothing nor grew up as an only child with a sibling .", "3": "Peter is not X .", "4": "X is a person who spills a lot of food on Peter 's clothing and grew up as an only child with a sibling .", "5": "Peter is not X .", "6": "Peter is neither ."}, {"0": "X is a foody who goes out frequently to finds new food restaurants to tries .", "1": "X is a people who spills a lot of food on their clothing .", "2": "X is a person who spills a lot of food on Peter 's clothing and grew up as an only child with a sibling .", "3": "Peter is not X .", "4": "Peter is neither .", "5": "X is a foodie who goes out frequently to finds new food restaurants to tries and grew up as an only child with a sibling .", "6": "Peter is not X .", "7": "X is neither an a foodie who goes out frequently to finds new food restaurants to tries nor grew up as an only child with a sibling .", "8": "Peter is not X ."}, {"0": "X have parents who are very busy with their regular jobs .", "1": "X grew up as only children with no siblings .", "2": "X is a household with a high net income .", "3": "X has people who has parents who is very busy with their regular jobs .", "4": "Peter is a foodie who goes out frequently to find new food restaurants to try and belongs to a household with a high net income .", "5": "Peter is not a foodie who goes out frequently to find new food restaurants to try .", "6": "Peter does not belong to a household with a high net income .", "7": "Peter have parents who are very busy with their regular jobs .", "8": "Peter grew up as only children with no siblings .", "9": "Peter is a household with a high net income .", "a": "Peter has people who has parents who is very busy with their regular jobs ."}], "errors": [[]], "entailments_dict": [{"4": ["0"], "1": ["5", "(¬2)"], "3": ["5"], "0": ["(¬2)"]}, {"5": ["0", "(¬3)"], "3": ["6", "8"]}, {"a": ["7", "(¬8)"], "4": ["9"], "(¬4)": ["9"], "(¬6)": ["9"]}], "predicted_steps": [false, false, "Contradiction in the premises"]}
{"text": "All fir trees are evergreens. Some objects of worship are fir trees.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some evergreens are not objects of worship?", "id": "111", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: All fir trees are evergreens.\nPremise 1.2: Some objects of worship are fir trees.\nConclusion 1: Some objects of worship are evergreens.\nPremise 2.1: Some objects of worship are evergreens.\nConclusion 2: It is not true that all evergreens are objects of worship.\nPremise 3.1: It is not true that all evergreens are objects of worship.\nConclusion 3: Some evergreens are not objects of worship.\nPremise 4.1: Some evergreens are not objects of worship.\nAnswer: A. Yes", "logic_premises": "[[(0→1), 2], [0], [(0→1)]]", "logic_conclusion": "[3, (1→2), 2]", "correspondance": [{"0": "X is fir a tree .", "1": "X is an evergreen .", "2": "Some objects of worship are fir trees .", "3": "Some objects of worship are evergreens ."}, {"0": "Some objects of worship are evergreens .", "1": "X is an evergreen .", "2": "It is not true that X is an object of worship ."}, {"0": "X is an evergreen .", "1": "It is not true that X is an object of worship .", "2": "Some evergreens are not objects of worship ."}], "errors": [[]], "entailments_dict": [{}, {}, {}], "predicted_steps": [false, false, false]}
{"text": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Juan de Onate visited a mountain range in New Mexico?", "id": "112", "ground_truth": "True", "reasoning": "Premise 1.1: The Picuris Mountains are a mountain range in New Mexico or Texas.\nPremise 1.2: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nConclusion 1: The Picuris Mountains are not in Texas (because there are no mountain ranges in Texas that have mines which have been donated).\nPremise 2.1: The Picuris Mountains are not in Texas.\nPremise 2.2: The Picuris Mountains are a mountain range in New Mexico or Texas.\nConclusion 2: The Picuris Mountains are in New Mexico.\nPremise 3.1: Juan de Onate visited the Picuris Mountains.\nPremise 3.2: The Picuris Mountains are in New Mexico.\nConclusion 3: Juan de Onate visited a mountain range in New Mexico.\nAnswer: A. Yes", "logic_premises": "[[(0∨1), 2], [0, (1∨2)], [0, 1]]", "logic_conclusion": "[3, 3, 2]", "correspondance": [{"0": "the Picuris Mountains are a mountain range in New Mexico .", "1": "the Picuris Mountains are a mountain range in Texas .", "2": "The Harding Pegmatite Mine , located in the Picuris Mountains , was donated .", "3": "the Picuris Mountains are not in Texas ."}, {"0": "the Picuris Mountains are not in Texas .", "1": "the Picuris Mountains are a mountain range in New Mexico .", "2": "the Picuris Mountains are a mountain range in Texas .", "3": "the Picuris Mountains are in New Mexico ."}, {"0": "Juan de Onate visited the Picuris Mountains .", "1": "the Picuris Mountains are in New Mexico .", "2": "Juan de Onate visited a mountain range in New Mexico ."}], "errors": [[]], "entailments_dict": [{"2": ["0", "3"], "0": ["3"], "3": ["(¬1)"], "(¬3)": ["1"], "(¬2)": ["0"]}, {"1": ["0", "3"], "3": ["0", "1", "(¬2)"], "0": ["(¬2)"], "2": ["(¬0)"], "(¬0)": ["2"], "(¬2)": ["0"]}, {}], "predicted_steps": [true, true, false]}
{"text": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Juan de Onate visited a mountain range in Texas?", "id": "113", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: The Picuris Mountains are a mountain range in New Mexico or Texas.\nPremise 1.2: Juan de Onate visited the Picuris Mountains.\nConclusion 1: Juan de Onate visited a mountain range in New Mexico or Texas.\nPremise 2.1: There are no mountain ranges in Texas that have mines which have been donated.\nPremise 2.2: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nConclusion 2: The Picuris Mountains are not in Texas.\nPremise 3.1: Juan de Onate visited the Picuris Mountains.\nPremise 3.2: The Picuris Mountains are not in Texas.\nConclusion 3: Juan de Onate did not visit a mountain range in Texas.\nAnswer: B. No", "logic_premises": "[[(0∨1), 2], [((4→5)∪((6→7)∪(8→9))), 2], [0, 1]]", "logic_conclusion": "[(3∨4), 3, 2]", "correspondance": [{"0": "the Picuris Mountains are a mountain range in New Mexico .", "1": "the Picuris Mountains are a mountain range in Texas .", "2": "Juan de Onate visited the Picuris Mountains .", "3": "Juan de Onate visited a mountain range in New Mexico .", "4": "Juan de Onate visited a mountain range in Texas ."}, {"0": "X is mountain an a range in Texas that has mines which has been donated .", "1": "There is not X .", "2": "The Harding Pegmatite Mine , located in the Picuris Mountains , was donated .", "3": "the Picuris Mountains are not in Texas .", "4": "The Picuris Mountains is mountain an a range in Texas that has mines which has been donated .", "5": "There is not The Picuris Mountains .", "6": "The Harding Pegmatite Mine, located in the Picuris Mountains, is mountain an a range in Texas that has mines which has been donated .", "7": "There is not The Harding Pegmatite Mine, located in the Picuris Mountains, .", "8": "Texas is mountain an a range in Texas that has mines which has been donated .", "9": "There is not Texas ."}, {"0": "Juan de Onate visited the Picuris Mountains .", "1": "the Picuris Mountains are not in Texas .", "2": "Juan de Onate did not visit a mountain range in Texas ."}], "errors": [[]], "entailments_dict": [{}, {"2": ["6", "3", "(¬5)", "(¬7)", "(¬9)"], "5": ["(¬2)"], "3": ["(¬9)", "(¬5)"], "(¬6)": ["2"]}, {"0": ["1"]}], "predicted_steps": [false, true, false]}
{"text": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The Harding Pegmatite Mine is not located in a mountain range in New Mexico?", "id": "114", "ground_truth": "False", "reasoning": "Premise 1.1: The Picuris Mountains are a mountain range in New Mexico or Texas.\nPremise 1.2: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nConclusion 1: The Harding Pegmatite Mine is located in a mountain range in New Mexico or Texas.\nPremise 2.1: There are no mountain ranges in Texas that have mines which have been donated.\nPremise 2.2: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nConclusion 2: The Picuris Mountains are not in Texas.\nPremise 3.1: The Picuris Mountains are a mountain range in New Mexico or Texas.\nPremise 3.2: The Picuris Mountains are not in Texas.\nConclusion 3: The Picuris Mountains are in New Mexico.\nPremise 4.1: The Harding Pegmatite Mine is located in the Picuris Mountains.\nPremise 4.2: The Picuris Mountains are in New Mexico.\nConclusion 4: The Harding Pegmatite Mine is located in a mountain range in New Mexico.\nAnswer: B. No", "logic_premises": "[[(0∨1), 2], [((4→5)∪((6→7)∪(8→9))), 2], [(0∨1), 2], [0, 1]]", "logic_conclusion": "[(3∨4), 3, 3, 2]", "correspondance": [{"0": "the Picuris Mountains are a mountain range in New Mexico .", "1": "the Picuris Mountains are a mountain range in Texas .", "2": "The Harding Pegmatite Mine , located in the Picuris Mountains , was donated .", "3": "The Harding Pegmatite Mine is located in a mountain range in New Mexico .", "4": "The Harding Pegmatite Mine is located in a mountain range in Texas ."}, {"0": "X is mountain an a range in Texas that has mines which has been donated .", "1": "There is not X .", "2": "The Harding Pegmatite Mine , located in the Picuris Mountains , was donated .", "3": "the Picuris Mountains are not in Texas .", "4": "The Picuris Mountains is mountain an a range in Texas that has mines which has been donated .", "5": "There is not The Picuris Mountains .", "6": "The Harding Pegmatite Mine, located in the Picuris Mountains, is mountain an a range in Texas that has mines which has been donated .", "7": "There is not The Harding Pegmatite Mine, located in the Picuris Mountains, .", "8": "Texas is mountain an a range in Texas that has mines which has been donated .", "9": "There is not Texas ."}, {"0": "the Picuris Mountains are a mountain range in New Mexico .", "1": "the Picuris Mountains are a mountain range in Texas .", "2": "the Picuris Mountains are not in Texas .", "3": "the Picuris Mountains are in New Mexico ."}, {"0": "the Harding Pegmatite Mine is located in the Picuris Mountains .", "1": "the Picuris Mountains are in New Mexico .", "2": "the Harding Pegmatite Mine is located in a mountain range in New Mexico ."}], "errors": [[]], "entailments_dict": [{"2": ["0"], "(¬2)": ["0"]}, {"2": ["6", "3", "(¬5)", "(¬7)", "(¬9)"], "5": ["(¬2)"], "3": ["(¬9)", "(¬5)"], "(¬6)": ["2"]}, {"0": ["2", "3"], "3": ["0", "2", "(¬1)"], "2": ["(¬1)"], "1": ["(¬2)"], "(¬2)": ["1"], "(¬1)": ["2"]}, {}], "predicted_steps": [false, true, true, false]}
{"text": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Peter is shorter than a man in Michael's class?", "id": "115", "ground_truth": "False", "reasoning": "Premise 1.1: Michael is a man who is taller than everyone else in his class.\nPremise 1.2: Peter is a man who is taller than Michael.\nConclusion 1: Peter is taller than everyone else in Michael's class.\nPremise 2.1: Michael cannot block Windy's shooting.\nPremise 2.2: Michael can block any shooting from a person as long as the person does not jump when shooting.\nConclusion 2: Windy can jump when shooting.\nPremise 3.1: Peter is taller than everyone else in Michael's class.\nConclusion 3: Peter is not shorter than a man in Michael's class.\nAnswer: B. No", "logic_premises": "[[((5→6)∪((7→8)∪(9→a))), 2], [0, ((4→5)∪((6→7)∪((8→9)∪(a→b))))], [((3→4)∪(5→6))]]", "logic_conclusion": "[((b→c)∪((d→e)∪(f→g))), 3, 2]", "correspondance": [{"0": "X is a person man who is taller than else in Michael 's class .", "1": "Michael is X .", "2": "Peter is a man who is taller than Michael .", "3": "X is a person else in Michael 's class .", "4": "Peter is taller than X .", "5": "Michael is a person man who is taller than else in Michael 's class .", "6": "Michael is Michael .", "7": "Michaels class is a person man who is taller than else in Michael 's class .", "8": "Michael is Michaels class .", "9": "Peter is a person man who is taller than else in Michael 's class .", "a": "Michael is Peter .", "b": "Michael is a person else in Michael 's class .", "c": "Peter is taller than Michael .", "d": "Michaels class is a person else in Michael 's class .", "e": "Peter is taller than Michaels class .", "f": "Peter is a person else in Michael 's class .", "g": "Peter is taller than Peter ."}, {"0": "Michael can not block Windy 's 's shooting .", "1": "X is a shooting from a person .", "2": "Michael can block X as long as a person does not jump when shooting .", "3": "Windy 's can jump that shooting .", "4": "the person is a shooting from a person .", "5": "Michael can block the person as long as a person does not jump when shooting .", "6": "Michael is a shooting from a person .", "7": "Michael can block Michael as long as a person does not jump when shooting .", "8": "Windy is a shooting from a person .", "9": "Michael can block Windy as long as a person does not jump when shooting .", "a": "Windys shooting is a shooting from a person .", "b": "Michael can block Windys shooting as long as a person does not jump when shooting ."}, {"0": "X is a person else in Michael 's 's class .", "1": "Peter is taller than X .", "2": "Peter is not shorter than a man in Michael 's 's class .", "3": "Michaels class is a person else in Michael 's 's class .", "4": "Peter is taller than Michaels class .", "5": "Peter is a person else in Michael 's 's class .", "6": "Peter is taller than Peter ."}], "errors": [[]], "entailments_dict": [{"2": ["c", "(¬a)"], "a": ["(¬2)"], "f": ["(¬a)", "(¬8)"], "d": ["(¬a)", "(¬8)"]}, {"0": ["a", "4", "8", "(¬b)", "(¬9)"], "9": ["(¬0)"], "b": ["(¬0)"], "3": ["(¬7)", "(¬9)", "(¬b)", "(¬5)"], "(¬0)": ["a", "4", "8"]}, {"4": ["2"], "2": ["(¬6)"], "(¬2)": ["5"]}], "predicted_steps": [false, "Contradiction in the premises", false]}
{"text": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Windy is a great shooter?", "id": "116", "ground_truth": "True", "reasoning": "Premise 1.1: Michael is a man who is taller than everyone else in his class.\nPremise 1.2: Peter is a man who is taller than Michael.\nConclusion 1: Peter is taller than everyone else in Michael's class.\nPremise 2.1: Michael cannot block Windy's shooting.\nPremise 2.2: Michael can block any shooting from a person as long as the person does not jump when shooting.\nConclusion 2: Windy jumps when shooting.\nPremise 3.1: Every shooter who can jump when shooting is a great shooter.\nPremise 3.2: Windy jumps when shooting.\nConclusion 3: Windy is a great shooter.\nAnswer: A. Yes", "logic_premises": "[[((5→6)∪((7→8)∪(9→a))), 2], [0, ((4→5)∪((6→7)∪((8→9)∪(a→b))))], [(4→5), 2]]", "logic_conclusion": "[((b→c)∪((d→e)∪(f→g))), 3, 3]", "correspondance": [{"0": "X is a person man who is taller than else in Michael 's class .", "1": "Michael is X .", "2": "Peter is a man who is taller than Michael .", "3": "X is a person else in Michael 's class .", "4": "Peter is taller than X .", "5": "Michael is a person man who is taller than else in Michael 's class .", "6": "Michael is Michael .", "7": "Michaels class is a person man who is taller than else in Michael 's class .", "8": "Michael is Michaels class .", "9": "Peter is a person man who is taller than else in Michael 's class .", "a": "Michael is Peter .", "b": "Michael is a person else in Michael 's class .", "c": "Peter is taller than Michael .", "d": "Michaels class is a person else in Michael 's class .", "e": "Peter is taller than Michaels class .", "f": "Peter is a person else in Michael 's class .", "g": "Peter is taller than Peter ."}, {"0": "Michael can not block Windy 's 's shooting .", "1": "X is a shooting from a person .", "2": "Michael can block X as long as a person does not jump when shooting .", "3": "Windy 's jumps that shooting .", "4": "the person is a shooting from a person .", "5": "Michael can block the person as long as a person does not jump when shooting .", "6": "Michael is a shooting from a person .", "7": "Michael can block Michael as long as a person does not jump when shooting .", "8": "Windy is a shooting from a person .", "9": "Michael can block Windy as long as a person does not jump when shooting .", "a": "Windys shooting is a shooting from a person .", "b": "Michael can block Windys shooting as long as a person does not jump when shooting ."}, {"0": "X is a shooter who can jump when shooting .", "1": "X is a great shooter .", "2": "Windy jumps that shooting .", "3": "Windy is a great shooter .", "4": "Windy is a shooter who can jump when shooting .", "5": "Windy is a great shooter ."}], "errors": [[]], "entailments_dict": [{"2": ["c", "(¬a)"], "a": ["(¬2)"], "f": ["(¬a)", "(¬8)"], "d": ["(¬a)", "(¬8)"]}, {"0": ["a", "4", "8", "(¬b)", "(¬9)"], "3": ["a", "(¬7)", "(¬9)", "(¬b)", "(¬5)"], "9": ["(¬0)"], "b": ["(¬0)"], "(¬0)": ["a", "4", "8"]}, {"2": ["4"], "5": ["3"]}], "predicted_steps": [false, "Contradiction in the premises", true]}
{"text": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Peter can block Windy's shooting?", "id": "117", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Michael is a man who is taller than everyone else in his class.\nPremise 1.2: Peter is a man who is taller than Michael.\nConclusion 1: Peter is taller than everyone else in Michael's class.\n\nPremise 2.1: Michael cannot block Windy's shooting.\nPremise 2.2: Michael can block any shooting from a person as long as the person does not jump when shooting.\nConclusion 2: Windy can jump when shooting.\n\nPremise 3.1: Peter is taller than everyone else in Michael's class.\nPremise 3.2: Windy can jump when shooting.\nConclusion 3: Peter can block Windy's shooting.\nAnswer: A. Yes.", "logic_premises": "[[((5→6)∪((7→8)∪(9→a))), 2], [0, ((4→5)∪((6→7)∪((8→9)∪(a→b))))], [((4→5)∪((6→7)∪((8→9)∪(a→b)))), 2]]", "logic_conclusion": "[((b→c)∪((d→e)∪(f→g))), 3, 3]", "correspondance": [{"0": "X is a person man who is taller than else in Michael 's class .", "1": "Michael is X .", "2": "Peter is a man who is taller than Michael .", "3": "X is a person else in Michael 's class .", "4": "Peter is taller than X .", "5": "Michael is a person man who is taller than else in Michael 's class .", "6": "Michael is Michael .", "7": "Michaels class is a person man who is taller than else in Michael 's class .", "8": "Michael is Michaels class .", "9": "Peter is a person man who is taller than else in Michael 's class .", "a": "Michael is Peter .", "b": "Michael is a person else in Michael 's class .", "c": "Peter is taller than Michael .", "d": "Michaels class is a person else in Michael 's class .", "e": "Peter is taller than Michaels class .", "f": "Peter is a person else in Michael 's class .", "g": "Peter is taller than Peter ."}, {"0": "Michael can not block Windy 's 's shooting .", "1": "X is a shooting from a person .", "2": "Michael can block X as long as a person does not jump when shooting .", "3": "Windy 's can jump that shooting .", "4": "the person is a shooting from a person .", "5": "Michael can block the person as long as a person does not jump when shooting .", "6": "Michael is a shooting from a person .", "7": "Michael can block Michael as long as a person does not jump when shooting .", "8": "Windy is a shooting from a person .", "9": "Michael can block Windy as long as a person does not jump when shooting .", "a": "Windys shooting is a shooting from a person .", "b": "Michael can block Windys shooting as long as a person does not jump when shooting ."}, {"0": "X is a person else in Michael 's class .", "1": "Peter is taller than X .", "2": "Windy can jump that shooting .", "3": "Peter can block Windy 's shooting .", "4": "Michaels class is a person else in Michael 's class .", "5": "Peter is taller than Michaels class .", "6": "Windy is a person else in Michael 's class .", "7": "Peter is taller than Windy .", "8": "Windys shooting is a person else in Michael 's class .", "9": "Peter is taller than Windys shooting .", "a": "Peter is a person else in Michael 's class .", "b": "Peter is taller than Peter ."}], "errors": [[]], "entailments_dict": [{"2": ["c", "(¬a)"], "a": ["(¬2)"], "f": ["(¬a)", "(¬8)"], "d": ["(¬a)", "(¬8)"]}, {"0": ["a", "4", "8", "(¬b)", "(¬9)"], "9": ["(¬0)"], "b": ["(¬0)"], "3": ["(¬7)", "(¬9)", "(¬b)", "(¬5)"], "(¬0)": ["a", "4", "8"]}, {"3": ["(¬2)"]}], "predicted_steps": [false, "Contradiction in the premises", false]}
{"text": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Barutin is named after all islands in Antarctica?", "id": "118", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Barutin Cove is named after the Bulgarian settlement of Barutin.\nPremise 1.2: Barutin Cove is on the southwest coast of Snow Island.\nConclusion 1: Barutin is named after Snow Island.\n\nPremise 2.1: Snow Island is part of the South Shetland Islands.\nPremise 2.2: The South Shetland Islands are considered part of Antarctica.\nConclusion 2: Snow Island is part of Antarctica.\n\nPremise 3.1: Barutin is named after Snow Island.\nPremise 3.2: Snow Island is part of Antarctica.\nConclusion 3: Barutin is not named after all islands in Antarctica (only Snow Island).\n\nAnswer: B. No", "logic_premises": "[[0, 1], [0, 1], [0, 1]]", "logic_conclusion": "[2, 2, ((4→5)∪((6→7)∪(8→9)))]", "correspondance": [{"0": "Barutin Cove is named after the Bulgarian settlement of Barutin .", "1": "Barutin Cove is on the southwest coast of Snow Island .", "2": "Barutin is named after Snow Island ."}, {"0": "Snow Island is part of the South Shetland Islands .", "1": "the South Shetland Islands are considered part of Antarctica .", "2": "Snow Island is part of Antarctica ."}, {"0": "Barutin is named after Snow Island .", "1": "Snow Island is part of Antarctica .", "2": "X is an island in Antarctica .", "3": "Barutin is not named after X .", "4": "Antarctica is an island in Antarctica .", "5": "Barutin is not named after Antarctica .", "6": "Barutin is an island in Antarctica .", "7": "Barutin is not named after Barutin .", "8": "Snow Island is an island in Antarctica .", "9": "Barutin is not named after Snow Island ."}], "errors": [[]], "entailments_dict": [{"2": ["(¬0)"]}, {}, {"8": ["1"], "(¬9)": ["0"]}], "predicted_steps": [false, false, false]}
{"text": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that There is at least one cove in Antarctica named after a place in Bulgaria?", "id": "119", "ground_truth": "True", "reasoning": "Premise 1.1: Barutin Cove is named after the Bulgarian settlement of Barutin.\nPremise 1.2: Barutin Cove is on the southwest coast of Snow Island.\nConclusion 1: Barutin Cove is located in Snow Island.\nPremise 2.1: Barutin Cove is located in Snow Island.\nPremise 2.2: Snow Island is part of the South Shetland Islands.\nConclusion 2: Barutin Cove is located in the South Shetland Islands.\nPremise 3.1: Barutin Cove is located in the South Shetland Islands.\nPremise 3.2: The South Shetland Islands are considered part of Antarctica.\nConclusion 3: Barutin Cove is located in Antarctica.\nPremise 4.1: Barutin Cove is named after the Bulgarian settlement of Barutin.\nPremise 4.2: Barutin Cove is located in Antarctica.\nConclusion 4: There is at least one cove in Antarctica named after a place in Bulgaria.\nAnswer: A. Yes", "logic_premises": "[[0, 1], [0, 1], [0, 1], [0, 1]]", "logic_conclusion": "[2, 2, 2, 2]", "correspondance": [{"0": "Barutin Cove is named after the Bulgarian settlement of Barutin .", "1": "Barutin Cove is on the southwest coast of Snow Island .", "2": "Barutin Cove is located in Snow Island ."}, {"0": "Barutin Cove is located in Snow Island .", "1": "Snow Island is part of the South Shetland Islands .", "2": "Barutin Cove is located in the South Shetland Islands ."}, {"0": "Barutin Cove is located in the South Shetland Islands .", "1": "the South Shetland Islands are considered part of Antarctica .", "2": "Barutin Cove is located in Antarctica ."}, {"0": "Barutin Cove is named after the Bulgarian settlement of Barutin .", "1": "Barutin Cove is located in Antarctica .", "2": "There is at least one cove in Antarctica named after a place in Bulgaria ."}], "errors": [[]], "entailments_dict": [{"1": ["2"]}, {}, {}, {"2": ["1"], "0": ["2"], "1": ["2"]}], "predicted_steps": [true, false, false, true]}
{"text": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Barutin is not located in Antarctica?", "id": "120", "ground_truth": "False", "reasoning": "Premise 1.1: Barutin Cove is named after the Bulgarian settlement of Barutin.\nPremise 1.2: Barutin Cove is on the southwest coast of Snow Island.\nConclusion 1: Barutin Cove is located in Snow Island.\nPremise 2.1: Barutin Cove is located in Snow Island.\nPremise 2.2: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nConclusion 2: Barutin Cove is located in The South Shetland Islands.\nPremise 3.1: Barutin Cove is located in The South Shetland Islands.\nPremise 3.2: The South Shetland Islands are considered part of Antarctica.\nConclusion 3: Barutin Cove is located in Antarctica.\nPremise 4.1: Barutin is a settlement, and Barutin Cove is named after it.\nPremise 4.2: Barutin Cove is located in Antarctica.\nConclusion 4: Barutin is located in Antarctica.\nPremise 5.1: Barutin is located in Antarctica.\nAnswer: B. No", "logic_premises": "[[0, 1], [0, (1∧(2∧3))], [0, 1], [(0∧1), 2]]", "logic_conclusion": "[2, 4, 2, 3]", "correspondance": [{"0": "Barutin Cove is named after the Bulgarian settlement of Barutin .", "1": "Barutin Cove is on the southwest coast of Snow Island .", "2": "Barutin Cove is located in Snow Island ."}, {"0": "Barutin Cove is located in Snow Island .", "1": "The South Shetland Islands include Snow Island .", "2": "The South Shetland Islands include Greenwich Island .", "3": "The South Shetland Islands include Deception Island .", "4": "Barutin Cove is located in The South Shetland Islands ."}, {"0": "Barutin Cove is located in The South Shetland Islands .", "1": "The South Shetland Islands are considered part of Antarctica .", "2": "Barutin Cove is located in Antarctica ."}, {"0": "Barutin is a settlement .", "1": "Barutin Cove is named after Barutin .", "2": "Barutin Cove is located in Antarctica .", "3": "Barutin is located in Antarctica ."}], "errors": [[]], "entailments_dict": [{"1": ["2"]}, {}, {}, {"2": ["3"]}], "predicted_steps": [true, false, false, true]}
{"text": "Some affection is love. Some love is positive.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some affection is positive?", "id": "121", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Some affection is love.\nPremise 1.2: Some love is positive.\nConclusion 1: Some affection is positive (since some affection is love, and some love is positive).\nAnswer: A. Yes", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "Some affection is love .", "1": "Some love is positive .", "2": "Some affection is positive ."}], "errors": [[]], "entailments_dict": [{"1": ["0", "2"], "2": ["1"], "0": ["2"]}], "predicted_steps": [true]}
{"text": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Greyhound is an airline?", "id": "122", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: All planes are empty.\nPremise 1.2: All Boeing 707s are planes.\nConclusion 1: All Boeing 707s are empty.\nPremise 2.1: If something can transport multiple passengers, then they are not empty.\nPremise 2.2: All airlines can transport multiple passengers.\nConclusion 2: All airlines are not empty.\nPremise 3.1: All Boeing 707s are empty.\nPremise 3.2: All airlines are not empty.\nConclusion 3: Boeing 707s are not airlines.\nPremise 4.1: If Greyhound is not an airline, then there are no Greyhound planes.\nPremise 4.2: Boeing 707s are planes.\nConclusion 4: Greyhound is an airline.\nAnswer: A. Yes", "logic_premises": "[[(0→1), (2→3)], [(0→1), (2→3)], [((5→6)∪(7→8)), ((9→a)∪(b→c))], [(0→1), 2]]", "logic_conclusion": "[(4→5), (4→5), 4, 3]", "correspondance": [{"0": "X is a plane .", "1": "X is empty .", "2": "X is Boeing a 707 .", "3": "X is a plane .", "4": "X is Boeing a 707 .", "5": "X is empty ."}, {"0": "X can transport multiple passengers .", "1": "X are not empty .", "2": "X is an airline .", "3": "X can transport multiple passengers .", "4": "X is an airline .", "5": "X is not empty ."}, {"0": "X is Boeing a 707 .", "1": "X is empty .", "2": "X is an airline .", "3": "X is not empty .", "4": "Boeing 707s are not airlines .", "5": "All Boeing 707s is Boeing a 707 .", "6": "All Boeing 707s is empty .", "7": "Boeing 707s is Boeing a 707 .", "8": "Boeing 707s is empty .", "9": "All Boeing 707s is an airline .", "a": "All Boeing 707s is not empty .", "b": "Boeing 707s is an airline .", "c": "Boeing 707s is not empty ."}, {"0": "Greyhound is not an airline .", "1": "there are no Greyhound planes .", "2": "Boeing 707s are planes .", "3": "Greyhound is an airline ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["0", "2", "(¬1)"], "1": ["5"]}, {"3": ["0"], "4": ["0", "2"], "1": ["5"]}, {"a": ["7", "(¬6)", "(¬8)"], "4": ["7"], "6": ["(¬c)", "(¬a)"], "c": ["(¬6)", "(¬8)"], "8": ["(¬c)", "(¬a)"], "(¬4)": ["7", "b", "9"]}, {"3": ["(¬1)"], "(¬3)": ["0"]}], "predicted_steps": ["Contradiction in the premises", true, false, false]}
{"text": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A Greyhound is a Boeing 707?", "id": "123", "ground_truth": "False", "reasoning": "Premise 1.1: All planes are empty.\nPremise 1.2: All Boeing 707s are planes.\nConclusion 1: All Boeing 707s are empty.\nPremise 2.1: If something can transport multiple passengers, then they are not empty.\nPremise 2.2: All airlines can transport multiple passengers.\nConclusion 2: All airlines are not empty.\nPremise 3.1: All planes are empty.\nPremise 3.2: All airlines are not empty.\nConclusion 3: No airline is a plane.\nPremise 4.1: If Greyhound is not an airline, then there are no Greyhound planes.\nPremise 4.2: No airline is a plane.\nConclusion 4: Greyhound is not an airline.\nPremise 5.1: Greyhound is not an airline.\nPremise 5.2: All Boeing 707s are planes.\nConclusion 5: A Greyhound is not a Boeing 707.\nAnswer: B. No", "logic_premises": "[[(0→1), (2→3)], [(0→1), (2→3)], [(0→1), (2→3)], [(0→1), ((5→6)∪(7→8))], [0, ((5→6)∪(7→8))]]", "logic_conclusion": "[(4→5), (4→5), (4→5), 4, ((9→a)∪(b→c))]", "correspondance": [{"0": "X is a plane .", "1": "X is empty .", "2": "X is Boeing a 707 .", "3": "X is a plane .", "4": "X is Boeing a 707 .", "5": "X is empty ."}, {"0": "X can transport multiple passengers .", "1": "X are not empty .", "2": "X is an airline .", "3": "X can transport multiple passengers .", "4": "X is an airline .", "5": "X is not empty ."}, {"0": "X is a plane .", "1": "X is empty .", "2": "X is an airline .", "3": "X is not empty .", "4": "X is an airline .", "5": "X is not a plane ."}, {"0": "Greyhound is not an airline .", "1": "there are no Greyhound planes .", "2": "X is an airline .", "3": "X is not a plane .", "4": "Greyhound is not an airline .", "5": "no Greyhound planes is an airline .", "6": "no Greyhound planes is not a plane .", "7": "Greyhound is an airline .", "8": "Greyhound is not a plane ."}, {"0": "Greyhound is not an airline .", "1": "X is Boeing a 707 .", "2": "X is a plane .", "3": "X is A Greyhound", "4": "X is not a Boeing 707 .", "5": "All Boeing 707s is Boeing a 707 .", "6": "All Boeing 707s is a plane .", "7": "Greyhound is Boeing a 707 .", "8": "Greyhound is a plane .", "9": "All Boeing 707s is A Greyhound", "a": "All Boeing 707s is not a Boeing 707 .", "b": "Greyhound is A Greyhound", "c": "Greyhound is not a Boeing 707 ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["0", "2", "(¬1)"], "1": ["5"]}, {"3": ["0"], "4": ["0", "2"], "1": ["5"]}, {"4": ["2"], "3": ["(¬1)"], "1": ["(¬3)"], "(¬5)": ["0"]}, {"6": ["0", "4"], "1": ["5", "4"], "4": ["0"], "(¬4)": ["7", "5"], "(¬7)": ["0"], "(¬0)": ["5", "7"]}, {"9": ["7", "(¬0)", "(¬6)"], "8": ["(¬0)"], "0": ["(¬8)"], "b": ["(¬6)", "(¬8)"], "(¬a)": ["0", "5"], "(¬c)": ["7"]}], "predicted_steps": ["Contradiction in the premises", true, true, false, true]}
{"text": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that A Greyhound is not a Boeing 707?", "id": "124", "ground_truth": "True", "reasoning": "Premise 1.1: All planes are empty.\nPremise 1.2: All Boeing 707s are planes.\nConclusion 1: All Boeing 707s are empty.\nPremise 2.1: If something can transport multiple passengers, then they are not empty.\nPremise 2.2: All airlines can transport multiple passengers.\nConclusion 2: All airlines are not empty.\nPremise 3.1: All Boeing 707s are empty.\nPremise 3.2: All airlines are not empty.\nConclusion 3: Boeing 707s are not airlines.\nPremise 4.1: If Greyhound is not an airline, then there are no Greyhound planes.\nPremise 4.2: Boeing 707s are not airlines.\nConclusion 4: A Greyhound is not a Boeing 707.\nAnswer: A. Yes", "logic_premises": "[[(0→1), (2→3)], [(0→1), (2→3)], [((5→6)∪(7→8)), ((9→a)∪(b→c))], [(0→1), 2]]", "logic_conclusion": "[(4→5), (4→5), 4, ((5→6)∪(7→8))]", "correspondance": [{"0": "X is a plane .", "1": "X is empty .", "2": "X is Boeing a 707 .", "3": "X is a plane .", "4": "X is Boeing a 707 .", "5": "X is empty ."}, {"0": "X can transport multiple passengers .", "1": "X are not empty .", "2": "X is an airline .", "3": "X can transport multiple passengers .", "4": "X is an airline .", "5": "X is not empty ."}, {"0": "X is Boeing a 707 .", "1": "X is empty .", "2": "X is an airline .", "3": "X is not empty .", "4": "Boeing 707s are not airlines .", "5": "All Boeing 707s is Boeing a 707 .", "6": "All Boeing 707s is empty .", "7": "Boeing 707s is Boeing a 707 .", "8": "Boeing 707s is empty .", "9": "All Boeing 707s is an airline .", "a": "All Boeing 707s is not empty .", "b": "Boeing 707s is an airline .", "c": "Boeing 707s is not empty ."}, {"0": "Greyhound is not an airline .", "1": "there are no Greyhound planes .", "2": "Boeing 707s are not airlines .", "3": "X is A Greyhound", "4": "X is not a Boeing 707 .", "5": "no Greyhound planes is A Greyhound", "6": "no Greyhound planes is not a Boeing 707 .", "7": "Boeing 707s is A Greyhound", "8": "Boeing 707s is not a Boeing 707 ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["0", "2", "(¬1)"], "1": ["5"]}, {"3": ["0"], "4": ["0", "2"], "1": ["5"]}, {"a": ["7", "(¬6)", "(¬8)"], "4": ["7"], "6": ["(¬c)", "(¬a)"], "c": ["(¬6)", "(¬8)"], "8": ["(¬c)", "(¬a)"], "(¬4)": ["7", "b", "9"]}, {"5": ["0", "(¬2)"], "7": ["(¬1)", "(¬2)"]}], "predicted_steps": ["Contradiction in the premises", true, false, false]}
{"text": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rock is a monkey?", "id": "125", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nPremise 1.2: Rock is neither a fly nor a bird.\nConclusion 1: Rock neither flies nor breathes.\nPremise 2.1: All animals breathe.\nPremise 2.2: Rock neither flies nor breathes.\nConclusion 2: Rock is not an animal.\nPremise 3.1: All monkeys are mammals.\nPremise 3.2: All mammals are animals.\nPremise 3.3: Rock is not an animal.\nConclusion 3: Rock is not a monkey.\nAnswer: B. No", "logic_premises": "[[((0∧1)→2), (3∧4)], [(4→5), 2], [(6→7), (8→9), 4]]", "logic_conclusion": "[5, 3, 5]", "correspondance": [{"0": "Rock is not a fly .", "1": "Rock is not a bird .", "2": "Rock neither flies nor breathes .", "3": "Rock is not a fly .", "4": "Rock is not a bird .", "5": "Rock neither flies nor breathes ."}, {"0": "X is an animal .", "1": "X breathes .", "2": "Rock neither flies nor breathes .", "3": "Rock is not an animal .", "4": "Rock is an animal .", "5": "Rock breathes ."}, {"0": "X is a monkey .", "1": "X is a mammal .", "2": "X is a mammal .", "3": "X is an animal .", "4": "Rock is not an animal .", "5": "Rock is not a monkey .", "6": "Rock is a monkey .", "7": "Rock is a mammal .", "8": "Rock is a mammal .", "9": "Rock is an animal ."}], "errors": [[]], "entailments_dict": [{"2": ["3", "5"], "4": ["1"], "3": ["0"], "5": ["0", "3"]}, {"2": ["3", "(¬5)"], "5": ["(¬2)"], "3": ["(¬5)"], "(¬3)": ["4"]}, {"7": ["8", "(¬4)"], "4": ["(¬9)", "(¬7)"], "9": ["(¬4)"], "(¬5)": ["6", "8"]}], "predicted_steps": [true, true, true]}
{"text": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rock has wings?", "id": "126", "ground_truth": "True", "reasoning": "Premise 1.1: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nPremise 1.2: Rock is neither a fly nor a bird.\nConclusion 1: Rock neither flies nor breathes.\nPremise 2.1: All animals breathe.\nPremise 2.2: Rock neither flies nor breathes.\nConclusion 2: Rock is not an animal.\nPremise 3.1: An animal is either a monkey or a bird.\nPremise 3.2: Rock is not an animal.\nConclusion 3: Rock is neither a monkey nor a bird.\nPremise 4.1: If something can fly, then it has wings.\nPremise 4.2: Rock neither flies nor breathes.\nConclusion 4: Rock does not have wings.\nAnswer: B. No", "logic_premises": "[[((0∧1)→2), (3∧4)], [(4→5), 2], [(6→(7⊻8)), 3], [(0→1), 2]]", "logic_conclusion": "[5, 3, (4∧5), 3]", "correspondance": [{"0": "Rock is not a fly .", "1": "Rock is not a bird .", "2": "Rock neither flies nor breathes .", "3": "Rock is not a fly .", "4": "Rock is not a bird .", "5": "Rock neither flies nor breathes ."}, {"0": "X is an animal .", "1": "X breathes .", "2": "Rock neither flies nor breathes .", "3": "Rock is not an animal .", "4": "Rock is an animal .", "5": "Rock breathes ."}, {"0": "X is An animal", "1": "X is a monkey .", "2": "X is a bird .", "3": "Rock is not an animal .", "4": "Rock is not a monkey .", "5": "Rock is not a bird .", "6": "Rock is An animal", "7": "Rock is a monkey .", "8": "Rock is a bird ."}, {"0": "X can fly .", "1": "X has wings .", "2": "Rock neither flies nor breathes .", "3": "Rock does not have wings ."}], "errors": [[]], "entailments_dict": [{"2": ["3", "5"], "4": ["1"], "3": ["0"], "5": ["0", "3"]}, {"2": ["3", "(¬5)"], "5": ["(¬2)"], "3": ["(¬5)"], "(¬3)": ["4"]}, {"7": ["(¬3)", "(¬8)"], "8": ["(¬3)"], "3": ["(¬7)", "(¬8)"], "4": ["(¬7)"], "5": ["(¬8)"], "(¬4)": ["6"], "(¬5)": ["6"], "(¬3)": ["6"], "(¬6)": ["3"]}, {"2": ["3", "(¬1)"], "1": ["(¬2)"]}], "predicted_steps": [true, true, "Contradiction in the premises", true]}
{"text": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rock does not have wings?", "id": "127", "ground_truth": "False", "reasoning": "Premise 1.1: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nPremise 1.2: Rock is neither a fly nor a bird.\nConclusion 1: Rock neither flies nor breathes.\nPremise 2.1: Rock neither flies nor breathes.\nPremise 2.2: If something can fly, then it has wings.\nConclusion 2: Rock does not have wings.\nPremise 3.1: Rock does not have wings.\nAnswer: A. Yes", "logic_premises": "[[((0∧1)→2), (3∧4)], [0, (1→2)]]", "logic_conclusion": "[5, 3]", "correspondance": [{"0": "Rock is not a fly .", "1": "Rock is not a bird .", "2": "Rock neither flies nor breathes .", "3": "Rock is not a fly .", "4": "Rock is not a bird .", "5": "Rock neither flies nor breathes ."}, {"0": "rock neither flies nor breathes .", "1": "X can fly .", "2": "X has wings .", "3": "rock does not have wings ."}], "errors": [[]], "entailments_dict": [{"2": ["3", "5"], "4": ["1"], "3": ["0"], "5": ["0", "3"]}, {"0": ["3", "(¬2)"], "2": ["(¬0)"]}], "predicted_steps": [true, true]}
{"text": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that John has a wedding that is well-attended?", "id": "128", "ground_truth": "False", "reasoning": "Premise 1.1: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nPremise 1.2: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nConclusion 1: If John has a wedding that is well-attended, then John travels to Paris for their honeymoon.\nPremise 2.1: If John has at least one child, then John does not travel to Paris for his honeymoon.\nPremise 2.2: All people who have a wedding are people who have at least one child.\nConclusion 2: If John has a wedding, then John has at least one child.\nPremise 3.1: Conclusion 1 and Conclusion 2\nConclusion 3: John does not have a wedding that is well-attended.\nAnswer: B. No", "logic_premises": "[[(0→1), ((6→7)∪((8→9)∪(a→b)))], [(0→1), ((6→7)∪(8→9))], [0]]", "logic_conclusion": "[(4→5), (4→5), 1]", "correspondance": [{"0": "John has a wedding that is well - attended .", "1": "John has a wedding in July or , if not , then John travels to Paris for their honeymoon .", "2": "X is a wedding that occurs in July .", "3": "X belongs to people who travels to Paris for their honeymoon .", "4": "John has a wedding that is well - attended .", "5": "John travels to Paris for their honeymoon .", "6": "July is a wedding that occurs in July .", "7": "July belongs to people who travels to Paris for their honeymoon .", "8": "Paris is a wedding that occurs in July .", "9": "Paris belongs to people who travels to Paris for their honeymoon .", "a": "John is a wedding that occurs in July .", "b": "John belongs to people who travels to Paris for their honeymoon ."}, {"0": "John has at least one child .", "1": "John does not travel to Paris for John 's honeymoon .", "2": "X is a person who has a wedding .", "3": "X is a people who has at least one child .", "4": "John has a wedding .", "5": "John has at least one child .", "6": "Paris is a person who has a wedding .", "7": "Paris is a people who has at least one child .", "8": "John is a person who has a wedding .", "9": "John is a people who has at least one child ."}, {"0": "Conclusion 1 and Conclusion 2", "1": "John does not have a wedding that is well - attended ."}], "errors": [[]], "entailments_dict": [{"1": ["a", "5"], "4": ["0"], "b": ["5"]}, {"9": ["0", "5"], "1": ["8"], "4": ["8"]}, {}], "predicted_steps": [true, true, false]}
{"text": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that John does not have a wedding that is well-attended?", "id": "129", "ground_truth": "True", "reasoning": "Premise 1.1: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nPremise 1.2: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nConclusion 1: If John has a wedding that is well-attended, then John travels to Paris for their honeymoon.\nPremise 2.1: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nPremise 2.2: All people who have a wedding are people who have at least one child.\nConclusion 2: If John has a wedding, then John has at least one child.\nPremise 3.1: Conclusion 1 and Conclusion 2\nConclusion 3: If John has a wedding that is well-attended, then John does not travel to Paris for his honeymoon and does not have a wedding.\nPremise 4.1: Conclusion 3\nConclusion 4: John does not have a wedding that is well-attended.\nAnswer: A. Yes", "logic_premises": "[[(0→1), ((6→7)∪((8→9)∪(a→b)))], [(0→(1∧2)), ((7→8)∪(9→a))], [0], [0]]", "logic_conclusion": "[(4→5), (5→6), (1→(2∧3)), 1]", "correspondance": [{"0": "John has a wedding that is well - attended .", "1": "John has a wedding in July or , if not , then John travels to Paris for their honeymoon .", "2": "X is a wedding that occurs in July .", "3": "X belongs to people who travels to Paris for their honeymoon .", "4": "John has a wedding that is well - attended .", "5": "John travels to Paris for their honeymoon .", "6": "July is a wedding that occurs in July .", "7": "July belongs to people who travels to Paris for their honeymoon .", "8": "Paris is a wedding that occurs in July .", "9": "Paris belongs to people who travels to Paris for their honeymoon .", "a": "John is a wedding that occurs in July .", "b": "John belongs to people who travels to Paris for their honeymoon ."}, {"0": "John has at least one child .", "1": "John does not travel to Paris for John 's honeymoon .", "2": "John does not have a wedding .", "3": "X is a person who has a wedding .", "4": "X is a people who has at least one child .", "5": "John has a wedding .", "6": "John has at least one child .", "7": "Paris is a person who has a wedding .", "8": "Paris is a people who has at least one child .", "9": "John is a person who has a wedding .", "a": "John is a people who has at least one child ."}, {"0": "Conclusion 1 and Conclusion 2", "1": "John has a wedding that is well - attended .", "2": "John does not travel to Paris for John 's honeymoon .", "3": "John does not have a wedding ."}, {"0": "Conclusion 3", "1": "John does not have a wedding that is well - attended ."}], "errors": [[]], "entailments_dict": [{"1": ["a", "5"], "4": ["0"], "b": ["5"]}, {"1": ["9"], "a": ["0", "6"], "5": ["9", "(¬2)"]}, {}, {}], "predicted_steps": [true, "Contradiction in the premises", false, false]}
{"text": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that John has at least one child?", "id": "130", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nPremise 1.2: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nConclusion 1: If John has a wedding that is well-attended, then John travels to Paris for their honeymoon.\n\nPremise 2.1: If John has at least one child, then John does not travel to Paris for his honeymoon.\nPremise 2.2: If John has a wedding that is well-attended, then John travels to Paris for their honeymoon.\nConclusion 2: John does not have a wedding that is well-attended, if John has at least one child.\n\nPremise 3.1: Some weddings in July are well-attended.\nPremise 3.2: John does not have a wedding that is well-attended, if John has at least one child.\nConclusion 3: John does not have a wedding in July, if John has at least one child.\n\nPremise 4.1: All people who travel to Paris for their honeymoon are people who have a wedding.\nPremise 4.2: If John has at least one child, then John does not travel to Paris for their honeymoon.\nConclusion 4: If John has at least one child, then John does not have a wedding.\n\nPremise 5.1: All people who have a wedding are people who have at least one child.\nPremise 5.2: If John has at least one child, then John does not have a wedding.\nConclusion 5: This is a contradiction, so the assumption \"John has at least one child\" is false.\n\nAnswer: B. No", "logic_premises": "[[(0→1), ((6→7)∪((8→9)∪(a→b)))], [(0→1), (2→3)], [0, 1], [((6→7)∪(8→9)), (2→3)], [((6→7)∪(8→9)), (2→3)]]", "logic_conclusion": "[(4→5), 4, 2, (4→5), (4∧5)]", "correspondance": [{"0": "John has a wedding that is well - attended .", "1": "John has a wedding in July or , if not , then John travels to Paris for their honeymoon .", "2": "X is a wedding that occurs in July .", "3": "X belongs to people who travels to Paris for their honeymoon .", "4": "John has a wedding that is well - attended .", "5": "John travels to Paris for their honeymoon .", "6": "July is a wedding that occurs in July .", "7": "July belongs to people who travels to Paris for their honeymoon .", "8": "Paris is a wedding that occurs in July .", "9": "Paris belongs to people who travels to Paris for their honeymoon .", "a": "John is a wedding that occurs in July .", "b": "John belongs to people who travels to Paris for their honeymoon ."}, {"0": "John has at least one child .", "1": "John does not travel to Paris for John 's honeymoon .", "2": "John has a wedding that is well - attended .", "3": "John travels to Paris for his honeymoon .", "4": "John does not have a wedding that is well - attended that John has at least one child ."}, {"0": "Some weddings in July are well - attended .", "1": "John does not have a wedding that is well - attended that John has at least one child .", "2": "John does not have a wedding in July that John has at least one child ."}, {"0": "X is a person who travels to Paris for their honeymoon .", "1": "X is a people who has a wedding .", "2": "John has at least one child .", "3": "John does not travel to Paris for their honeymoon .", "4": "John has at least one child .", "5": "John does not have a wedding .", "6": "Paris is a person who travels to Paris for their honeymoon .", "7": "Paris is a people who has a wedding .", "8": "John is a person who travels to Paris for their honeymoon .", "9": "John is a people who has a wedding ."}, {"0": "X is a person who has a wedding .", "1": "X is a people who has at least one child .", "2": "John has at least one child .", "3": "John does not have a wedding .", "4": "This is a contradiction .", "5": "the assumption \" John has at least one child \" is false .", "6": "the assumption \"John has at least one child\" is a person who has a wedding .", "7": "the assumption \"John has at least one child\" is a people who has at least one child .", "8": "John is a person who has a wedding .", "9": "John is a people who has at least one child ."}], "errors": [[]], "entailments_dict": [{"1": ["a", "5"], "4": ["0"], "b": ["5"]}, {"4": ["0"], "3": ["(¬1)"], "1": ["(¬3)"], "(¬4)": ["0", "2"]}, {}, {"4": ["2"], "3": ["(¬7)"]}, {"9": ["2"], "5": ["(¬9)"], "(¬5)": ["2"]}], "predicted_steps": [true, false, false, false, false]}
{"text": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon?", "id": "131", "ground_truth": "True", "reasoning": "Premise 1.1: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nPremise 1.2: All people who have a wedding are people who have at least one child.\nConclusion 1: If John has a wedding, then John has at least one child.\nPremise 2.1: Conclusion 1, If John has a wedding, then John has at least one child.\nPremise 2.2: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nConclusion 2: If John has a wedding, then John does not have a wedding.\nPremise 3.1: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nPremise 3.2: Conclusion 2, If John has a wedding, then John does not have a wedding.\nConclusion 3: John does not have a wedding that is well-attended and does not travel to Paris for their honeymoon.\nAnswer: A. Yes", "logic_premises": "[[(0→(1∧2)), ((7→8)∪(9→a))], [(0→1), (2→(3∧4))], [(0→1), 2]]", "logic_conclusion": "[(5→6), (5→6), (3∧4)]", "correspondance": [{"0": "John has at least one child .", "1": "John does not travel to Paris for John 's honeymoon .", "2": "John does not have a wedding .", "3": "X is a person who has a wedding .", "4": "X is a people who has at least one child .", "5": "John has a wedding .", "6": "John has at least one child .", "7": "Paris is a person who has a wedding .", "8": "Paris is a people who has at least one child .", "9": "John is a person who has a wedding .", "a": "John is a people who has at least one child ."}, {"0": "John has a wedding .", "1": "John has at least one child .", "2": "John has at least one child .", "3": "John does not travel to Paris for John 's honeymoon .", "4": "John does not have a wedding .", "5": "John has a wedding .", "6": "John does not have a wedding ."}, {"0": "John has a wedding that is well - attended .", "1": "John has a wedding in July or , if not , then John travels to Paris for their honeymoon .", "2": "Conclusion 2 , If John has a wedding , then John does not have a wedding .", "3": "John does not have a wedding that is well - attended .", "4": "John does not travel to Paris for their honeymoon ."}], "errors": [[]], "entailments_dict": [{"1": ["9"], "a": ["0", "6"], "5": ["9", "(¬2)"]}, {"3": ["0"], "1": ["2"], "5": ["0", "(¬4)"], "4": ["6"], "(¬6)": ["0"]}, {"1": ["(¬2)"], "4": ["(¬2)"], "(¬3)": ["0"]}], "predicted_steps": ["Contradiction in the premises", "Contradiction in the premises", false]}
{"text": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Platypus are mammals with no teeth?", "id": "132", "ground_truth": "True", "reasoning": "Premise 1.1: Platypus are mammals.\nPremise 1.2: Platypus have no teeth.\nConclusion 1: Platypus are mammals with no teeth.\nPremise 2.1: Platypus are mammals with no teeth.\nAnswer: A. Yes", "logic_premises": "[[0, (5→6)]]", "logic_conclusion": "[(7→8)]", "correspondance": [{"0": "Platypus are mammals .", "1": "X is a tooth .", "2": "Platypus does not have X .", "3": "X is a mammals with a tooth .", "4": "Platypus is not X .", "5": "Platypus is a tooth .", "6": "Platypus does not have Platypus .", "7": "Platypus is a mammals with a tooth .", "8": "Platypus is not Platypus ."}], "errors": [[]], "entailments_dict": [{"7": ["0", "(¬6)"], "6": ["(¬0)"], "0": ["(¬6)"]}], "predicted_steps": [false]}
{"text": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Platypus are reptiles?", "id": "133", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Platypus are mammals.\nPremise 1.2: Platypus have no teeth.\nConclusion 1: Platypus are mammals that have no teeth.\nPremise 2.1: Platypus are mammals that have no teeth.\nPremise 2.2: Some mammals have teeth.\nConclusion 2: Platypus are not reptiles (since they are mammals).\nAnswer: B. No", "logic_premises": "[[0, (5→6)], [(5→6), 2]]", "logic_conclusion": "[(7→8), (7→8)]", "correspondance": [{"0": "Platypus are mammals .", "1": "X is a tooth .", "2": "Platypus does not have X .", "3": "X is a mammals that has a tooth .", "4": "Platypus is not X .", "5": "Platypus is a tooth .", "6": "Platypus does not have Platypus .", "7": "Platypus is a mammals that has a tooth .", "8": "Platypus is not Platypus ."}, {"0": "X is a mammals that has a tooth .", "1": "Platypus is not X .", "2": "Some mammals have teeth .", "3": "X is a Platypus .", "4": "X is not a reptile .", "5": "Platypus is a mammals that has a tooth .", "6": "Platypus is not Platypus .", "7": "Platypus is a Platypus .", "8": "Platypus is not a reptile ."}], "errors": [[]], "entailments_dict": [{"7": ["0", "(¬6)"], "6": ["(¬0)"], "0": ["(¬6)"]}, {"7": ["2", "(¬6)"], "2": ["8", "(¬6)"], "(¬5)": ["2"]}], "predicted_steps": [false, false]}
{"text": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Humans are mammals?", "id": "134", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Platypus are mammals.\nPremise 1.2: Some mammals have teeth.\nConclusion 1: Platypus may or may not have teeth.\nPremise 2.1: Platypus have no teeth.\nConclusion 2: The statement \"Some mammals have teeth\" is still true.\nPremise 3.1: Humans have teeth.\nPremise 3.2: The statement \"Some mammals have teeth\" is still true.\nConclusion 3: Humans are mammals.\nPremise 4.1: Humans are mammals.\nAnswer: A. Yes", "logic_premises": "[[0, 1], [(3→4)], [(5→6), 2]]", "logic_conclusion": "[(2∨3), 2, (7→8)]", "correspondance": [{"0": "Platypus are mammals .", "1": "Some mammals have teeth .", "2": "Platypus may .", "3": "Platypus have teeth ."}, {"0": "X is a tooth .", "1": "Platypus does not have X .", "2": "The statement \" Some mammals have teeth \" is still true .", "3": "The statement \"Some mammals have teeth\" is a tooth .", "4": "Platypus does not have The statement \"Some mammals have teeth\" ."}, {"0": "X is a Human .", "1": "X has teeth .", "2": "The statement \" Some mammals have teeth \" is still true .", "3": "X is a Human .", "4": "X is a mammal .", "5": "The statement \"Some mammals have teeth\" is a Human .", "6": "The statement \"Some mammals have teeth\" has teeth .", "7": "The statement \"Some mammals have teeth\" is a Human .", "8": "The statement \"Some mammals have teeth\" is a mammal ."}], "errors": [[]], "entailments_dict": [{"3": ["1"]}, {}, {"7": ["5"]}], "predicted_steps": [false, false, false]}
{"text": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Space sucks?", "id": "135", "ground_truth": "True", "reasoning": "Premise 1.1: Space is a vacuum.\nPremise 1.2: Vacuums suck.\nConclusion 1: Space sucks.\nPremise 2.1: Space sucks.\nAnswer: A. Yes", "logic_premises": "[[0, (1→2)]]", "logic_conclusion": "[3]", "correspondance": [{"0": "Space is a vacuum .", "1": "X is a Vacuum .", "2": "X sucks .", "3": "Space sucks ."}], "errors": [[]], "entailments_dict": [{"3": ["0", "1"], "0": ["3"]}], "predicted_steps": [true]}
{"text": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Space is a vampire?", "id": "136", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Space is a vacuum.\nPremise 1.2: Vacuums suck.\nConclusion 1: Space sucks.\nPremise 2.1: Vampires suck.\nPremise 2.2: Space sucks.\nConclusion 2: It is not necessarily true that Space is a vampire (just because they both suck, it doesn't mean they are the same thing).\nAnswer: B. No", "logic_premises": "[[0, (1→2)], [(4→5), 2]]", "logic_conclusion": "[3, 3]", "correspondance": [{"0": "Space is a vacuum .", "1": "X is a Vacuum .", "2": "X sucks .", "3": "Space sucks ."}, {"0": "X is a Vampire .", "1": "X sucks .", "2": "Space sucks .", "3": "It is not necessarily true that Space is a vampire .", "4": "Space is a Vampire .", "5": "Space sucks ."}], "errors": [[]], "entailments_dict": [{"3": ["0", "1"], "0": ["3"]}, {"5": ["2"], "(¬3)": ["4"]}], "predicted_steps": [true, false]}
{"text": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If something is a household appliance, it sucks?", "id": "137", "ground_truth": "False", "reasoning": "Premise 1.1: A duster is a household appliance that doesn't suck.\nConclusion 1: There exists a household appliance that doesn't suck.\nPremise 2.1: If something is a household appliance, it sucks.\nPremise 2.2: There exists a household appliance that doesn't suck.\nConclusion 2: It is not true that if something is a household appliance, it sucks.\nAnswer: B. No", "logic_premises": "[[(0→1)], [(0→1), 2]]", "logic_conclusion": "[2, (3→4)]", "correspondance": [{"0": "X is A duster", "1": "X is a household appliance that does n't suck .", "2": "There exists a household appliance that does n't suck ."}, {"0": "X is a household appliance .", "1": "X sucks .", "2": "There exists a household appliance that does n't suck .", "3": "It is not true that X is a household appliance .", "4": "It is not true that X sucks ."}], "errors": [[]], "entailments_dict": [{"1": ["2"]}, {}], "predicted_steps": [false, false]}
{"text": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Supervised learning is used to train the state-of-the-art text summarization model?", "id": "138", "ground_truth": "True", "reasoning": "Premise 1.1: The Machine Learning algorithm for training text summarization model requires labelled data.\nPremise 1.2: Unsupervised learning doesn't require labelled data.\nConclusion 1: The algorithm is not unsupervised learning.\nPremise 2.1: The algorithm is not unsupervised learning.\nPremise 2.2: Reinforcement learning is not used to train the state-of-the-art text summarization model.\nConclusion 2: The algorithm is supervised learning.\nPremise 3.1: The algorithm is supervised learning.\nAnswer: A. Yes.", "logic_premises": "[[0, 1], [0, 1]]", "logic_conclusion": "[2, 2]", "correspondance": [{"0": "the Machine Learning algorithm for training text summarization model requires labelled data .", "1": "Unsupervised learning does n't require labelled data .", "2": "the Machine Learning algorithm for training text summarization model is not unsupervised learning ."}, {"0": "the algorithm is not unsupervised learning .", "1": "Reinforcement learning is not used to train the state - of - the - art text summarization model .", "2": "the algorithm is supervised learning ."}], "errors": [[]], "entailments_dict": [{"0": ["2"], "2": ["(¬1)"], "(¬2)": ["1"]}, {"2": ["0", "1"], "0": ["2"]}], "predicted_steps": ["Contradiction in the premises", true]}
{"text": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Unsupervised learning is used to train the state-of-the-art text summarization model?", "id": "139", "ground_truth": "False", "reasoning": "Premise 1.1: The Machine Learning algorithm for training text summarization model requires labelled data.\nPremise 1.2: Unsupervised learning doesn't require labelled data.\nConclusion 1: Unsupervised learning is not used to train the state-of-the-art text summarization model.\nPremise 2.1: Conclusion 1\nAnswer: B. No", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "The Machine Learning algorithm for training text summarization model requires labelled data .", "1": "Unsupervised learning does n't require labelled data .", "2": "Unsupervised learning is not used to train the state - of - the - art text summarization model ."}], "errors": [[]], "entailments_dict": [{"2": ["(¬1)"], "(¬2)": ["1"]}], "predicted_steps": [false]}
{"text": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ben is loved by children?", "id": "140", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: If a cartoon character is from The Simpsons, then it is loved by children.\nPremise 1.2: If a cartoon character is yellow, then it is from The Simpsons.\nPremise 1.3: Ben is either from The Simpsons or funny.\nConclusion 1: Ben is either loved by children or funny.\n\nPremise 2.1: If a cartoon character is loved by children, then it is funny.\nPremise 2.2: Ben is either loved by children or funny.\nConclusion 2: Ben is loved by children or Ben is loved by children.\nConclusion 2: Ben is loved by children.\nAnswer: A. Yes", "logic_premises": "[[(((8∧9)→a)∪((b∧c)→d)), (((e∧f)→g)∪((h∧i)→j)), 6], [((6∧7)→8), 3]]", "logic_conclusion": "[7, (4∨5)]", "correspondance": [{"0": "X is a cartoon character", "1": "X is from The Simpsons .", "2": "X is loved by children .", "3": "X is a cartoon character", "4": "X is yellow .", "5": "X is from The Simpsons .", "6": "Ben is either from The Simpsons or funny .", "7": "Ben is either loved by children or funny .", "8": "The Simpsons is a cartoon character", "9": "The Simpsons is from The Simpsons .", "a": "The Simpsons is loved by children .", "b": "Ben is a cartoon character", "c": "Ben is from The Simpsons .", "d": "Ben is loved by children .", "e": "The Simpsons is a cartoon character", "f": "The Simpsons is yellow .", "g": "The Simpsons is from The Simpsons .", "h": "Ben is a cartoon character", "i": "Ben is yellow .", "j": "Ben is from The Simpsons ."}, {"0": "X is a cartoon character", "1": "X is loved by children .", "2": "X is funny .", "3": "Ben is either loved by children or funny .", "4": "Ben is loved by children .", "5": "Ben is loved by children .", "6": "Ben is a cartoon character", "7": "Ben is loved by children .", "8": "Ben is funny ."}], "errors": [[]], "entailments_dict": [{"6": ["h", "b"], "j": ["c", "b"], "d": ["h"], "g": ["9"], "7": ["b", "h"], "(¬7)": ["b", "h"], "(¬6)": ["h", "b"], "(¬c)": ["h"], "(¬i)": ["b"]}, {"3": ["7", "6", "4", "5"], "4": ["7", "6"], "5": ["7", "6"], "(¬4)": ["6"], "(¬5)": ["6"], "(¬3)": ["6"]}], "predicted_steps": [false, true]}
{"text": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ben is ugly or yellow?", "id": "141", "ground_truth": "False", "reasoning": "Premise 1.1: If a cartoon character is from The Simpsons, then it is loved by children.\nPremise 1.2: If a cartoon character is loved by children, then it is funny.\nConclusion 1: If a cartoon character is from The Simpsons, then it is funny.\nPremise 2.1: If a cartoon character is yellow, then it is from The Simpsons.\nPremise 2.2: Conclusion 1\nConclusion 2: If a cartoon character is yellow, then it is funny.\nPremise 3.1: Ben is either from The Simpsons or funny.\nPremise 3.2: Conclusion 2\nConclusion 3: Ben is either yellow or funny.\nPremise 4.1: If a cartoon character is funny, then it is popular.\nPremise 4.2: If a cartoon character is ugly, then it is not popular.\nConclusion 4: If a cartoon character is ugly, then it is not funny.\nPremise 5.1: Conclusion 3\nPremise 5.2: Conclusion 4\nConclusion 5: Ben is either yellow or not ugly.\nAnswer: A. Yes", "logic_premises": "[[((0∧1)→2), ((3∧4)→5)], [((7∧8)→9), 3], [0, 1], [((0∧1)→2), ((3∧4)→5)], [0, 1]]", "logic_conclusion": "[((6∧7)→8), ((a∧b)→c), (2⊻3), ((6∧7)→8), (2⊻3)]", "correspondance": [{"0": "X is a cartoon character", "1": "X is from The Simpsons .", "2": "X is loved by children .", "3": "X is a cartoon character", "4": "X is loved by children .", "5": "X is funny .", "6": "X is a cartoon character", "7": "X is from The Simpsons .", "8": "X is funny ."}, {"0": "X is a cartoon character", "1": "X is yellow .", "2": "X is from The Simpsons .", "3": "Conclusion 1", "4": "X is a cartoon character", "5": "X is yellow .", "6": "X is funny .", "7": "The Simpsons is a cartoon character", "8": "The Simpsons is yellow .", "9": "The Simpsons is from The Simpsons .", "a": "The Simpsons is a cartoon character", "b": "The Simpsons is yellow .", "c": "The Simpsons is funny ."}, {"0": "Ben is either from The Simpsons or funny .", "1": "Conclusion 2", "2": "Ben is yellow .", "3": "Ben is funny ."}, {"0": "X is a cartoon character", "1": "X is funny .", "2": "X is popular .", "3": "X is a cartoon character", "4": "X is ugly .", "5": "X is not popular .", "6": "X is a cartoon character", "7": "X is ugly .", "8": "X is not funny ."}, {"0": "Conclusion 3", "1": "Conclusion 4", "2": "Ben is yellow .", "3": "Ben is not ugly ."}], "errors": [[]], "entailments_dict": [{"2": ["4"], "7": ["0", "1", "3"], "6": ["0", "3"], "5": ["8"]}, {"a": ["7"], "b": ["8"]}, {"0": ["3"]}, {"7": ["4"], "6": ["0", "3"], "5": ["(¬2)"], "2": ["(¬5)"], "(¬8)": ["1"]}, {"0": ["(¬1)"], "1": ["(¬0)"]}], "predicted_steps": [true, false, false, false, "Contradiction in the premises"]}
{"text": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ben is either yellow and ugly or neither yellow nor ugly?", "id": "142", "ground_truth": "True", "reasoning": "Premise 1.1: If a cartoon character is from The Simpsons, then it is loved by children.\nPremise 1.2: If a cartoon character is loved by children, then it is funny.\nConclusion 1: If a cartoon character is from The Simpsons, then it is funny.\nPremise 2.1: If a cartoon character is yellow, then it is from The Simpsons.\nPremise 2.2: Conclusion 1\nConclusion 2: If a cartoon character is yellow, then it is funny.\nPremise 3.1: Ben is either from The Simpsons or funny.\nPremise 3.2: Conclusion 2\nConclusion 3: Ben is either yellow or funny.\nPremise 4.1: If a cartoon character is funny, then it is popular.\nPremise 4.2: If a cartoon character is ugly, then it is not popular.\nConclusion 4: If a cartoon character is funny, then it is not ugly.\nPremise 5.1: Ben is either yellow or funny.\nPremise 5.2: Conclusion 4\nConclusion 5: Ben is either yellow and not ugly or funny and not ugly.\nPremise 6.1: If a cartoon character is ugly, then it is not popular.\nPremise 6.2: Conclusion 5\nConclusion 6: Ben is either yellow and ugly or neither yellow nor ugly is false.\nAnswer: A. Yes", "logic_premises": "[[((0∧1)→2), ((3∧4)→5)], [((7∧8)→9), 3], [0, 1], [((0∧1)→2), ((3∧4)→5)], [(0⊻1), 2], [((8∧9)→a), 3]]", "logic_conclusion": "[((6∧7)→8), ((a∧b)→c), (2⊻3), ((6∧7)→8), (3⊻4), ((4∧5)⊻(6∧7))]", "correspondance": [{"0": "X is a cartoon character", "1": "X is from The Simpsons .", "2": "X is loved by children .", "3": "X is a cartoon character", "4": "X is loved by children .", "5": "X is funny .", "6": "X is a cartoon character", "7": "X is from The Simpsons .", "8": "X is funny ."}, {"0": "X is a cartoon character", "1": "X is yellow .", "2": "X is from The Simpsons .", "3": "Conclusion 1", "4": "X is a cartoon character", "5": "X is yellow .", "6": "X is funny .", "7": "The Simpsons is a cartoon character", "8": "The Simpsons is yellow .", "9": "The Simpsons is from The Simpsons .", "a": "The Simpsons is a cartoon character", "b": "The Simpsons is yellow .", "c": "The Simpsons is funny ."}, {"0": "Ben is either from The Simpsons or funny .", "1": "Conclusion 2", "2": "Ben is yellow .", "3": "Ben is funny ."}, {"0": "X is a cartoon character", "1": "X is funny .", "2": "X is popular .", "3": "X is a cartoon character", "4": "X is ugly .", "5": "X is not popular .", "6": "X is a cartoon character", "7": "X is funny .", "8": "X is not ugly ."}, {"0": "Ben is yellow .", "1": "Ben is funny .", "2": "Conclusion 4", "3": "Ben is yellow .", "4": "Ben is not ugly ."}, {"0": "X is a cartoon character", "1": "X is ugly .", "2": "X is not popular .", "3": "Conclusion 5", "4": "Ben is yellow .", "5": "Ben is ugly .", "6": "neither yellow is false .", "7": "Neither ugly is not false .", "8": "Ben is a cartoon character", "9": "Ben is ugly .", "a": "Ben is not popular ."}], "errors": [[]], "entailments_dict": [{"2": ["4"], "7": ["0", "1", "3"], "6": ["0", "3"], "5": ["8"]}, {"a": ["7"], "b": ["8"]}, {"0": ["3"]}, {"7": ["1"], "6": ["0", "3"], "5": ["(¬2)"], "2": ["(¬5)"], "(¬8)": ["4"]}, {"3": ["0"], "0": ["3"]}, {"5": ["9"], "(¬4)": ["8"]}], "predicted_steps": [true, false, false, false, false, false]}
{"text": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some Heck cattle are artificially selected?", "id": "143", "ground_truth": "True", "reasoning": "Premise 1.1: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nPremise 1.2: Breeding back is a form of artificial selection.\nConclusion 1: Heck cattle were artificially selected.\nPremise 2.1: Heck cattle were artificially selected.\nAnswer: A. Yes.", "logic_premises": "[[((5→(1∧6))∪(7→(1∧8))), 3]]", "logic_conclusion": "[4]", "correspondance": [{"0": "X is Heck a cattle .", "1": "resembles the aurochs .", "2": "X was bred - back in the 1920s .", "3": "Breeding back is a form of artificial selection .", "4": "Heck cattle were artificially selected .", "5": "Heck cattle is Heck a cattle .", "6": "Heck cattle was bred - back in the 1920s .", "7": "the aurochs is Heck a cattle .", "8": "the aurochs was bred - back in the 1920s ."}], "errors": [[]], "entailments_dict": [{"4": ["5"], "(¬4)": ["5"]}], "predicted_steps": [false]}
{"text": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Aurochs are extinct?", "id": "144", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Some animals to be bred-back resemble animals that are extinct.\nPremise 1.2: Heck cattle were bred-back to resemble the aurochs.\nConclusion 1: Aurochs are extinct.\nPremise 2.1: Aurochs are extinct.\nAnswer: A. Yes.", "logic_premises": "[[0, (4→5)]]", "logic_conclusion": "[3]", "correspondance": [{"0": "Some animals to be bred - back resemble animals that are extinct .", "1": "X is a cattle .", "2": "Heck X was bred - back to resembles the aurochs .", "3": "the aurochs are extinct .", "4": "the aurochs is a cattle .", "5": "Heck the aurochs was bred - back to resembles the aurochs ."}], "errors": [[]], "entailments_dict": [{"3": ["(¬5)"]}], "predicted_steps": [false]}
{"text": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Jerry is young?", "id": "145", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: A person either studies or teaches.\nPremise 1.2: Jerry neither teaches nor is a manager.\nConclusion 1: Jerry studies.\nPremise 2.1: If someone studies, then they are a student.\nPremise 2.2: Jerry studies.\nConclusion 2: Jerry is a student.\nPremise 3.1: Rose is young or a student.\nPremise 3.2: Jerry is a student.\nConclusion 3: Jerry is young or a student, but we already know Jerry is a student, so Jerry is young.\nPremise 4.1: Jerry is young.\nAnswer: A. Yes", "logic_premises": "[[0, (1∧2)], [(4→5), 2], [0, 1]]", "logic_conclusion": "[3, 3, (2∧(3∧4))]", "correspondance": [{"0": "A person either studies or teaches .", "1": "Jerry does not teach .", "2": "Jerry is not a manager .", "3": "Jerry studies ."}, {"0": "X studies .", "1": "X are a student .", "2": "Jerry studies .", "3": "Jerry is a student .", "4": "Jerry studies .", "5": "Jerry are a student ."}, {"0": "Rose is young or a student .", "1": "Jerry is a student .", "2": "Jerry is young or a student .", "3": "we already know that Jerry is a student .", "4": "Jerry is young ."}], "errors": [[]], "entailments_dict": [{}, {"5": ["2", "3"], "2": ["4", "3"], "3": ["4", "2"]}, {"3": ["1"], "1": ["3"], "(¬3)": ["1"]}], "predicted_steps": [false, true, false]}
{"text": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Jerry is not young?", "id": "146", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: A person either studies or teaches.\nPremise 1.2: Jerry neither teaches nor is a manager.\nConclusion 1: Jerry studies.\nPremise 2.1: If someone studies, then they are a student.\nPremise 2.2: Jerry studies.\nConclusion 2: Jerry is a student.\nPremise 3.1: All students are humans.\nPremise 3.2: Jerry is a student.\nConclusion 3: Jerry is a human.\nPremise 4.1: Rose is young or a student.\nPremise 4.2: No young person teaches.\nConclusion 4: Jerry is not young (since Jerry is a student and no young person teaches).\nAnswer: A. Yes", "logic_premises": "[[0, (1∧2)], [(4→5), 2], [(4→5), 2], [0, ((4→5)∪(6→7))]]", "logic_conclusion": "[3, 3, 3, 3]", "correspondance": [{"0": "A person either studies or teaches .", "1": "Jerry does not teach .", "2": "Jerry is not a manager .", "3": "Jerry studies ."}, {"0": "X studies .", "1": "X are a student .", "2": "Jerry studies .", "3": "Jerry is a student .", "4": "Jerry studies .", "5": "Jerry are a student ."}, {"0": "X is a student .", "1": "X is a human .", "2": "Jerry is a student .", "3": "Jerry is a human .", "4": "Jerry is a student .", "5": "Jerry is a human ."}, {"0": "Rose is young or a student .", "1": "X is a young person .", "2": "X does not teach .", "3": "Jerry is not young .", "4": "Rose is a young person .", "5": "Rose does not teach .", "6": "Jerry is a young person .", "7": "Jerry does not teach ."}], "errors": [[]], "entailments_dict": [{}, {"5": ["2", "3"], "2": ["4", "3"], "3": ["4", "2"]}, {"2": ["4"], "5": ["3"]}, {"0": ["4", "(¬7)"], "(¬3)": ["6"]}], "predicted_steps": [false, true, true, true]}
{"text": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rose is a human or a manager?", "id": "147", "ground_truth": "True", "reasoning": "Premise 1.1: Rose is young or a student.\nPremise 1.2: A person either studies or teaches.\nConclusion 1: Rose either studies or teaches.\n\nPremise 2.1: Rose either studies or teaches.\nPremise 2.2: If someone studies, then they are a student.\nConclusion 2: Rose is a student or teaches.\n\nPremise 3.1: Rose is a student or teaches.\nPremise 3.2: No young person teaches.\nConclusion 3: If Rose is young, then Rose is a student.\n\nPremise 4.1: If Rose is young, then Rose is a student.\nPremise 4.2: Rose is young or a student.\nConclusion 4: Rose is a student.\n\nPremise 5.1: Rose is a student.\nPremise 5.2: All students are humans.\nConclusion 5: Rose is a human.\n\nPremise 6.1: Rose is a human.\nPremise 6.2: Jerry neither teaches nor is a manager. (Not relevant to the question)\nConclusion 6: Rose is a human.\n\nPremise 7.1: Rose is a human.\nAnswer: A. Yes", "logic_premises": "[[0, 1], [0, (4→5)], [0, (5→6)], [(0→1), 2], [0, (4→5)], [0, (1∧2)]]", "logic_conclusion": "[2, 3, (3→4), 3, 3, 3]", "correspondance": [{"0": "Rose is young or a student .", "1": "A person either studies or teaches .", "2": "Rose either studies or teaches ."}, {"0": "Rose either studies or teaches .", "1": "X studies .", "2": "X are a student .", "3": "Rose is a student or teaches .", "4": "Rose studies .", "5": "Rose are a student ."}, {"0": "Rose is a student or teaches .", "1": "X is a young person .", "2": "X does not teach .", "3": "Rose is young .", "4": "Rose is a student .", "5": "Rose is a young person .", "6": "Rose does not teach ."}, {"0": "Rose is young .", "1": "Rose is a student .", "2": "Rose is young or a student .", "3": "Rose is a student ."}, {"0": "Rose is a student .", "1": "X is a student .", "2": "X is a human .", "3": "Rose is a human .", "4": "Rose is a student .", "5": "Rose is a human ."}, {"0": "Rose is a human .", "1": "Jerry does not teach . .", "2": "Jerry is not a manager . .", "3": "Rose is a human ."}], "errors": [[]], "entailments_dict": [{"2": ["1"]}, {"5": ["0"], "0": ["4", "3"], "3": ["0", "4"]}, {"3": ["5"], "0": ["4", "(¬6)"], "6": ["(¬0)"]}, {"2": ["0"], "1": ["3"]}, {"0": ["4", "3"], "5": ["3"]}, {"3": ["0", "(¬2)", "(¬1)"], "0": ["3", "(¬2)", "(¬1)"], "2": ["(¬0)"], "1": ["(¬0)"]}], "predicted_steps": [false, true, false, true, true, "Contradiction in the premises"]}
{"text": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Rose is a human or Jerry is a manager?", "id": "148", "ground_truth": "True", "reasoning": "Premise 1.1: A person either studies or teaches.\nPremise 1.2: Jerry neither teaches nor is a manager.\nConclusion 1: Jerry studies.\nPremise 2.1: If someone studies, then they are a student.\nPremise 2.2: Jerry studies.\nConclusion 2: Jerry is a student.\nPremise 3.1: All students are humans.\nPremise 3.2: Jerry is a student.\nConclusion 3: Jerry is a human.\nPremise 4.1: Rose is young or a student.\nPremise 4.2: No young person teaches.\nConclusion 4: Rose is a student or Rose is young (but we don't know which one).\nPremise 5.1: Rose is a student or Rose is young.\nPremise 5.2: All students are humans.\nConclusion 5: Rose is a human or Rose is young.\nAnswer: A. Yes", "logic_premises": "[[0, (1∧2)], [(4→5), 2], [(4→5), 2], [0, (5→6)], [(0∨1), (6→7)]]", "logic_conclusion": "[3, 3, 3, (3∨4), (4∨5)]", "correspondance": [{"0": "A person either studies or teaches .", "1": "Jerry does not teach .", "2": "Jerry is not a manager .", "3": "Jerry studies ."}, {"0": "X studies .", "1": "X are a student .", "2": "Jerry studies .", "3": "Jerry is a student .", "4": "Jerry studies .", "5": "Jerry are a student ."}, {"0": "X is a student .", "1": "X is a human .", "2": "Jerry is a student .", "3": "Jerry is a human .", "4": "Jerry is a student .", "5": "Jerry is a human ."}, {"0": "Rose is young or a student .", "1": "X is a young person .", "2": "X does not teach .", "3": "Rose is a student .", "4": "Rose is young .", "5": "Rose is a young person .", "6": "Rose does not teach ."}, {"0": "Rose is a student .", "1": "Rose is young .", "2": "X is a student .", "3": "X is a human .", "4": "Rose is a human .", "5": "Rose is young .", "6": "Rose is a student .", "7": "Rose is a human ."}], "errors": [[]], "entailments_dict": [{}, {"5": ["2", "3"], "2": ["4", "3"], "3": ["4", "2"]}, {"2": ["4"], "5": ["3"]}, {"0": ["5", "4"], "4": ["5"], "3": ["5"]}, {"0": ["6", "4"], "5": ["1"], "1": ["5"], "7": ["4"]}], "predicted_steps": [false, true, true, true, true]}
{"text": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that It is not true that Rose is a student and Jerry is a human?", "id": "149", "ground_truth": "False", "reasoning": "Premise 1.1: A person either studies or teaches.\nPremise 1.2: Jerry neither teaches nor is a manager.\nConclusion 1: Jerry studies.\nPremise 2.1: If someone studies, then they are a student.\nPremise 2.2: Jerry studies.\nConclusion 2: Jerry is a student.\nPremise 3.1: All students are humans.\nPremise 3.2: Jerry is a student.\nConclusion 3: Jerry is a human.\nPremise 4.1: Rose is young or a student.\nPremise 4.2: No young person teaches.\nConclusion 4: Rose is a student or Rose teaches (but since no young person teaches, Rose is a student).\nConclusion 5: Rose is a student and Jerry is a human.\nAnswer: B. No", "logic_premises": "[[0, (1∧2)], [(4→5), 2], [(4→5), 2], [0, (5→6)]]", "logic_conclusion": "[3, 3, 3, (3∨4)]", "correspondance": [{"0": "A person either studies or teaches .", "1": "Jerry does not teach .", "2": "Jerry is not a manager .", "3": "Jerry studies ."}, {"0": "X studies .", "1": "X are a student .", "2": "Jerry studies .", "3": "Jerry is a student .", "4": "Jerry studies .", "5": "Jerry are a student ."}, {"0": "X is a student .", "1": "X is a human .", "2": "Jerry is a student .", "3": "Jerry is a human .", "4": "Jerry is a student .", "5": "Jerry is a human ."}, {"0": "Rose is young or a student .", "1": "X is a young person .", "2": "X does not teach .", "3": "Rose is a student .", "4": "Rose teaches .", "5": "Rose is a young person .", "6": "Rose does not teach ."}], "errors": [[]], "entailments_dict": [{}, {"5": ["2", "3"], "2": ["4", "3"], "3": ["4", "2"]}, {"2": ["4"], "5": ["3"]}, {"0": ["5"], "3": ["5"], "4": ["(¬0)", "(¬6)"]}], "predicted_steps": [false, true, true, false]}
{"text": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Neapolitan Chronicles is an English book?", "id": "150", "ground_truth": "True", "reasoning": "Premise 1.1: All of New Vessel Press's published books are in English.\nPremise 1.2: Neapolitan Chronicles is a book published by New Vessel Press.\nConclusion 1: Neapolitan Chronicles is in English.\nPremise 2.1: Neapolitan Chronicles is in English.\nAnswer: A. Yes.", "logic_premises": "[[((4→5)∪((6→7)∪((8→9)∪(a→b)))), 2]]", "logic_conclusion": "[3]", "correspondance": [{"0": "X is of a New Vessel Press 's 's published books .", "1": "X is in English .", "2": "Neapolitan Chronicles is a book published by New Vessel Press 's .", "3": "Neapolitan Chronicles is in English .", "4": "Neapolitan Chronicles is of a New Vessel Press 's 's published books .", "5": "Neapolitan Chronicles is in English .", "6": "New Vessel Press is of a New Vessel Press 's 's published books .", "7": "New Vessel Press is in English .", "8": "English is of a New Vessel Press 's 's published books .", "9": "English is in English .", "a": "New Vessel Presss published books is of a New Vessel Press 's 's published books .", "b": "New Vessel Presss published books is in English ."}], "errors": [[]], "entailments_dict": [{"2": ["a", "4", "6"], "3": ["a", "6"], "5": ["3"], "(¬3)": ["a", "6"], "(¬2)": ["a"]}], "predicted_steps": [true]}
{"text": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Harry Potter was published by New Vessel Press?", "id": "151", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: All of New Vessel Press's published books are in English.\nPremise 1.2: Neapolitan Chronicles is a book published by New Vessel Press and was translated from Italian.\nConclusion 1: Neapolitan Chronicles is in English.\nPremise 2.1: Palace of Flies is a book published by New Vessel Press.\nPremise 2.2: All of New Vessel Press's published books are in English.\nConclusion 2: Palace of Flies is in English.\nPremise 3.1: There is no information about Harry Potter being published by New Vessel Press.\nConclusion 3: It is uncertain whether Harry Potter was published by New Vessel Press.\nAnswer: C. Uncertain.", "logic_premises": "[[((5→6)∪((7→8)∪((9→a)∪((b→c)∪(d→e))))), (2∧3)], [0, ((4→5)∪((6→7)∪((8→9)∪(a→b))))], [((3→4)∪(5→6))]]", "logic_conclusion": "[4, 3, 2]", "correspondance": [{"0": "X is of a New Vessel Press 's 's published books .", "1": "X is in English .", "2": "Neapolitan Chronicles is a book published by New Vessel Press 's .", "3": "Neapolitan Chronicles was translated from Italian .", "4": "Neapolitan Chronicles is in English .", "5": "Neapolitan Chronicles is of a New Vessel Press 's 's published books .", "6": "Neapolitan Chronicles is in English .", "7": "New Vessel Presss published books is of a New Vessel Press 's 's published books .", "8": "New Vessel Presss published books is in English .", "9": "New Vessel Press is of a New Vessel Press 's 's published books .", "a": "New Vessel Press is in English .", "b": "English is of a New Vessel Press 's 's published books .", "c": "English is in English .", "d": "Italian is of a New Vessel Press 's 's published books .", "e": "Italian is in English ."}, {"0": "Palace of Flies is a book published by New Vessel Press .", "1": "X is of a New Vessel Press 's published books .", "2": "X is in English .", "3": "Palace of Flies is in English .", "4": "New Vessel Press is of a New Vessel Press 's published books .", "5": "New Vessel Press is in English .", "6": "English is of a New Vessel Press 's published books .", "7": "English is in English .", "8": "Palace of Flies is of a New Vessel Press 's published books .", "9": "Palace of Flies is in English .", "a": "New Vessel Presss published books is of a New Vessel Press 's published books .", "b": "New Vessel Presss published books is in English ."}, {"0": "X is an information about Harry Potter being published by New Vessel Press .", "1": "There is not X .", "2": "It is uncertain that Harry Potter was published by New Vessel Press .", "3": "New Vessel Press is an information about Harry Potter being published by New Vessel Press .", "4": "There is not New Vessel Press .", "5": "Harry Potter is an information about Harry Potter being published by New Vessel Press .", "6": "There is not Harry Potter ."}], "errors": [[]], "entailments_dict": [{"3": ["7", "9"], "2": ["7", "5", "9"], "4": ["7", "9"], "6": ["4"], "(¬4)": ["7", "9"], "(¬3)": ["7", "9"], "(¬2)": ["7"]}, {"0": ["a", "4", "8"], "3": ["a"], "9": ["3"], "(¬3)": ["a", "4"], "(¬0)": ["a"]}, {"2": ["(¬4)", "(¬6)"]}], "predicted_steps": [true, true, false]}
{"text": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Palace of Flies was translated from Italian?", "id": "152", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nPremise 1.2: Neapolitan Chronicles is a book published by New Vessel Press.\nPremise 1.3: Neapolitan Chronicles was translated from Italian.\nConclusion 1: New Vessel Press translates foreign literature into English.\nPremise 2.1: Palace of Flies is a book published by New Vessel Press.\nPremise 2.2: New Vessel Press translates foreign literature into English.\nConclusion 2: Palace of Flies was translated from a foreign language.\nPremise 3.1: Palace of Flies was translated from a foreign language.\nPremise 3.2: Neapolitan Chronicles was translated from Italian.\nConclusion 3: It is uncertain whether Palace of Flies was translated from Italian.\nAnswer: C. Uncertain.", "logic_premises": "[[0, 1, 2], [0, 1], [0, 1]]", "logic_conclusion": "[3, 2, 2]", "correspondance": [{"0": "New Vessel Press is a publishing house which specializes in translating foreign literature into English .", "1": "Neapolitan Chronicles is a book published by New Vessel Press .", "2": "Neapolitan Chronicles was translated from Italian .", "3": "New Vessel Press translates foreign literature into English ."}, {"0": "Palace of Flies is a book published by New Vessel Press .", "1": "New Vessel Press translates foreign literature into English .", "2": "Palace of Flies was translated from a foreign language ."}, {"0": "Palace of Flies was translated from a foreign language .", "1": "Neapolitan Chronicles was translated from Italian .", "2": "It is uncertain that Palace of Flies was translated from Italian ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "0": ["3"]}, {}, {"2": ["0"], "(¬2)": ["0"]}], "predicted_steps": [true, false, false]}
{"text": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Remy visits the office supply store regularly?", "id": "153", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nPremise 1.2: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nConclusion 1: Remy does not spend their free time tidying and organizing the spaces in their home.\nPremise 2.1: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their home.\nPremise 2.2: Remy does not spend their free time tidying and organizing the spaces in their home.\nConclusion 2: Remy does not work regularly and often at home.\nPremise 3.1: All people who work regularly and often at home visit the office supply store regularly.\nPremise 3.2: Remy does not work regularly and often at home.\nConclusion 3: Remy does not visit the office supply store regularly.\nPremise 4.1: Remy does not visit the office supply store regularly.\nAnswer: B. No", "logic_premises": "[[((c→(((1∧d)∧3)⊻((5∧f)∧7)))∪(g→(((1∧h)∧3)⊻((5∧j)∧7)))), ((k→(l∧m))∪(n→(o∧p)))], [((4→5)∪(6→7)), 2], [((4→5)∪(6→7)), 2]]", "logic_conclusion": "[b, 3, 3]", "correspondance": [{"0": "X is a day .", "1": "Remy goes to bed late .", "2": "Remy wakes up X after noon .", "3": "Remy spends Remy 's free time tidying and organizing the spaces in Remy 's home .", "4": "X is a day .", "5": "Remy does not goes to bed late .", "6": "Remy wakes up X after noon .", "7": "Remy spendses Remy 's free time tidying and organizing the spaces in Remy 's home .", "8": "X spend people 's free time tidying and organizing the spaces in people 's home .", "9": "X do not go to bed late .", "a": "X do not wake up every day after noon .", "b": "Remy does not spend Remy 's free time tidying and organizing the spaces in Remy 's home .", "c": "Remy is a day .", "d": "Remy wakes up Remy after noon .", "e": "Remy is a day .", "f": "Remy wakes up Remy after noon .", "g": "the spaces in their home is a day .", "h": "Remy wakes up the spaces in their home after noon .", "i": "the spaces in their home is a day .", "j": "Remy wakes up the spaces in their home after noon .", "k": "Remy spend people 's free time tidying and organizing the spaces in people 's home .", "l": "Remy do not go to bed late .", "m": "Remy do not wake up every day after noon .", "n": "the spaces in their home spend people 's free time tidying and organizing the spaces in people 's home .", "o": "the spaces in their home do not go to bed late .", "p": "the spaces in their home do not wake up every day after noon ."}, {"0": "X is a person who works regularly and often at home .", "1": "X spends their free time tidying and organizing the spaces in their home .", "2": "Remy does not spend Remy 's free time tidying and organizing the spaces in Remy 's home .", "3": "Remy does not work regularly and often at home .", "4": "Remy is a person who works regularly and often at home .", "5": "Remy spends their free time tidying and organizing the spaces in their home .", "6": "the spaces in their home is a person who works regularly and often at home .", "7": "the spaces in their home spends their free time tidying and organizing the spaces in their home ."}, {"0": "X is a person who works regularly and often at home .", "1": "X visits the office supply store regularly .", "2": "Remy does not work regularly and often at home .", "3": "Remy does not visit the office supply store regularly .", "4": "Remy is a person who works regularly and often at home .", "5": "Remy visits the office supply store regularly .", "6": "the office supply store is a person who works regularly and often at home .", "7": "the office supply store visits the office supply store regularly ."}], "errors": [[]], "entailments_dict": [{"7": ["n"], "l": ["(¬1)", "(¬f)", "(¬j)", "(¬d)", "(¬h)"], "f": ["(¬l)", "(¬o)", "(¬p)"], "j": ["(¬o)", "(¬l)"], "h": ["(¬o)", "(¬l)", "(¬5)"], "d": ["(¬l)", "(¬o)", "(¬p)", "(¬5)"], "1": ["(¬p)", "(¬l)", "(¬5)", "(¬5)"], "m": ["(¬f)", "(¬d)"], "o": ["(¬j)", "(¬d)", "(¬h)", "(¬f)"], "5": ["(¬p)"], "b": ["(¬j)", "(¬f)", "(¬h)", "(¬3)", "(¬7)", "(¬d)"]}, {"5": ["(¬2)"], "7": ["(¬2)"], "2": ["(¬5)", "(¬7)"], "(¬3)": ["4", "6"]}, {"7": ["(¬2)"], "3": ["(¬5)"], "(¬2)": ["4"], "(¬4)": ["2"]}], "predicted_steps": [false, true, false]}
{"text": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Remy has a fully stocked and impressive home office and also visits the office supply store regularly?", "id": "154", "ground_truth": "False", "reasoning": "Premise 1.1: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nPremise 1.2: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nConclusion 1: Remy does not spend their free time tidying and organizing the spaces in their home.\nPremise 2.1: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their home.\nPremise 2.2: Remy does not spend their free time tidying and organizing the spaces in their home.\nConclusion 2: Remy does not work regularly and often at home.\nPremise 3.1: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nPremise 3.2: If people own a large desktop monitor at their home, then they work regularly and often at home.\nPremise 3.3: Remy does not work regularly and often at home.\nConclusion 3: Remy does not have a fully stocked and impressive home office.\nPremise 4.1: All people who work regularly and often at home visit the office supply store regularly.\nPremise 4.2: Remy does not work regularly and often at home.\nConclusion 4: Remy does not visit the office supply store regularly.\nPremise 5.1: Remy does not have a fully stocked and impressive home office.\nPremise 5.2: Remy does not visit the office supply store regularly.\nAnswer: B. No.", "logic_premises": "[[((c→(((1∧d)∧3)⊻((5∧f)∧7)))∪(g→(((1∧h)∧3)⊻((5∧j)∧7)))), ((k→(l∧m))∪(n→(o∧p)))], [((4→5)∪(6→7)), 2], [((8∧9)→a), (b→c), 5], [((4→5)∪(6→7)), 2]]", "logic_conclusion": "[b, 3, (6∧7), 3]", "correspondance": [{"0": "X is a day .", "1": "Remy goes to bed late .", "2": "Remy wakes up X after noon .", "3": "Remy spends Remy 's free time tidying and organizing the spaces in Remy 's home .", "4": "X is a day .", "5": "Remy does not goes to bed late .", "6": "Remy wakes up X after noon .", "7": "Remy spendses Remy 's free time tidying and organizing the spaces in Remy 's home .", "8": "X spend people 's free time tidying and organizing the spaces in people 's home .", "9": "X do not go to bed late .", "a": "X do not wake up every day after noon .", "b": "Remy does not spend Remy 's free time tidying and organizing the spaces in Remy 's home .", "c": "Remy is a day .", "d": "Remy wakes up Remy after noon .", "e": "Remy is a day .", "f": "Remy wakes up Remy after noon .", "g": "the spaces in their home is a day .", "h": "Remy wakes up the spaces in their home after noon .", "i": "the spaces in their home is a day .", "j": "Remy wakes up the spaces in their home after noon .", "k": "Remy spend people 's free time tidying and organizing the spaces in people 's home .", "l": "Remy do not go to bed late .", "m": "Remy do not wake up every day after noon .", "n": "the spaces in their home spend people 's free time tidying and organizing the spaces in people 's home .", "o": "the spaces in their home do not go to bed late .", "p": "the spaces in their home do not wake up every day after noon ."}, {"0": "X is a person who works regularly and often at home .", "1": "X spends their free time tidying and organizing the spaces in their home .", "2": "Remy does not spend Remy 's free time tidying and organizing the spaces in Remy 's home .", "3": "Remy does not work regularly and often at home .", "4": "Remy is a person who works regularly and often at home .", "5": "Remy spends their free time tidying and organizing the spaces in their home .", "6": "the spaces in their home is a person who works regularly and often at home .", "7": "the spaces in their home spends their free time tidying and organizing the spaces in their home ."}, {"0": "X is a person who has a fully stocked home office .", "1": "X is a person who has a impressive home office .", "2": "X is a people who owns a large desktop monitor at their home .", "3": "X own a large desktop monitor at people 's home .", "4": "X work regularly and often at home .", "5": "Remy does not work regularly and often at home .", "6": "Remy does not have a fully stocked home office .", "7": "Remy does not have a impressive home office .", "8": "Remy is a person who has a fully stocked home office .", "9": "Remy is a person who has a impressive home office .", "a": "Remy is a people who owns a large desktop monitor at their home .", "b": "Remy own a large desktop monitor at people 's home .", "c": "Remy work regularly and often at home ."}, {"0": "X is a person who works regularly and often at home .", "1": "X visits the office supply store regularly .", "2": "Remy does not work regularly and often at home .", "3": "Remy does not visit the office supply store regularly .", "4": "Remy is a person who works regularly and often at home .", "5": "Remy visits the office supply store regularly .", "6": "the office supply store is a person who works regularly and often at home .", "7": "the office supply store visits the office supply store regularly ."}], "errors": [[]], "entailments_dict": [{"7": ["n"], "l": ["(¬1)", "(¬f)", "(¬j)", "(¬d)", "(¬h)"], "f": ["(¬l)", "(¬o)", "(¬p)"], "j": ["(¬o)", "(¬l)"], "h": ["(¬o)", "(¬l)", "(¬5)"], "d": ["(¬l)", "(¬o)", "(¬p)", "(¬5)"], "1": ["(¬p)", "(¬l)", "(¬5)", "(¬5)"], "m": ["(¬f)", "(¬d)"], "o": ["(¬j)", "(¬d)", "(¬h)", "(¬f)"], "5": ["(¬p)"], "b": ["(¬j)", "(¬f)", "(¬h)", "(¬3)", "(¬7)", "(¬d)"]}, {"5": ["(¬2)"], "7": ["(¬2)"], "2": ["(¬5)", "(¬7)"], "(¬3)": ["4", "6"]}, {"a": ["b"], "c": ["(¬5)"], "5": ["(¬c)"], "7": ["(¬a)"], "(¬7)": ["9"], "(¬6)": ["8", "9"]}, {"7": ["(¬2)"], "3": ["(¬5)"], "(¬2)": ["4"], "(¬4)": ["2"]}], "predicted_steps": [false, true, false, false]}
{"text": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office?", "id": "155", "ground_truth": "True", "reasoning": "Premise 1.1: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nPremise 1.2: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nConclusion 1: If Remy spends their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n\nPremise 2.1: Conclusion 1\nPremise 2.2: Remy either goes to bed late and wakes up every day after noon or does not go to bed late and wake up every day after noon.\nConclusion 2: Remy does not spend their free time tidying and organizing the spaces in their home.\n\nPremise 3.1: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their home.\nPremise 3.2: Remy does not spend their free time tidying and organizing the spaces in their home.\nConclusion 3: Remy does not work regularly and often at home.\n\nPremise 4.1: All people who work regularly and often at home visit the office supply store regularly.\nPremise 4.2: Remy does not work regularly and often at home.\nConclusion 4: Remy does not visit the office supply store regularly.\n\nPremise 5.1: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nPremise 5.2: All people who own a large desktop monitor at their home work regularly and often at home.\nPremise 5.3: Remy does not work regularly and often at home.\nConclusion 5: Remy does not have a fully stocked and impressive home office.\n\nPremise 6.1: Conclusion 4\nPremise 6.2: Conclusion 5\nConclusion 6: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\n\nAnswer: A. Yes", "logic_premises": "[[((e→(((1∧f)∧3)⊻((5∧h)∧7)))∪(i→(((1∧j)∧3)⊻((5∧l)∧7)))), ((m→(n∧o))∪(p→(q∧r)))], [0, ((7→((2∧8)⊻(4∧5)))∪(9→((2∧a)⊻(4∧5))))], [((4→5)∪(6→7)), 2], [((4→5)∪(6→7)), 2], [((8∧9)→a), (b→c), 5], [0, 1]]", "logic_conclusion": "[(b→(c∧d)), 6, 3, 3, (6∧7), (((2∧3)⊻4)→(5∧(6∨7)))]", "correspondance": [{"0": "X is a day .", "1": "Remy goes to bed late .", "2": "Remy wakes up X after noon .", "3": "Remy spends Remy 's free time tidying and organizing the spaces in Remy 's home .", "4": "X is a day .", "5": "Remy does not goes to bed late .", "6": "Remy wakes up X after noon .", "7": "Remy spendses Remy 's free time tidying and organizing the spaces in Remy 's home .", "8": "X spend people 's free time tidying and organizing the spaces in people 's home .", "9": "X do not go to bed late .", "a": "X do not wake up every day after noon .", "b": "Remy spends Remy 's free time tidying and organizing the spaces in Remy 's home .", "c": "Remy do not go to bed late .", "d": "Remy do not wake up every day after noon .", "e": "Remy is a day .", "f": "Remy wakes up Remy after noon .", "g": "Remy is a day .", "h": "Remy wakes up Remy after noon .", "i": "the spaces in their home is a day .", "j": "Remy wakes up the spaces in their home after noon .", "k": "the spaces in their home is a day .", "l": "Remy wakes up the spaces in their home after noon .", "m": "Remy spend people 's free time tidying and organizing the spaces in people 's home .", "n": "Remy do not go to bed late .", "o": "Remy do not wake up every day after noon .", "p": "the spaces in their home spend people 's free time tidying and organizing the spaces in people 's home .", "q": "the spaces in their home do not go to bed late .", "r": "the spaces in their home do not wake up every day after noon ."}, {"0": "Conclusion 1", "1": "X is a day .", "2": "Remy goes to bed late .", "3": "Remy wakes up X after noon .", "4": "Remy does not goes to bed late .", "5": "Remy wakes up every day after noon .", "6": "Remy does not spend Remy 's free time tidying and organizing the spaces in Remy 's home .", "7": "Remy is a day .", "8": "Remy wakes up Remy after noon .", "9": "the spaces in their home is a day .", "a": "Remy wakes up the spaces in their home after noon ."}, {"0": "X is a person who works regularly and often at home .", "1": "X spends their free time tidying and organizing the spaces in their home .", "2": "Remy does not spend Remy 's free time tidying and organizing the spaces in Remy 's home .", "3": "Remy does not work regularly and often at home .", "4": "Remy is a person who works regularly and often at home .", "5": "Remy spends their free time tidying and organizing the spaces in their home .", "6": "the spaces in their home is a person who works regularly and often at home .", "7": "the spaces in their home spends their free time tidying and organizing the spaces in their home ."}, {"0": "X is a person who works regularly and often at home .", "1": "X visits the office supply store regularly .", "2": "Remy does not work regularly and often at home .", "3": "Remy does not visit the office supply store regularly .", "4": "Remy is a person who works regularly and often at home .", "5": "Remy visits the office supply store regularly .", "6": "the office supply store is a person who works regularly and often at home .", "7": "the office supply store visits the office supply store regularly ."}, {"0": "X is a person who has a fully stocked home office .", "1": "X is a person who has a impressive home office .", "2": "X is a people who owns a large desktop monitor at their home .", "3": "X is a person who owns a large desktop monitor at their home .", "4": "X works regularly and often at home .", "5": "Remy does not work regularly and often at home .", "6": "Remy does not have a fully stocked home office .", "7": "Remy does not have a impressive home office .", "8": "Remy is a person who has a fully stocked home office .", "9": "Remy is a person who has a impressive home office .", "a": "Remy is a people who owns a large desktop monitor at their home .", "b": "Remy is a person who owns a large desktop monitor at their home .", "c": "Remy works regularly and often at home ."}, {"0": "Conclusion 4", "1": "Conclusion 5", "2": "Remy goes to bed late .", "3": "Remy wakes up every day after noon .", "4": "Remy visits the office supply store regularly .", "5": "Remy does not spend Remy 's free time tidying and organizing the spaces in Remy 's home .", "6": "Remy does not have a fully stocked home office .", "7": "Remy does not have a impressive home office ."}], "errors": [[]], "entailments_dict": [{"7": ["p"], "5": ["c", "(¬r)"], "n": ["c", "(¬l)", "(¬j)", "(¬h)", "(¬1)", "(¬f)"], "o": ["d", "(¬h)", "(¬f)"], "1": ["(¬n)", "(¬r)", "(¬5)", "(¬5)"], "l": ["(¬n)", "(¬q)"], "j": ["(¬n)", "(¬q)", "(¬5)"], "h": ["(¬n)", "(¬q)", "(¬r)"], "q": ["(¬j)", "(¬l)", "(¬h)", "(¬f)"], "f": ["(¬n)", "(¬q)", "(¬r)", "(¬5)"]}, {"8": ["(¬0)", "(¬4)"], "a": ["(¬0)", "(¬4)"], "6": ["(¬a)", "(¬8)"], "2": ["(¬4)", "(¬4)"]}, {"5": ["(¬2)"], "7": ["(¬2)"], "2": ["(¬5)", "(¬7)"], "(¬3)": ["4", "6"]}, {"7": ["(¬2)"], "3": ["(¬5)"], "(¬2)": ["4"], "(¬4)": ["2"]}, {"a": ["b"], "c": ["(¬5)"], "5": ["(¬c)"], "7": ["(¬a)"], "(¬7)": ["9"], "(¬6)": ["8", "9"]}, {"0": ["(¬1)"], "1": ["(¬0)"]}], "predicted_steps": [false, false, true, false, false, "Contradiction in the premises"]}
{"text": "All humans are mortal. All Greeks are humans.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some Greeks are mortal?", "id": "156", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: All humans are mortal.\nPremise 1.2: All Greeks are humans.\nConclusion 1: All Greeks are mortal.\nPremise 2.1: All Greeks are mortal.\nConclusion 2: Some Greeks are mortal.\nAnswer: A. Yes", "logic_premises": "[[(0→1), (2→3)], [(0→1)]]", "logic_conclusion": "[(4→5), 2]", "correspondance": [{"0": "X is a human .", "1": "X is mortal .", "2": "X is a Greek .", "3": "X is a human .", "4": "X is a Greek .", "5": "X is mortal ."}, {"0": "X is a Greek .", "1": "X is mortal .", "2": "Some Greeks are mortal ."}], "errors": [[]], "entailments_dict": [{"3": ["0", "5"], "4": ["2"], "1": ["5"]}, {}], "predicted_steps": [true, false]}
{"text": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James has a part-time job offered by the university?", "id": "157", "ground_truth": "False", "reasoning": "Premise 1.1: All students working in the lab are instructed by professor David.\nPremise 1.2: James is a student working in the lab.\nConclusion 1: James is instructed by professor David.\nPremise 2.1: All students instructed by professor David are taking the database course.\nPremise 2.2: James is instructed by professor David.\nConclusion 2: James is taking the database course.\nPremise 3.1: All students who take the database course are from the computer science department.\nPremise 3.2: James is taking the database course.\nConclusion 3: James is from the computer science department.\nPremise 4.1: No students who work in the library are from the computer science department.\nPremise 4.2: James is from the computer science department.\nConclusion 4: James does not work in the library.\nPremise 5.1: All students who have part-time jobs offered by the university are students who work in the library.\nPremise 5.2: James does not work in the library.\nConclusion 5: James does not have a part-time job offered by the university.\nAnswer: B. No", "logic_premises": "[[((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2]]", "logic_conclusion": "[3, 3, 3, 3, 3]", "correspondance": [{"0": "X is a student working in the lab .", "1": "X is instructed by professor David .", "2": "James is a student working in the lab .", "3": "James is instructed by professor David .", "4": "professor David is a student working in the lab .", "5": "professor David is instructed by professor David .", "6": "the lab is a student working in the lab .", "7": "the lab is instructed by professor David .", "8": "James is a student working in the lab .", "9": "James is instructed by professor David ."}, {"0": "X is a student instructed by professor David .", "1": "X is taking the database course .", "2": "James is instructed by professor David .", "3": "James is taking the database course .", "4": "the database course is a student instructed by professor David .", "5": "the database course is taking the database course .", "6": "professor David is a student instructed by professor David .", "7": "professor David is taking the database course .", "8": "James is a student instructed by professor David .", "9": "James is taking the database course ."}, {"0": "X is a student who takes the database course .", "1": "X is from the computer science department .", "2": "James is taking the database course .", "3": "James is from the computer science department .", "4": "the database course is a student who takes the database course .", "5": "the database course is from the computer science department .", "6": "the computer science department is a student who takes the database course .", "7": "the computer science department is from the computer science department .", "8": "James is a student who takes the database course .", "9": "James is from the computer science department ."}, {"0": "X is a student who works in the library .", "1": "X is not from the computer science department .", "2": "James is from the computer science department .", "3": "James does not work in the library .", "4": "the computer science department is a student who works in the library .", "5": "the computer science department is not from the computer science department .", "6": "the library is a student who works in the library .", "7": "the library is not from the computer science department .", "8": "James is a student who works in the library .", "9": "James is not from the computer science department ."}, {"0": "X is a student who has part - time jobs offered by the university .", "1": "X is a student who works in the library .", "2": "James does not work in the library .", "3": "James does not have a part - time job offered by the university .", "4": "the university is a student who has part - time jobs offered by the university .", "5": "the university is a student who works in the library .", "6": "the library is a student who has part - time jobs offered by the university .", "7": "the library is a student who works in the library .", "8": "James is a student who has part - time jobs offered by the university .", "9": "James is a student who works in the library ."}], "errors": [[]], "entailments_dict": [{"2": ["8", "(¬5)"], "9": ["3"], "5": ["(¬2)"]}, {"2": ["8"], "9": ["3"]}, {"2": ["8"], "9": ["3"]}, {"2": ["(¬5)", "(¬9)"], "9": ["(¬2)"]}, {"9": ["(¬2)"], "2": ["(¬9)"]}], "predicted_steps": [true, true, true, false, false]}
{"text": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James does not have a part-time job offered by the university?", "id": "158", "ground_truth": "True", "reasoning": "Premise 1.1: All students working in the lab are instructed by professor David.\nPremise 1.2: James is a student working in the lab.\nConclusion 1: James is instructed by professor David.\nPremise 2.1: All students instructed by professor David are taking the database course.\nPremise 2.2: James is instructed by professor David.\nConclusion 2: James is taking the database course.\nPremise 3.1: All students who take the database course are from the computer science department.\nPremise 3.2: James is taking the database course.\nConclusion 3: James is from the computer science department.\nPremise 4.1: No students who work in the library are from the computer science department.\nPremise 4.2: James is from the computer science department.\nConclusion 4: James does not work in the library.\nPremise 5.1: All students who have part-time jobs offered by the university are students who work in the library.\nPremise 5.2: James does not work in the library.\nConclusion 5: James does not have a part-time job offered by the university.\nAnswer: A. Yes", "logic_premises": "[[((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2]]", "logic_conclusion": "[3, 3, 3, 3, 3]", "correspondance": [{"0": "X is a student working in the lab .", "1": "X is instructed by professor David .", "2": "James is a student working in the lab .", "3": "James is instructed by professor David .", "4": "professor David is a student working in the lab .", "5": "professor David is instructed by professor David .", "6": "the lab is a student working in the lab .", "7": "the lab is instructed by professor David .", "8": "James is a student working in the lab .", "9": "James is instructed by professor David ."}, {"0": "X is a student instructed by professor David .", "1": "X is taking the database course .", "2": "James is instructed by professor David .", "3": "James is taking the database course .", "4": "the database course is a student instructed by professor David .", "5": "the database course is taking the database course .", "6": "professor David is a student instructed by professor David .", "7": "professor David is taking the database course .", "8": "James is a student instructed by professor David .", "9": "James is taking the database course ."}, {"0": "X is a student who takes the database course .", "1": "X is from the computer science department .", "2": "James is taking the database course .", "3": "James is from the computer science department .", "4": "the database course is a student who takes the database course .", "5": "the database course is from the computer science department .", "6": "the computer science department is a student who takes the database course .", "7": "the computer science department is from the computer science department .", "8": "James is a student who takes the database course .", "9": "James is from the computer science department ."}, {"0": "X is a student who works in the library .", "1": "X is not from the computer science department .", "2": "James is from the computer science department .", "3": "James does not work in the library .", "4": "the computer science department is a student who works in the library .", "5": "the computer science department is not from the computer science department .", "6": "the library is a student who works in the library .", "7": "the library is not from the computer science department .", "8": "James is a student who works in the library .", "9": "James is not from the computer science department ."}, {"0": "X is a student who has part - time jobs offered by the university .", "1": "X is a student who works in the library .", "2": "James does not work in the library .", "3": "James does not have a part - time job offered by the university .", "4": "the university is a student who has part - time jobs offered by the university .", "5": "the university is a student who works in the library .", "6": "the library is a student who has part - time jobs offered by the university .", "7": "the library is a student who works in the library .", "8": "James is a student who has part - time jobs offered by the university .", "9": "James is a student who works in the library ."}], "errors": [[]], "entailments_dict": [{"2": ["8", "(¬5)"], "9": ["3"], "5": ["(¬2)"]}, {"2": ["8"], "9": ["3"]}, {"2": ["8"], "9": ["3"]}, {"2": ["(¬5)", "(¬9)"], "9": ["(¬2)"]}, {"9": ["(¬2)"], "2": ["(¬9)"]}], "predicted_steps": [true, true, true, false, false]}
{"text": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that James either takes the database course or has a part-time job offered by the university?", "id": "159", "ground_truth": "True", "reasoning": "Premise 1.1: All students working in the lab are instructed by professor David.\nPremise 1.2: James is a student working in the lab.\nConclusion 1: James is instructed by professor David.\nPremise 2.1: All students instructed by professor David are taking the database course.\nPremise 2.2: James is instructed by professor David.\nConclusion 2: James is taking the database course.\nPremise 3.1: All students who take the database course are from the computer science department.\nPremise 3.2: James is taking the database course.\nConclusion 3: James is from the computer science department.\nPremise 4.1: No students who work in the library are from the computer science department.\nPremise 4.2: James is from the computer science department.\nConclusion 4: James does not work in the library.\nPremise 5.1: All students who have part-time jobs offered by the university are students who work in the library.\nPremise 5.2: James does not work in the library.\nConclusion 5: James does not have a part-time job offered by the university.\nPremise 6.1: James does not have a part-time job offered by the university.\nPremise 6.2: James is taking the database course.\nConclusion 6: James either takes the database course or has a part-time job offered by the university.\nAnswer: A. Yes", "logic_premises": "[[((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2], [0, 1]]", "logic_conclusion": "[3, 3, 3, 3, 3, (2⊻3)]", "correspondance": [{"0": "X is a student working in the lab .", "1": "X is instructed by professor David .", "2": "James is a student working in the lab .", "3": "James is instructed by professor David .", "4": "professor David is a student working in the lab .", "5": "professor David is instructed by professor David .", "6": "the lab is a student working in the lab .", "7": "the lab is instructed by professor David .", "8": "James is a student working in the lab .", "9": "James is instructed by professor David ."}, {"0": "X is a student instructed by professor David .", "1": "X is taking the database course .", "2": "James is instructed by professor David .", "3": "James is taking the database course .", "4": "the database course is a student instructed by professor David .", "5": "the database course is taking the database course .", "6": "professor David is a student instructed by professor David .", "7": "professor David is taking the database course .", "8": "James is a student instructed by professor David .", "9": "James is taking the database course ."}, {"0": "X is a student who takes the database course .", "1": "X is from the computer science department .", "2": "James is taking the database course .", "3": "James is from the computer science department .", "4": "the database course is a student who takes the database course .", "5": "the database course is from the computer science department .", "6": "the computer science department is a student who takes the database course .", "7": "the computer science department is from the computer science department .", "8": "James is a student who takes the database course .", "9": "James is from the computer science department ."}, {"0": "X is a student who works in the library .", "1": "X is not from the computer science department .", "2": "James is from the computer science department .", "3": "James does not work in the library .", "4": "the computer science department is a student who works in the library .", "5": "the computer science department is not from the computer science department .", "6": "the library is a student who works in the library .", "7": "the library is not from the computer science department .", "8": "James is a student who works in the library .", "9": "James is not from the computer science department ."}, {"0": "X is a student who has part - time jobs offered by the university .", "1": "X is a student who works in the library .", "2": "James does not work in the library .", "3": "James does not have a part - time job offered by the university .", "4": "the university is a student who has part - time jobs offered by the university .", "5": "the university is a student who works in the library .", "6": "the library is a student who has part - time jobs offered by the university .", "7": "the library is a student who works in the library .", "8": "James is a student who has part - time jobs offered by the university .", "9": "James is a student who works in the library ."}, {"0": "James does not have a part - time job offered by the university .", "1": "James is taking the database course .", "2": "James takes the database course .", "3": "James has a part - time job offered by the university ."}], "errors": [[]], "entailments_dict": [{"2": ["8", "(¬5)"], "9": ["3"], "5": ["(¬2)"]}, {"2": ["8"], "9": ["3"]}, {"2": ["8"], "9": ["3"]}, {"2": ["(¬5)", "(¬9)"], "9": ["(¬2)"]}, {"9": ["(¬2)"], "2": ["(¬9)"]}, {"2": ["1"], "1": ["2"], "3": ["(¬0)"], "(¬3)": ["0"]}], "predicted_steps": [true, true, true, false, false, false]}
{"text": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Jack takes the database course?", "id": "160", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: All students working in the lab are instructed by professor David.\nPremise 1.2: James is a student working in the lab.\nConclusion 1: James is instructed by professor David.\nPremise 2.1: All students instructed by professor David are taking the database course.\nPremise 2.2: James is instructed by professor David.\nConclusion 2: James takes the database course.\nPremise 3.1: All students who take the database course are from the computer science department.\nPremise 3.2: James takes the database course.\nConclusion 3: James is from the computer science department.\nPremise 4.1: No students who work in the library are from the computer science department.\nPremise 4.2: All students who have part-time jobs offered by the university are students who work in the library.\nPremise 4.3: Jack neither has a part-time job offered by the university nor works in the lab.\nConclusion 4: Jack does not work in the library.\nPremise 5.1: Conclusion 4, Premise 4.1, and Premise 4.2\nConclusion 5: Jack is not from the computer science department.\nPremise 6.1: All students who take the database course are from the computer science department.\nPremise 6.2: Jack is not from the computer science department.\nConclusion 6: Jack does not take the database course.\nAnswer: B. No", "logic_premises": "[[((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2], [((4→5)∪((6→7)∪(8→9))), 2], [((7→8)∪((9→a)∪((b→c)∪((d→e)∪(f→g))))), ((h→i)∪((j→k)∪((l→m)∪((n→o)∪(p→q))))), (4∧5)], [0], [((4→5)∪((6→7)∪(8→9))), 2]]", "logic_conclusion": "[3, 3, 3, 6, 1, 3]", "correspondance": [{"0": "X is a student working in the lab .", "1": "X is instructed by professor David .", "2": "James is a student working in the lab .", "3": "James is instructed by professor David .", "4": "professor David is a student working in the lab .", "5": "professor David is instructed by professor David .", "6": "the lab is a student working in the lab .", "7": "the lab is instructed by professor David .", "8": "James is a student working in the lab .", "9": "James is instructed by professor David ."}, {"0": "X is a student instructed by professor David .", "1": "X is taking the database course .", "2": "James is instructed by professor David .", "3": "James takes the database course .", "4": "the database course is a student instructed by professor David .", "5": "the database course is taking the database course .", "6": "professor David is a student instructed by professor David .", "7": "professor David is taking the database course .", "8": "James is a student instructed by professor David .", "9": "James is taking the database course ."}, {"0": "X is a student who takes the database course .", "1": "X is from the computer science department .", "2": "James takes the database course .", "3": "James is from the computer science department .", "4": "the database course is a student who takes the database course .", "5": "the database course is from the computer science department .", "6": "the computer science department is a student who takes the database course .", "7": "the computer science department is from the computer science department .", "8": "James is a student who takes the database course .", "9": "James is from the computer science department ."}, {"0": "X is a student who works in the library .", "1": "X is not from the computer science department .", "2": "X is a student who has part - time jobs offered by the university .", "3": "X is a student who works in the library .", "4": "Jack does not have a part - time job offered by the university .", "5": "Jack does not work in the lab .", "6": "Jack does not work in the library .", "7": "the university is a student who works in the library .", "8": "the university is not from the computer science department .", "9": "the lab is a student who works in the library .", "a": "the lab is not from the computer science department .", "b": "Jack is a student who works in the library .", "c": "Jack is not from the computer science department .", "d": "the library is a student who works in the library .", "e": "the library is not from the computer science department .", "f": "the computer science department is a student who works in the library .", "g": "the computer science department is not from the computer science department .", "h": "the university is a student who has part - time jobs offered by the university .", "i": "the university is a student who works in the library .", "j": "the lab is a student who has part - time jobs offered by the university .", "k": "the lab is a student who works in the library .", "l": "Jack is a student who has part - time jobs offered by the university .", "m": "Jack is a student who works in the library .", "n": "the library is a student who has part - time jobs offered by the university .", "o": "the library is a student who works in the library .", "p": "the computer science department is a student who has part - time jobs offered by the university .", "q": "the computer science department is a student who works in the library ."}, {"0": "Conclusion 4 , Premise 4.1 , and Premise 4.2", "1": "Jack is not from the computer science department ."}, {"0": "X is a student who takes the database course .", "1": "X is from the computer science department .", "2": "Jack is not from the computer science department .", "3": "Jack does not take the database course .", "4": "the database course is a student who takes the database course .", "5": "the database course is from the computer science department .", "6": "Jack is a student who takes the database course .", "7": "Jack is from the computer science department .", "8": "the computer science department is a student who takes the database course .", "9": "the computer science department is from the computer science department ."}], "errors": [[]], "entailments_dict": [{"2": ["8", "(¬5)"], "9": ["3"], "5": ["(¬2)"]}, {"2": ["8"], "9": ["3"]}, {"2": ["8"], "9": ["3"]}, {"k": ["d", "9"], "o": ["d", "9"], "i": ["7"], "q": ["f"], "m": ["b"], "e": ["(¬i)", "(¬q)"], "8": ["(¬o)"], "g": ["(¬o)"], "6": ["(¬m)"], "(¬l)": ["4"]}, {}, {"7": ["(¬2)"], "2": ["(¬7)"], "(¬3)": ["6"]}], "predicted_steps": [true, true, true, false, false, true]}
{"text": "If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If George likes music and has access to a program, he will compose?", "id": "161", "ground_truth": "True", "reasoning": "Premise 1.1: If George likes music, he wants to compose.\nPremise 1.2: George likes music.\nConclusion 1: George wants to compose.\nPremise 2.1: If George has access to a program, he can compose.\nPremise 2.2: George has access to a program.\nConclusion 2: George can compose.\nPremise 3.1: If George can compose and wants to compose, he will compose.\nPremise 3.2: George can compose.\nPremise 3.3: George wants to compose.\nConclusion 3: George will compose.\nPremise 4.1: George likes music and has access to a program.\nPremise 4.2: George will compose.\nAnswer: A. Yes.", "logic_premises": "[[(0→1), 2], [(0→1), 2], [((0∧1)→2), 3, 4]]", "logic_conclusion": "[3, 3, 5]", "correspondance": [{"0": "George likes music .", "1": "George wants to compose .", "2": "George likes music .", "3": "George wants to compose ."}, {"0": "George has access to a program .", "1": "George can compose .", "2": "George has access to a program .", "3": "George can compose ."}, {"0": "George can compose .", "1": "George wants to compose .", "2": "George will compose .", "3": "George can compose .", "4": "George wants to compose .", "5": "George will compose ."}], "errors": [[]], "entailments_dict": [{"2": ["0"], "1": ["2", "3"], "3": ["0", "2"]}, {"2": ["0"], "1": ["3"]}, {"2": ["3", "5"], "4": ["0", "1", "3"], "3": ["0"], "5": ["0", "3"]}], "predicted_steps": [true, true, true]}
{"text": "If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If George will not compose, George can not compose?", "id": "162", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: If George can compose and wants to compose, he will compose.\nPremise 1.2: If George will not compose, then either George can not compose or George does not want to compose.\nConclusion 1: If George will not compose, then either George can not compose or George does not like music.\nPremise 2.1: If George has access to a program, he can compose.\nPremise 2.2: If George will not compose, then either George can not compose or George does not like music.\nConclusion 2: If George will not compose, George can not compose.\nAnswer: A. Yes", "logic_premises": "[[((0∧1)→2), (3→(4⊻6))], [(0→1), (2→(3⊻5))]]", "logic_conclusion": "[(7→(8⊻a)), (6→7)]", "correspondance": [{"0": "George can compose .", "1": "George wants to compose .", "2": "George will compose .", "3": "George will not compose .", "4": "George can not compose .", "5": "George will not compose .", "6": "George does not want to compose .", "7": "George will not compose .", "8": "George can not compose .", "9": "George will not compose .", "a": "George does not like music ."}, {"0": "George has access to a program .", "1": "George can compose .", "2": "George will not compose .", "3": "George can not compose .", "4": "George will not compose .", "5": "George does not like music .", "6": "George will not compose .", "7": "George can not compose ."}], "errors": [[]], "entailments_dict": [{"6": ["0"], "7": ["3", "(¬2)"], "4": ["8", "(¬2)"], "2": ["(¬4)"], "(¬8)": ["0"], "(¬3)": ["0"]}, {"6": ["2"], "3": ["7", "(¬1)"], "1": ["(¬3)", "(¬5)"]}], "predicted_steps": [false, false]}
{"text": "A hawk never lands. Some birds are hawks.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that All birds lan?", "id": "163", "ground_truth": "False", "reasoning": "Premise 1.1: A hawk never lands.\nPremise 1.2: Some birds are hawks.\nConclusion 1: Some birds never land.\nPremise 2.1: Some birds never land.\nConclusion 2: Not all birds land.\nAnswer: B. No", "logic_premises": "[[0, 1], [0]]", "logic_conclusion": "[2, 1]", "correspondance": [{"0": "A hawk never lands .", "1": "Some birds are hawks .", "2": "Some birds never land ."}, {"0": "Some birds never land .", "1": "Not all birds land ."}], "errors": [[]], "entailments_dict": [{"0": ["1", "2"], "1": ["(¬0)"], "(¬0)": ["1"]}, {"1": ["0"], "0": ["1"]}], "predicted_steps": ["Contradiction in the premises", true]}
{"text": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Breaking Bad is on Monday at 8 pm?", "id": "164", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Everything on the Bachelor portrays the lives of real people.\nPremise 1.2: All shows portraying the lives of real people are reality TV shows.\nConclusion 1: The Bachelor is a reality TV show.\nPremise 2.1: Every rose given out on TV is on the Bachelor.\nPremise 2.2: On some Mondays at 8 pm, roses are given out on TV.\nConclusion 2: On some Mondays at 8 pm, The Bachelor is on TV.\nPremise 3.1: Breaking Bad is not a reality TV show.\nPremise 3.2: The Bachelor is a reality TV show.\nConclusion 3: Breaking Bad is not The Bachelor.\nPremise 4.1: On some Mondays at 8 pm, The Bachelor is on TV.\nPremise 4.2: Breaking Bad is not The Bachelor.\nConclusion 4: Breaking Bad is not on Monday at 8 pm.\nAnswer: B. No", "logic_premises": "[[((5→6)∪((7→8)∪(9→a))), ((b→c)∪((d→e)∪(f→g)))], [((4→5)∪(6→7)), 2], [0, 1], [0, 1]]", "logic_conclusion": "[4, 3, 2, 2]", "correspondance": [{"0": "X is a thing on the Bachelor .", "1": "X portrays the lives of real people .", "2": "X is a show portraying the lives of real person .", "3": "X is reality TV a show .", "4": "the Bachelor is a reality TV show .", "5": "the Bachelor is a thing on the Bachelor .", "6": "the Bachelor portrays the lives of real people .", "7": "The Bachelor is a thing on the Bachelor .", "8": "The Bachelor portrays the lives of real people .", "9": "the lives of real people is a thing on the Bachelor .", "a": "the lives of real people portrays the lives of real people .", "b": "the Bachelor is a show portraying the lives of real person .", "c": "the Bachelor is reality TV a show .", "d": "The Bachelor is a show portraying the lives of real person .", "e": "The Bachelor is reality TV a show .", "f": "the lives of real people is a show portraying the lives of real person .", "g": "the lives of real people is reality TV a show ."}, {"0": "X is a rose given out on TV .", "1": "X is on the Bachelor .", "2": "On some Mondays at 8 pm , roses are given out on TV .", "3": "On some Mondays at 8 pm , the Bachelor is on TV .", "4": "the Bachelor is a rose given out on TV .", "5": "the Bachelor is on the Bachelor .", "6": "The Bachelor is a rose given out on TV .", "7": "The Bachelor is on the Bachelor ."}, {"0": "breaking Bad is not a reality TV show .", "1": "The Bachelor is a reality TV show .", "2": "breaking Bad is not The Bachelor ."}, {"0": "On some Mondays at 8 pm , The Bachelor is on TV .", "1": "Breaking Bad is not The Bachelor .", "2": "Breaking Bad is not on Monday at 8 pm ."}], "errors": [[]], "entailments_dict": [{"6": ["d", "b", "4"], "8": ["d", "b", "4"], "e": ["9", "5", "7", "4"], "c": ["9", "5", "7", "4"], "a": ["f"], "4": ["7", "9", "5", "d", "b"], "(¬b)": ["5"]}, {"5": ["2"], "7": ["2"]}, {"2": ["0"], "1": ["2"], "(¬2)": ["1"]}, {}], "predicted_steps": [false, false, true, false]}
{"text": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Breaking Bad is a TV show in which roses are given out on Monday at 8 pm?", "id": "165", "ground_truth": "False", "reasoning": "Premise 1.1: Everything on the Bachelor portrays the lives of real people.\nPremise 1.2: All shows portraying the lives of real people are reality TV shows.\nConclusion 1: The Bachelor is a reality TV show.\nPremise 2.1: Every rose given out on TV is on the Bachelor.\nPremise 2.2: The Bachelor is a reality TV show.\nConclusion 2: Roses are not given out on non-reality TV shows.\nPremise 3.1: Breaking Bad is not a reality TV show.\nPremise 3.2: Roses are not given out on non-reality TV shows.\nConclusion 3: Roses are not given out on Breaking Bad.\nPremise 4.1: Roses are not given out on Breaking Bad.\nPremise 4.2: Roses are given out on some Mondays at 8 pm on TV.\nConclusion 4: Breaking Bad is not a TV show in which roses are given out on Monday at 8 pm.\nAnswer: B. No", "logic_premises": "[[((5→6)∪((7→8)∪(9→a))), ((b→c)∪((d→e)∪(f→g)))], [((5→6)∪(7→8)), 2], [0, (5→6)], [((4→5)∪(6→7)), 2]]", "logic_conclusion": "[4, ((9→a)∪(b→c)), (7→8), 3]", "correspondance": [{"0": "X is a thing on the Bachelor .", "1": "X portrays the lives of real people .", "2": "X is a show portraying the lives of real person .", "3": "X is reality TV a show .", "4": "the Bachelor is a reality TV show .", "5": "the Bachelor is a thing on the Bachelor .", "6": "the Bachelor portrays the lives of real people .", "7": "The Bachelor is a thing on the Bachelor .", "8": "The Bachelor portrays the lives of real people .", "9": "the lives of real people is a thing on the Bachelor .", "a": "the lives of real people portrays the lives of real people .", "b": "the Bachelor is a show portraying the lives of real person .", "c": "the Bachelor is reality TV a show .", "d": "The Bachelor is a show portraying the lives of real person .", "e": "The Bachelor is reality TV a show .", "f": "the lives of real people is a show portraying the lives of real person .", "g": "the lives of real people is reality TV a show ."}, {"0": "X is a rose given out on TV .", "1": "X is on the Bachelor .", "2": "the Bachelor is a reality TV show .", "3": "X is a Rose .", "4": "X is not given out on non - reality TV shows .", "5": "the Bachelor is a rose given out on TV .", "6": "the Bachelor is on the Bachelor .", "7": "The Bachelor is a rose given out on TV .", "8": "The Bachelor is on the Bachelor .", "9": "the Bachelor is a Rose .", "a": "the Bachelor is not given out on non - reality TV shows .", "b": "The Bachelor is a Rose .", "c": "The Bachelor is not given out on non - reality TV shows ."}, {"0": "breaking Bad is not a reality TV show .", "1": "X is a Rose .", "2": "X is not given out on non - reality TV shows .", "3": "X is a Rose .", "4": "X is not given out on breaking Bad .", "5": "Breaking Bad is a Rose .", "6": "Breaking Bad is not given out on non - reality TV shows .", "7": "Breaking Bad is a Rose .", "8": "Breaking Bad is not given out on breaking Bad ."}, {"0": "X is a Rose .", "1": "X is not given out on Breaking Bad .", "2": "Roses are given out on some Mondays at 8 pm on TV .", "3": "Breaking Bad is not a TV show in which roses are given out on Monday at 8 pm .", "4": "Breaking Bad is a Rose .", "5": "Breaking Bad is not given out on Breaking Bad .", "6": "Monday is a Rose .", "7": "Monday is not given out on Breaking Bad ."}], "errors": [[]], "entailments_dict": [{"6": ["d", "b", "4"], "8": ["d", "b", "4"], "e": ["9", "5", "7", "4"], "c": ["9", "5", "7", "4"], "a": ["f"], "4": ["7", "9", "5", "d", "b"], "(¬b)": ["5"]}, {"6": ["2"], "8": ["2"], "b": ["7", "5", "(¬2)"], "9": ["7", "5", "(¬2)"], "(¬a)": ["2"], "(¬c)": ["2"]}, {"6": ["0"], "7": ["0", "5", "(¬6)"], "0": ["(¬6)"], "(¬8)": ["0"]}, {"5": ["(¬2)"], "(¬3)": ["2"]}], "predicted_steps": [false, false, "Contradiction in the premises", false]}
{"text": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If roses are given out during Breaking Bad, then it is on Monday at 8 pm?", "id": "166", "ground_truth": "True", "reasoning": "Premise 1.1: Everything on the Bachelor portrays the lives of real people.\nPremise 1.2: All shows portraying the lives of real people are reality TV shows.\nConclusion 1: The Bachelor is a reality TV show.\nPremise 2.1: Breaking Bad is not a reality TV show.\nPremise 2.2: The Bachelor is a reality TV show.\nConclusion 2: Breaking Bad is not the Bachelor.\nPremise 3.1: Every rose given out on TV is on the Bachelor.\nPremise 3.2: Breaking Bad is not the Bachelor.\nConclusion 3: Roses are not given out on Breaking Bad.\nPremise 4.1: Roses are not given out on Breaking Bad.\nAnswer: B. No", "logic_premises": "[[((5→6)∪((7→8)∪(9→a))), ((b→c)∪((d→e)∪(f→g)))], [0, 1], [((5→6)∪(7→8)), 2]]", "logic_conclusion": "[4, 2, ((9→a)∪(b→c))]", "correspondance": [{"0": "X is a thing on the Bachelor .", "1": "X portrays the lives of real people .", "2": "X is a show portraying the lives of real person .", "3": "X is reality TV a show .", "4": "the Bachelor is a reality TV show .", "5": "the Bachelor is a thing on the Bachelor .", "6": "the Bachelor portrays the lives of real people .", "7": "The Bachelor is a thing on the Bachelor .", "8": "The Bachelor portrays the lives of real people .", "9": "the lives of real people is a thing on the Bachelor .", "a": "the lives of real people portrays the lives of real people .", "b": "the Bachelor is a show portraying the lives of real person .", "c": "the Bachelor is reality TV a show .", "d": "The Bachelor is a show portraying the lives of real person .", "e": "The Bachelor is reality TV a show .", "f": "the lives of real people is a show portraying the lives of real person .", "g": "the lives of real people is reality TV a show ."}, {"0": "breaking Bad is not a reality TV show .", "1": "The Bachelor is a reality TV show .", "2": "breaking Bad is not The Bachelor ."}, {"0": "X is a rose given out on TV .", "1": "X is on the Bachelor .", "2": "Breaking Bad is not the Bachelor .", "3": "X is a Rose .", "4": "X is not given out on Breaking Bad .", "5": "Breaking Bad is a rose given out on TV .", "6": "Breaking Bad is on the Bachelor .", "7": "the Bachelor is a rose given out on TV .", "8": "the Bachelor is on the Bachelor .", "9": "Breaking Bad is a Rose .", "a": "Breaking Bad is not given out on Breaking Bad .", "b": "the Bachelor is a Rose .", "c": "the Bachelor is not given out on Breaking Bad ."}], "errors": [[]], "entailments_dict": [{"6": ["d", "b", "4"], "8": ["d", "b", "4"], "e": ["9", "5", "7", "4"], "c": ["9", "5", "7", "4"], "a": ["f"], "4": ["7", "9", "5", "d", "b"], "(¬b)": ["5"]}, {"2": ["0"], "1": ["2"], "(¬2)": ["1"]}, {"b": ["7"], "2": ["(¬6)"], "6": ["(¬2)"], "(¬5)": ["2"]}], "predicted_steps": [false, true, false]}
{"text": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Heinrich Schmidt was either German or Russian?", "id": "167", "ground_truth": "True", "reasoning": "Premise 1.1: Heinrich Scmidt was a Nazi German politician.\nConclusion 1: Heinrich Schmidt was German.\nPremise 2.1: Heinrich Schmidt was German.\nConclusion 2: Heinrich Schmidt was either German or Russian.\nAnswer: A. Yes.", "logic_premises": "[[0], [0]]", "logic_conclusion": "[1, (1⊻2)]", "correspondance": [{"0": "Heinrich Scmidt was a Nazi German politician .", "1": "Heinrich Schmidt was German ."}, {"0": "Heinrich Schmidt was German .", "1": "Heinrich Schmidt was German .", "2": "Heinrich Schmidt was Russian ."}], "errors": [[]], "entailments_dict": [{"0": ["1"]}, {"1": ["0"], "0": ["1"], "2": ["(¬0)"]}], "predicted_steps": [true, false]}
{"text": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag?", "id": "168", "ground_truth": "True", "reasoning": "Premise 1.1: Heinrich Scmidt was a Nazi German politician.\nPremise 1.2: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nConclusion 1: Heinrich Scmidt, a Nazi German politician, was part of both the Prussian State Parliament and the Nazi Reichstag.\nPremise 2.1: Heinrich Scmidt, a Nazi German politician, was part of both the Prussian State Parliament and the Nazi Reichstag.\nConclusion 2: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nAnswer: A. Yes.", "logic_premises": "[[0, (1∧2)], [((0∧1)∧(2∧3))]]", "logic_conclusion": "[(3∧4), (4∧5)]", "correspondance": [{"0": "Heinrich Scmidt was a Nazi German politician .", "1": "Heinrich Scmidt was also a member of the Prussian State Parliament .", "2": "Heinrich Scmidt was also a member of the Nazi Reichstag .", "3": "Heinrich Scmidt , was part of the Prussian State Parliament .", "4": "Heinrich Scmidt , was part of the Nazi Reichstag ."}, {"0": "Heinrich Scmidt , was part of the Prussian State Parliament .", "1": "Heinrich Scmidt , was part of the Nazi Reichstag .", "2": "a Nazi German politician , was part of the Prussian State Parliament .", "3": "a Nazi German politician , was part of the Nazi Reichstag .", "4": "Some Nazi German politician was part of the Prussian State Parliament .", "5": "Some Nazi German politician was part of the Nazi Reichstag ."}], "errors": [[]], "entailments_dict": [{"2": ["0", "4"], "4": ["0", "2"], "3": ["1"], "1": ["3"]}, {"4": ["2"], "5": ["3"], "2": ["4"], "1": ["5"], "3": ["5"]}], "predicted_steps": [true, true]}
{"text": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that No politicans are part of the Nazi Reichstag?", "id": "169", "ground_truth": "False", "reasoning": "Premise 1.1: Heinrich Scmidt was a Nazi German politician.\nPremise 1.2: Heinrich Scmidt was also a member of the Nazi Reichstag.\nConclusion 1: There is at least one politician who is part of the Nazi Reichstag.\nPremise 2.1: There is at least one politician who is part of the Nazi Reichstag.\nAnswer: B. No", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "Heinrich Scmidt was a Nazi German politician .", "1": "Heinrich Scmidt was also a member of the Nazi Reichstag .", "2": "There is at least one politician who is part of the Nazi Reichstag ."}], "errors": [[]], "entailments_dict": [{"1": ["0", "2"], "0": ["2"]}], "predicted_steps": [true]}
{"text": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Colorectal cancer is a severe cance?", "id": "170", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: All severe cancers are deadly diseases.\nPremise 1.2: Bile duct cancer is a severe cancer.\nConclusion 1: Bile duct cancer is a deadly disease.\nPremise 2.1: If something is a deadly disease, then its survival rate is low.\nPremise 2.2: Bile duct cancer is a deadly disease.\nConclusion 2: Bile duct cancer has a low survival rate.\nPremise 3.1: All Cholangiocarcinoma is bile duct cancer.\nPremise 3.2: (No information about Colorectal cancer being Cholangiocarcinoma)\nConclusion 3: Uncertain about Colorectal cancer being a bile duct cancer.\nPremise 4.1: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nPremise 4.2: (No information about Colorectal cancer's survival rate)\nConclusion 4: Uncertain about Colorectal cancer's survival rate.\nPremise 5.1: Bile duct cancer is a severe cancer.\nPremise 5.2: (No information contradicting Colorectal cancer being a severe cancer)\nConclusion 5: Uncertain, but no evidence against Colorectal cancer being a severe cancer.\nAnswer: C. Uncertain.", "logic_premises": "[[(0→1), 2], [(0→1), 2], [(0→1), 2], [((0∧1)→2), 3], [0, 1]]", "logic_conclusion": "[3, 3, 3, 4, 2]", "correspondance": [{"0": "X is a severe cancer .", "1": "X is deadly a disease .", "2": "Bile duct cancer is a severe cancer .", "3": "Bile duct cancer is a deadly disease ."}, {"0": "X is a deadly disease .", "1": "X 's survival rate is low .", "2": "Bile duct cancer is a deadly disease .", "3": "Bile duct cancer has a low survival rate ."}, {"0": "X is a Cholangiocarcinoma .", "1": "X is bile duct cancer .", "2": ".", "3": "Uncertain about Colorectal cancer being a bile duct cancer ."}, {"0": "colorectal cancer is a bile duct cancer .", "1": "the survival rate is low .", "2": "colorectal cancer is not a bile duct cancer .", "3": ".", "4": "Uncertain about colorectal cancer 's survival rate ."}, {"0": "Bile duct cancer is a severe cancer .", "1": ".", "2": "Uncertain , but no evidence against Colorectal cancer being a severe cancer ."}], "errors": [[]], "entailments_dict": [{"3": ["2"]}, {"3": ["2"], "2": ["3"]}, {}, {}, {"2": ["1"]}], "predicted_steps": [false, true, false, false, false]}
{"text": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu?", "id": "171", "ground_truth": "True", "reasoning": "Premise 1.1: All severe cancers are deadly diseases.\nPremise 1.2: Bile duct cancer is a severe cancer.\nConclusion 1: Bile duct cancer is a deadly disease.\nPremise 2.1: If something is a deadly disease, then its survival rate is low.\nPremise 2.2: Bile duct cancer is a deadly disease.\nConclusion 2: The survival rate of bile duct cancer is low.\nPremise 3.1: All Cholangiocarcinoma is bile duct cancer.\nPremise 3.2: The survival rate of bile duct cancer is low.\nConclusion 3: The survival rate of Cholangiocarcinoma is low.\nPremise 4.1: No one with mild flu has a low survival rate.\nPremise 4.2: The survival rate of Cholangiocarcinoma is low.\nConclusion 4: Cholangiocarcinoma is not a mild flu.\nPremise 5.1: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nPremise 5.2: The survival rate of bile duct cancer is low.\nConclusion 5: If colorectal cancer is a bile duct cancer, then colorectal cancer is not a bile duct cancer.\nPremise 6.1: Conclusion 4 and Conclusion 5\nConclusion 6: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is not a bile duct cancer and not a mild flu.\nAnswer: B. No", "logic_premises": "[[(0→1), 2], [(4→5), 2], [((4→5)∪(6→7)), 2], [(4→5), 2], [((0∧1)→2), 3], [0]]", "logic_conclusion": "[3, 3, 3, 3, (4→5), ((1∨2)→(3∧4))]", "correspondance": [{"0": "X is a severe cancer .", "1": "X is deadly a disease .", "2": "Bile duct cancer is a severe cancer .", "3": "Bile duct cancer is a deadly disease ."}, {"0": "X is a deadly disease .", "1": "X 's survival rate is low .", "2": "Bile duct cancer is a deadly disease .", "3": "The survival rate of Bile duct cancer is low .", "4": "The survival rate of bile duct cancer is a deadly disease .", "5": "The survival rate of bile duct cancer 's survival rate is low ."}, {"0": "X is a Cholangiocarcinoma .", "1": "X is bile duct cancer .", "2": "The survival rate of bile duct cancer is low .", "3": "The survival rate of Cholangiocarcinoma is low .", "4": "The survival rate of Cholangiocarcinoma is a Cholangiocarcinoma .", "5": "The survival rate of Cholangiocarcinoma is bile duct cancer .", "6": "The survival rate of bile duct cancer is a Cholangiocarcinoma .", "7": "The survival rate of bile duct cancer is bile duct cancer ."}, {"0": "X is a person with mild flu .", "1": "X does not have a low survival rate .", "2": "The survival rate of Cholangiocarcinoma is low .", "3": "Cholangiocarcinoma is not a mild flu .", "4": "The survival rate of Cholangiocarcinoma is a person with mild flu .", "5": "The survival rate of Cholangiocarcinoma does not have a low survival rate ."}, {"0": "colorectal cancer is a bile duct cancer .", "1": "the survival rate is low .", "2": "colorectal cancer is not a bile duct cancer .", "3": "the survival rate is low .", "4": "colorectal cancer is a bile duct cancer .", "5": "colorectal cancer is not a bile duct cancer ."}, {"0": "Conclusion 4 and Conclusion 5", "1": "colorectal cancer is a bile duct cancer .", "2": "colorectal cancer is a Cholangiocarcinoma .", "3": "colorectal cancer is not a bile duct cancer .", "4": "colorectal cancer is not a mild flu ."}], "errors": [[]], "entailments_dict": [{"3": ["2"]}, {"5": ["2", "3"], "2": ["4", "3"], "3": ["4", "2"]}, {"3": ["(¬5)"]}, {"3": ["2"], "2": ["3", "(¬5)"], "5": ["(¬2)"]}, {"3": ["1"], "4": ["0", "(¬2)"], "2": ["5"], "(¬5)": ["0"]}, {}], "predicted_steps": [false, true, false, true, "Contradiction in the premises", false]}
{"text": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma?", "id": "172", "ground_truth": "False", "reasoning": "Premise 1.1: All severe cancers are deadly diseases.\nPremise 1.2: Bile duct cancer is a severe cancer.\nConclusion 1: Bile duct cancer is a deadly disease.\nPremise 2.1: If something is a deadly disease, then its survival rate is low.\nPremise 2.2: Bile duct cancer is a deadly disease.\nConclusion 2: Bile duct cancer has a low survival rate.\nPremise 3.1: All Cholangiocarcinoma is bile duct cancer.\nConclusion 3: All Cholangiocarcinoma has a low survival rate.\nPremise 4.1: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nPremise 4.2: Colorectal cancer has a low survival rate (from Conclusion 2).\nConclusion 4: If colorectal cancer is a bile duct cancer, then it is not a bile duct cancer (contradiction).\nPremise 5.1: No one with mild flu has a low survival rate.\nPremise 5.2: Colorectal cancer is not a mild flu.\nConclusion 5: Colorectal cancer has a low survival rate.\nPremise 6.1: Colorectal cancer has a low survival rate.\nPremise 6.2: All Cholangiocarcinoma has a low survival rate.\nConclusion 6: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nAnswer: A. Yes", "logic_premises": "[[(0→1), 2], [(0→1), 2], [(0→1)], [((0∧1)→2), 3], [(0→1), 2], [0, (1→2)]]", "logic_conclusion": "[3, 3, (2→3), (4→5), 3, ((3∧4)→(5∨6))]", "correspondance": [{"0": "X is a severe cancer .", "1": "X is deadly a disease .", "2": "Bile duct cancer is a severe cancer .", "3": "Bile duct cancer is a deadly disease ."}, {"0": "X is a deadly disease .", "1": "X 's survival rate is low .", "2": "Bile duct cancer is a deadly disease .", "3": "Bile duct cancer has a low survival rate ."}, {"0": "X is a Cholangiocarcinoma .", "1": "X is bile duct cancer .", "2": "X is a Cholangiocarcinoma .", "3": "X has a low survival rate ."}, {"0": "colorectal cancer is a bile duct cancer .", "1": "the survival rate is low .", "2": "colorectal cancer is not a bile duct cancer .", "3": "Colorectal cancer has a low survival rate .", "4": "colorectal cancer is a bile duct cancer .", "5": "colorectal cancer is not a bile duct cancer ."}, {"0": "X is a person with mild flu .", "1": "X does not have a low survival rate .", "2": "Colorectal cancer is not a mild flu .", "3": "Colorectal cancer has a low survival rate ."}, {"0": "Colorectal cancer has a low survival rate .", "1": "X is a Cholangiocarcinoma .", "2": "X has a low survival rate .", "3": "colorectal cancer is not a mild flu .", "4": "colorectal cancer is not a Cholangiocarcinoma .", "5": "colorectal cancer is a bile duct cancer .", "6": "colorectal cancer is a Cholangiocarcinoma ."}], "errors": [[]], "entailments_dict": [{"3": ["2"]}, {"3": ["2"], "2": ["3"]}, {"2": ["0"]}, {"3": ["1"], "4": ["0", "(¬2)"], "2": ["5"], "(¬5)": ["0"]}, {"3": ["2"], "2": ["(¬1)"]}, {}], "predicted_steps": [false, true, false, "Contradiction in the premises", false, false]}
{"text": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Taylor eats salads regularly?", "id": "173", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nConclusion 1: There are two possibilities for Taylor: (1) Taylor grew up in a health-conscious childhood home and has a good relationship with her parents, or (2) Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\n\nCase 1: Taylor grew up in a health-conscious childhood home and has a good relationship with her parents.\nPremise 2.1: All people who grew up in health-conscious childhood homes eat salads regularly.\nPremise 2.2: Taylor grew up in a health-conscious childhood home.\nConclusion 2: Taylor eats salads regularly. (Contradiction with the fact that if people have good relationships with their parents, then they do not eat salads regularly.)\n\nCase 2: Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nPremise 3.1: All people who grew up in health-conscious childhood homes eat salads regularly.\nPremise 3.2: Taylor did not grow up in a health-conscious childhood home.\nConclusion 3: Taylor does not eat salads regularly.\n\nAnswer: B. No", "logic_premises": "[[((0∧1)⊻(2∧3))], [(4→5), 2], [(4→5), 2]]", "logic_conclusion": "[4, 3, 3]", "correspondance": [{"0": "It is both true that Taylor grew up in a health - conscious childhood home .", "1": "Taylor has a good relationship with Taylor 's parents .", "2": "It is not true that Taylor grew up in a health - conscious childhood home .", "3": "It is not true that Taylor has a good relationship with Taylor 's parents .", "4": "There are two possibilities for Taylor : ."}, {"0": "X is a person who grew up in health - conscious childhood homes .", "1": "X eats salads regularly .", "2": "Taylor grew up in a health - conscious childhood home .", "3": "Taylor eats salads regularly . .", "4": "Taylor is a person who grew up in health - conscious childhood homes .", "5": "Taylor eats salads regularly ."}, {"0": "X is a person who grew up in health - conscious childhood homes .", "1": "X eats salads regularly .", "2": "Taylor did not grow up in a health - conscious childhood home .", "3": "Taylor does not eat salads regularly .", "4": "Taylor is a person who grew up in health - conscious childhood homes .", "5": "Taylor eats salads regularly ."}], "errors": [[]], "entailments_dict": [{"0": ["(¬2)"], "1": ["(¬3)"]}, {"2": ["4"], "5": ["3"]}, {"3": ["(¬5)"], "(¬4)": ["2"], "(¬2)": ["4"]}], "predicted_steps": [false, true, false]}
{"text": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Taylor visits the gym at least once a day?", "id": "174", "ground_truth": "False", "reasoning": "Premise 1.1: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nConclusion 1: Taylor either (grew up in a health-conscious childhood home and has a good relationship with her parents) or (neither grew up in a health-conscious childhood home nor has a good relationship with her parents).\n\nCase 1: Taylor grew up in a health-conscious childhood home and has a good relationship with her parents.\nPremise 1.2: All people who grew up in health-conscious childhood homes eat salads regularly.\nPremise 1.3: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\nConclusion 1.1: Taylor eats salads regularly and fulfills her nutritional daily intakes.\n\nCase 2: Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nPremise 2.1: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\nConclusion 2.1: Taylor does not fulfill her nutritional daily intakes.\n\nPremise 3.1: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nConclusion 3: Taylor does not visit the gym at least once a day (from Case 2).\n\nAnswer: B. No", "logic_premises": "[[((0∧1)⊻(2∧3))], [(6→7), (8→9)], [(3→4)], [((3→4)∪(5→6))]]", "logic_conclusion": "[4, (4∧5), 2, 2]", "correspondance": [{"0": "It is both true that Taylor grew up in a health - conscious childhood home .", "1": "Taylor has a good relationship with Taylor 's parents .", "2": "It is not true that Taylor grew up in a health - conscious childhood home .", "3": "It is not true that Taylor has a good relationship with Taylor 's parents .", "4": "Taylor either ."}, {"0": "X is a person who grew up in health - conscious childhood homes .", "1": "X eats salads regularly .", "2": "X have good relationships with people 's parents .", "3": "X fulfill X 's nutritional daily intakes .", "4": "Taylor eats salads regularly .", "5": "Taylor fulfills Taylor 's nutritional daily intakes .", "6": "Taylor is a person who grew up in health - conscious childhood homes .", "7": "Taylor eats salads regularly .", "8": "Taylor have good relationships with people 's parents .", "9": "Taylor fulfill Taylor 's nutritional daily intakes ."}, {"0": "X have good relationships with people 's parents .", "1": "X fulfill X 's nutritional daily intakes .", "2": "Taylor does not fulfill Taylor 's nutritional daily intakes .", "3": "Taylor have good relationships with people 's parents .", "4": "Taylor fulfill Taylor 's nutritional daily intakes ."}, {"0": "X visit the gym at least once a day .", "1": "X always fulfill X 's daily nutritional intakes .", "2": "Taylor does not visit the gym at least once a day .", "3": "the gym visit the gym at least once a day .", "4": "the gym always fulfill the gym 's daily nutritional intakes .", "5": "Taylor visit the gym at least once a day .", "6": "Taylor always fulfill Taylor 's daily nutritional intakes ."}], "errors": [[]], "entailments_dict": [{"0": ["(¬2)"], "1": ["(¬3)"]}, {"7": ["4"], "9": ["5"]}, {"2": ["(¬4)"]}, {"2": ["(¬6)"], "(¬2)": ["5"]}], "predicted_steps": [false, false, false, false]}
{"text": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day?", "id": "175", "ground_truth": "True", "reasoning": "Premise 1.1: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nPremise 1.2: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\nPremise 1.3: If people fulfill their nutritional daily intakes, then they grew up in health-conscious childhood homes.\nConclusion 1: If Taylor has a good relationship with her parents, then she grew up in a health-conscious childhood home.\n\nPremise 2.1: If people have good relationships with their parents, then they do not eat salads regularly.\nPremise 2.2: All people who grew up in health-conscious childhood homes eat salads regularly.\nConclusion 2: If Taylor has a good relationship with her parents, then she did not grow up in a health-conscious childhood home.\n\nPremise 3.1: Conclusion 1 and Conclusion 2 are contradictory.\nConclusion 3: Taylor does not have a good relationship with her parents.\n\nPremise 4.1: Taylor does not have a good relationship with her parents.\nPremise 4.2: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nConclusion 4: Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\n\nPremise 5.1: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nPremise 5.2: Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nPremise 5.3: If people fulfill their nutritional daily intakes, then they grew up in health-conscious childhood homes.\nConclusion 5: Taylor does not visit the gym at least once a day.\n\nPremise 6.1: Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\nAnswer: A. Yes", "logic_premises": "[[((0∧1)⊻(2∧3)), (a→b), (c→d)], [(6→7), (8→9)], [(0∧1)], [0, ((1∧2)⊻(3∧4))], [((7→8)∪(9→a)), (2∧3), ((b→c)∪(d→e))]]", "logic_conclusion": "[(8→9), (4→5), 2, (5∧6), 6]", "correspondance": [{"0": "It is both true that Taylor grew up in a health - conscious childhood home .", "1": "Taylor has a good relationship with Taylor 's parents .", "2": "It is not true that Taylor grew up in a health - conscious childhood home .", "3": "It is not true that Taylor has a good relationship with Taylor 's parents .", "4": "X have good relationships with people 's parents .", "5": "X fulfill X 's nutritional daily intakes .", "6": "X fulfill people 's nutritional daily intakes .", "7": "X grew up in health - conscious childhood homes .", "8": "Taylor has a good relationship with Taylor 's parents .", "9": "Taylor grew up in a health - conscious childhood home .", "a": "Taylor have good relationships with people 's parents .", "b": "Taylor fulfill Taylor 's nutritional daily intakes .", "c": "Taylor fulfill people 's nutritional daily intakes .", "d": "Taylor grew up in health - conscious childhood homes ."}, {"0": "X have good relationships with people 's parents .", "1": "X do not eat salads regularly .", "2": "X is a person who grew up in health - conscious childhood homes .", "3": "X eats salads regularly .", "4": "Taylor has a good relationship with Taylor 's parents .", "5": "Taylor did not grow up in a health - conscious childhood home .", "6": "Taylor have good relationships with people 's parents .", "7": "Taylor do not eat salads regularly .", "8": "Taylor is a person who grew up in health - conscious childhood homes .", "9": "Taylor eats salads regularly ."}, {"0": "Conclusion 1 are contradictory .", "1": "Conclusion 2 are contradictory .", "2": "Taylor does not have a good relationship with Taylor 's parents ."}, {"0": "Taylor does not have a good relationship with Taylor 's parents .", "1": "It is both true that Taylor grew up in a health - conscious childhood home .", "2": "Taylor has a good relationship with Taylor 's parents .", "3": "It is not true that Taylor grew up in a health - conscious childhood home .", "4": "It is not true that Taylor has a good relationship with Taylor 's parents .", "5": "Taylor did not grow up in a health - conscious childhood home .", "6": "Taylor does not have a good relationship with Taylor 's parents ."}, {"0": "X visit the gym at least once a day .", "1": "X always fulfill X 's daily nutritional intakes .", "2": "Taylor did not grow up in a health - conscious childhood home .", "3": "Taylor does not have a good relationship with Taylor 's parents .", "4": "X fulfill people 's nutritional daily intakes .", "5": "X grew up in health - conscious childhood homes .", "6": "Taylor does not visit the gym at least once a day .", "7": "the gym visit the gym at least once a day .", "8": "the gym always fulfill the gym 's daily nutritional intakes .", "9": "Taylor visit the gym at least once a day .", "a": "Taylor always fulfill Taylor 's daily nutritional intakes .", "b": "the gym fulfill people 's nutritional daily intakes .", "c": "the gym grew up in health - conscious childhood homes .", "d": "Taylor fulfill people 's nutritional daily intakes .", "e": "Taylor grew up in health - conscious childhood homes ."}], "errors": [[]], "entailments_dict": [{"d": ["0", "9", "(¬2)"], "1": ["a", "(¬3)"], "8": ["1", "a", "(¬3)"], "0": ["9", "(¬2)"], "2": ["(¬d)"], "b": ["(¬2)"], "(¬9)": ["2"], "(¬3)": ["a"]}, {"4": ["6"], "7": ["(¬9)"], "9": ["(¬7)"], "(¬5)": ["8"]}, {}, {"0": ["4", "6", "(¬2)"], "4": ["0", "6"], "6": ["0", "4", "(¬2)"], "5": ["3", "(¬1)"], "3": ["5"], "2": ["(¬0)", "(¬4)"], "1": ["(¬3)"], "(¬6)": ["2"], "(¬5)": ["1"], "(¬0)": ["2"], "(¬2)": ["0"]}, {"8": ["b"], "a": ["(¬2)"], "2": ["(¬e)"], "e": ["(¬2)"], "6": ["(¬a)"], "(¬6)": ["9"]}], "predicted_steps": [true, true, false, "Contradiction in the premises", false]}
{"text": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The world championships is a sporting event?", "id": "176", "ground_truth": "Uncertain", "reasoning": "There is no information about \"The world championships\" in the passage. The passage only talks about the Olympic games.\n\nAnswer: C. Uncertain.", "logic_premises": "[]", "logic_conclusion": "[]", "correspondance": [], "errors": ["No steps found in reasoning.", []], "entailments_dict": [], "predicted_steps": []}
{"text": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The last Olympic games were not in Tokyo?", "id": "177", "ground_truth": "False", "reasoning": "Premise 1.1: The last Olympic games was in Tokyo.\nConclusion 1: The last Olympic games was in Tokyo.\nPremise 2.1: The last Olympic games was in Tokyo.\nConclusion 2: It is not true that The last Olympic games were not in Tokyo.\nAnswer: B. No", "logic_premises": "[[0], [0]]", "logic_conclusion": "[1, 1]", "correspondance": [{"0": "the last Olympic games was in Tokyo .", "1": "the last Olympic games was in Tokyo ."}, {"0": "the last Olympic games was in Tokyo .", "1": "It is not true that the last Olympic games were not in Tokyo ."}], "errors": [[]], "entailments_dict": [{"1": ["0"], "0": ["1"]}, {"1": ["0"], "0": ["1"], "(¬1)": ["0"]}], "predicted_steps": [true, true]}
{"text": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that The United States won the most medals in the last Olympic games?", "id": "178", "ground_truth": "True", "reasoning": "Premise 1.1: The last Olympic games was in Tokyo.\nPremise 1.2: The United States won the most medals in Tokyo.\nConclusion 1: The United States won the most medals in the last Olympic games.\nPremise 2.1: The United States won the most medals in the last Olympic games.\nAnswer: A. Yes", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "the last Olympic games was in Tokyo .", "1": "The United States won the most medals in Tokyo .", "2": "The United States won the most medals in the last Olympic games ."}], "errors": [[]], "entailments_dict": [{}], "predicted_steps": [false]}
{"text": "All horses have hooves. No humans have hooves.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Some humans are horses?", "id": "179", "ground_truth": "False", "reasoning": "Premise 1.1: All horses have hooves.\nPremise 1.2: No humans have hooves.\nConclusion 1: Humans are not horses.\nPremise 2.1: Humans are not horses.\nConclusion 2: Some humans are not horses.\nAnswer: B. No", "logic_premises": "[[(0→1), (2→3)], [(0→1)]]", "logic_conclusion": "[(4→5), 2]", "correspondance": [{"0": "X is a horse .", "1": "X has hooves .", "2": "X is a human .", "3": "X does not have hooves .", "4": "X is a Human .", "5": "X is not a horse ."}, {"0": "X is a Human .", "1": "X is not a horse .", "2": "Some humans are not horses ."}], "errors": [[]], "entailments_dict": [{"4": ["2", "(¬1)"], "3": ["(¬1)"], "1": ["(¬3)"], "(¬5)": ["0"]}, {}], "predicted_steps": [true, false]}
{"text": "Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Susan flies from LGA airport?", "id": "180", "ground_truth": "False", "reasoning": "Premise 1.1: The departure and arrival can not be the same airport.\nPremise 1.2: Susan flies to LGA airport.\nConclusion 1: Susan does not fly from LGA airport.\nPremise 2.1: Susan does not fly from LGA airport.\nAnswer: B. No", "logic_premises": "[[(0∧1), 2]]", "logic_conclusion": "[3]", "correspondance": [{"0": "The departure can not be the same airport .", "1": "The arrival can not be the same airport .", "2": "Susan flies to LGA airport .", "3": "Susan does not fly from LGA airport ."}], "errors": [[]], "entailments_dict": [{"3": ["0", "(¬2)"], "(¬3)": ["2"]}], "predicted_steps": ["Contradiction in the premises"]}
{"text": "Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that John flies to LGA airport?", "id": "181", "ground_truth": "False", "reasoning": "Premise 1.1: Susan flies to LGA airport.\nPremise 1.2: The departure and arrival can not be the same airport.\nConclusion 1: Susan does not fly from LGA airport.\nPremise 2.1: John flies from LGA airport.\nPremise 2.2: Susan does not fly from LGA airport.\nConclusion 2: John does not fly to LGA airport.\nPremise 3.1: John does not fly to LGA airport.\nAnswer: B. No.", "logic_premises": "[[0, (1∧2)], [0, 1]]", "logic_conclusion": "[3, 2]", "correspondance": [{"0": "Susan flies to LGA airport .", "1": "The departure can not be the same airport .", "2": "The arrival can not be the same airport .", "3": "Susan does not fly from LGA airport ."}, {"0": "John flies from LGA airport .", "1": "Susan does not fly from LGA airport .", "2": "John does not fly to LGA airport ."}], "errors": [[]], "entailments_dict": [{"3": ["1", "(¬0)"], "(¬3)": ["0"]}, {"2": ["(¬0)"], "(¬2)": ["0"]}], "predicted_steps": ["Contradiction in the premises", false]}
{"text": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom is a grumpy person?", "id": "182", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: If someone owns a pet, then they love animals.\nPremise 1.2: Tom is a pet owner.\nConclusion 1: Tom loves animals.\nPremise 2.1: All animal lovers are nice to animals.\nPremise 2.2: Tom loves animals.\nConclusion 2: Tom is nice to animals.\nPremise 3.1: No one nice to animals is mean to animals.\nPremise 3.2: Tom is nice to animals.\nConclusion 3: Tom is not mean to animals.\nPremise 4.1: Some grumpy people are mean to animals.\nPremise 4.2: Tom is not mean to animals.\nConclusion 4: Tom is not a grumpy person.\nPremise 5.1: Tom is not a grumpy person.\nAnswer: B. No", "logic_premises": "[[(4→5), 2], [(4→5), 2], [(4→5), 2], [(4→5), 2]]", "logic_conclusion": "[3, 3, 3, 3]", "correspondance": [{"0": "X owns a pet .", "1": "X love animals .", "2": "Tom is a pet owner .", "3": "Tom loves animals .", "4": "Tom owns a pet .", "5": "Tom love animals ."}, {"0": "X is animal a lover .", "1": "X is nice to an animal .", "2": "Tom loves animals .", "3": "Tom is nice to animals .", "4": "Tom is animal a lover .", "5": "Tom is nice to an animal ."}, {"0": "X is a person nice to animals .", "1": "X is not mean to animals .", "2": "Tom is nice to animals .", "3": "Tom is not mean to animals .", "4": "Tom is a person nice to animals .", "5": "Tom is not mean to animals ."}, {"0": "X is a Some a grumpy person .", "1": "X is mean to an animal .", "2": "Tom is not mean to animals .", "3": "Tom is not a grumpy person .", "4": "Tom is a Some a grumpy person .", "5": "Tom is mean to an animal ."}], "errors": [[]], "entailments_dict": [{"2": ["4", "3"], "5": ["3"]}, {"2": ["4", "3"], "3": ["4", "2"], "5": ["3"]}, {"5": ["2", "3"], "2": ["4", "3"], "3": ["4", "2"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}], "predicted_steps": [true, true, true, true]}
{"text": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Tom is not a grumpy person and mean to animals?", "id": "183", "ground_truth": "True", "reasoning": "Premise 1.1: If someone owns a pet, then they love animals.\nPremise 1.2: Tom is a pet owner.\nConclusion 1: Tom loves animals.\nPremise 2.1: All animal lovers are nice to animals.\nPremise 2.2: Tom loves animals.\nConclusion 2: Tom is nice to animals.\nPremise 3.1: No one nice to animals is mean to animals.\nPremise 3.2: Tom is nice to animals.\nConclusion 3: Tom is not mean to animals.\nPremise 4.1: Some grumpy people are mean to animals.\nPremise 4.2: Tom is not mean to animals.\nConclusion 4: Tom is not a grumpy person and mean to animals.\nAnswer: A. Yes", "logic_premises": "[[(4→5), 2], [(4→5), 2], [(4→5), 2], [(4→5), 2]]", "logic_conclusion": "[3, 3, 3, 3]", "correspondance": [{"0": "X owns a pet .", "1": "X love animals .", "2": "Tom is a pet owner .", "3": "Tom loves animals .", "4": "Tom owns a pet .", "5": "Tom love animals ."}, {"0": "X is animal a lover .", "1": "X is nice to an animal .", "2": "Tom loves animals .", "3": "Tom is nice to animals .", "4": "Tom is animal a lover .", "5": "Tom is nice to an animal ."}, {"0": "X is a person nice to animals .", "1": "X is not mean to animals .", "2": "Tom is nice to animals .", "3": "Tom is not mean to animals .", "4": "Tom is a person nice to animals .", "5": "Tom is not mean to animals ."}, {"0": "X is a Some a grumpy person .", "1": "X is mean to an animal .", "2": "Tom is not mean to animals .", "3": "Tom is not a grumpy person and mean to animals .", "4": "Tom is a Some a grumpy person .", "5": "Tom is mean to an animal ."}], "errors": [[]], "entailments_dict": [{"2": ["4", "3"], "5": ["3"]}, {"2": ["4", "3"], "3": ["4", "2"], "5": ["3"]}, {"5": ["2", "3"], "2": ["4", "3"], "3": ["4", "2"]}, {"3": ["2", "(¬5)"], "5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}], "predicted_steps": [true, true, true, true]}
{"text": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover?", "id": "184", "ground_truth": "False", "reasoning": "Premise 1.1: If someone owns a pet, then they love animals.\nPremise 1.2: Tom is a pet owner.\nConclusion 1: Tom loves animals.\nPremise 2.1: All animal lovers are nice to animals.\nPremise 2.2: Tom loves animals.\nConclusion 2: Tom is nice to animals.\nPremise 3.1: No one nice to animals is mean to animals.\nPremise 3.2: Tom is nice to animals.\nConclusion 3: Tom is not mean to animals.\nPremise 4.1: Some grumpy people are mean to animals.\nPremise 4.2: Tom is not mean to animals.\nConclusion 4: Tom is not a grumpy person.\nPremise 5.1: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nPremise 5.2: Tom is not a grumpy person.\nPremise 5.3: Tom loves animals.\nConclusion 5: The statement \"If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover\" is false.\nAnswer: B. No", "logic_premises": "[[(4→5), 2], [(4→5), 2], [(4→5), 2], [(4→5), 2], [(0→(1∧2)), 3, 4]]", "logic_conclusion": "[3, 3, 3, 3, (5∧6)]", "correspondance": [{"0": "X owns a pet .", "1": "X love animals .", "2": "Tom is a pet owner .", "3": "Tom loves animals .", "4": "Tom owns a pet .", "5": "Tom love animals ."}, {"0": "X is animal a lover .", "1": "X is nice to an animal .", "2": "Tom loves animals .", "3": "Tom is nice to animals .", "4": "Tom is animal a lover .", "5": "Tom is nice to an animal ."}, {"0": "X is a person nice to animals .", "1": "X is not mean to animals .", "2": "Tom is nice to animals .", "3": "Tom is not mean to animals .", "4": "Tom is a person nice to animals .", "5": "Tom is not mean to animals ."}, {"0": "X is a Some a grumpy person .", "1": "X is mean to an animal .", "2": "Tom is not mean to animals .", "3": "Tom is not a grumpy person .", "4": "Tom is a Some a grumpy person .", "5": "Tom is mean to an animal ."}, {"0": "Tom is not a grumpy person and mean to animals .", "1": "Tom is not a grumpy person .", "2": "Tom is not an Animal Lover .", "3": "Tom is not a grumpy person .", "4": "Tom loves animals .", "5": "The statement is neither a grumpy person nor an Animal Lover \" is false .", "6": "Tom is neither a grumpy person nor an Animal Lover \" is false ."}], "errors": [[]], "entailments_dict": [{"2": ["4", "3"], "5": ["3"]}, {"2": ["4", "3"], "3": ["4", "2"], "5": ["3"]}, {"5": ["2", "3"], "2": ["4", "3"], "3": ["4", "2"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"1": ["3"], "6": ["0", "3"], "2": ["(¬4)"], "4": ["(¬2)"]}], "predicted_steps": [true, true, true, true, "Contradiction in the premises"]}
{"text": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dani Shapiro is a novel writer?", "id": "185", "ground_truth": "True", "reasoning": "Premise 1.1: Dani Shapiro is an American writer.\nPremise 1.2: Family History is written by Dani Shapiro.\nPremise 1.3: Family History is a novel written in 2003.\nConclusion 1: Dani Shapiro wrote a novel.\nPremise 2.1: If a book is novel and it is written by a person, then the person is a novel writer.\nPremise 2.2: Dani Shapiro wrote a novel.\nConclusion 2: Dani Shapiro is a novel writer.\nPremise 3.1: Dani Shapiro is a novel writer.\nAnswer: A. Yes", "logic_premises": "[[0, 1, 2], [((((6∧7)∧2)→3)∪(((8∧9)∧2)→3)), 4]]", "logic_conclusion": "[3, 5]", "correspondance": [{"0": "Dani Shapiro is an American writer .", "1": "Family History is written by Dani Shapiro .", "2": "Family History is a novel written in 2003 .", "3": "Dani Shapiro wrote a novel ."}, {"0": "X is a book", "1": "X is novel .", "2": "a book is written by a person .", "3": "a person is a novel writer .", "4": "Dani Shapiro wrote a novel .", "5": "Dani Shapiro is a novel writer .", "6": "the person is a book", "7": "the person is novel .", "8": "Dani Shapiro is a book", "9": "Dani Shapiro is novel ."}], "errors": [[]], "entailments_dict": [{"1": ["0"], "3": ["0"], "(¬3)": ["0"], "(¬1)": ["0"]}, {"4": ["2", "5"], "5": ["2", "4"], "(¬5)": ["2"]}], "predicted_steps": [false, true]}
{"text": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Family Secrets is a novel?", "id": "186", "ground_truth": "False", "reasoning": "Premise 1.1: Dani Shapiro created a podcast called Family Secrets.\nPremise 1.2: A podcast is not a novel.\nConclusion 1: Family Secrets is not a novel.\nPremise 2.1: Family Secrets is not a novel.\nAnswer: B. No", "logic_premises": "[[0, ((5→6)∪((7→8)∪((9→a)∪(b→c))))]]", "logic_conclusion": "[((d→e)∪((f→g)∪((h→i)∪(j→k))))]", "correspondance": [{"0": "Dani Shapiro created a podcast called Family Secrets .", "1": "X is A podcast", "2": "X is not a novel .", "3": "X is a podcast called Family Secrets", "4": "X is not a novel .", "5": "Family Secrets is A podcast", "6": "Family Secrets is not a novel .", "7": "Dani Shapiro is A podcast", "8": "Dani Shapiro is not a novel .", "9": "Family is A podcast", "a": "Family is not a novel .", "b": "Secrets is A podcast", "c": "Secrets is not a novel .", "d": "Family Secrets is a podcast called Family Secrets", "e": "Family Secrets is not a novel .", "f": "Dani Shapiro is a podcast called Family Secrets", "g": "Dani Shapiro is not a novel .", "h": "Family is a podcast called Family Secrets", "i": "Family is not a novel .", "j": "Secrets is a podcast called Family Secrets", "k": "Secrets is not a novel ."}], "errors": [[]], "entailments_dict": [{"0": ["b", "5", "k", "e"], "j": ["7", "b", "5", "(¬a)"], "f": ["0", "7", "b", "5", "(¬a)"], "d": ["7", "9", "b", "5", "(¬8)"], "h": ["7", "9", "5", "(¬8)", "(¬c)"], "a": ["i"], "6": ["k", "e"], "8": ["g"], "c": ["k"], "(¬0)": ["b"]}], "predicted_steps": ["Contradiction in the premises"]}
{"text": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Dani Shapiro was born in Boston?", "id": "187", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Dani Shapiro is an American writer.\nPremise 1.2: If a person is born in American City, the person is American.\nConclusion 1: Dani Shapiro was born in an American City.\nPremise 2.1: Dani Shapiro was born in an American City.\nPremise 2.2: Boston is an American city.\nConclusion 2: Dani Shapiro was born in Boston or some other American city.\nAnswer: C. Uncertain.", "logic_premises": "[[0, (((5∧6)→7)∪(((8∧9)→a)∪((b∧c)→d)))], [0, 1]]", "logic_conclusion": "[4, (2∨3)]", "correspondance": [{"0": "Dani Shapiro is an American writer .", "1": "X is a person", "2": "X is born in American City .", "3": "X is American .", "4": "Dani Shapiro was born in an American City .", "5": "the person is a person", "6": "the person is born in American City .", "7": "the person is American .", "8": "American City is a person", "9": "American City is born in American City .", "a": "American City is American .", "b": "Dani Shapiro is a person", "c": "Dani Shapiro is born in American City .", "d": "Dani Shapiro is American ."}, {"0": "Dani Shapiro was born in an American City .", "1": "Boston is an American city .", "2": "Dani Shapiro was born in Boston .", "3": "Dani Shapiro was born in some other American city ."}], "errors": [[]], "entailments_dict": [{"0": ["b", "5"], "d": ["0"], "4": ["0", "6", "5", "b", "c"], "(¬4)": ["5", "b"], "(¬0)": ["b", "5"]}, {"2": ["0", "1"], "3": ["0"], "0": ["3"], "(¬2)": ["1"], "(¬3)": ["0"]}], "predicted_steps": [false, true]}
{"text": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Yuri is an American?", "id": "188", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: If someone wears large shoes, they wear large-sized clothes.\nPremise 1.2: Yuri does not wear large-size clothes.\nConclusion 1: Yuri does not wear large shoes.\nPremise 2.1: If someone is tall, they wear large shoes.\nPremise 2.2: Yuri does not wear large shoes.\nConclusion 2: Yuri is not tall.\nPremise 3.1: All basketball players are tall.\nPremise 3.2: Yuri is not tall.\nConclusion 3: Yuri is not a basketball player.\nPremise 4.1: Some basketball players are not American.\nPremise 4.2: Yuri is not a basketball player.\nConclusion 4: Uncertain about Yuri's nationality.\nAnswer: C. Uncertain.", "logic_premises": "[[(5→(6∧7)), 3], [(4→5), 2], [(4→5), 2], [0, 1]]", "logic_conclusion": "[4, 3, 3, 2]", "correspondance": [{"0": "X wears large shoes .", "1": "X wear large clothes .", "2": "X wear sized clothes .", "3": "Yuri does not wear large - size clothes .", "4": "Yuri does not wear large shoes .", "5": "Yuri wears large shoes .", "6": "Yuri wear large clothes .", "7": "Yuri wear sized clothes ."}, {"0": "X is tall .", "1": "X wear large shoes .", "2": "Yuri does not wear large shoes .", "3": "Yuri is not tall .", "4": "Yuri is tall .", "5": "Yuri wear large shoes ."}, {"0": "X is basketball a player .", "1": "X is tall .", "2": "Yuri is not tall .", "3": "Yuri is not a basketball player .", "4": "Yuri is basketball a player .", "5": "Yuri is tall ."}, {"0": "Some basketball players are not American .", "1": "Yuri is not a basketball player .", "2": "Uncertain about Yuri 's nationality ."}], "errors": [[]], "entailments_dict": [{"3": ["(¬6)"], "6": ["(¬3)"], "4": ["(¬6)"], "(¬4)": ["5"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {}], "predicted_steps": [true, true, true, false]}
{"text": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Yuri is not an American basketball player?", "id": "189", "ground_truth": "True", "reasoning": "Premise 1.1: If someone is tall, they wear large shoes.\nPremise 1.2: All basketball players are tall.\nConclusion 1: All basketball players wear large shoes.\nPremise 2.1: If someone wears large shoes, they wear large-sized clothes.\nPremise 2.2: All basketball players wear large shoes.\nConclusion 2: All basketball players wear large-sized clothes.\nPremise 3.1: Yuri does not wear large-size clothes.\nPremise 3.2: All basketball players wear large-sized clothes.\nConclusion 3: Yuri is not a basketball player.\nPremise 4.1: Some basketball players are not American.\nPremise 4.2: Yuri is not a basketball player.\nConclusion 4: Uncertain whether Yuri is an American basketball player or not an American at all.\nAnswer: C. Uncertain", "logic_premises": "[[(0→1), (2→3)], [(0→(1∧2)), (3→4)], [0, (5→(6∧7))], [0, 1]]", "logic_conclusion": "[(4→5), (5→(6∧7)), 4, 2]", "correspondance": [{"0": "X is tall .", "1": "X wear large shoes .", "2": "X is basketball a player .", "3": "X is tall .", "4": "X is basketball a player .", "5": "X wears large shoes ."}, {"0": "X wears large shoes .", "1": "X wear large clothes .", "2": "X wear sized clothes .", "3": "X is basketball a player .", "4": "X wears large shoes .", "5": "X is basketball a player .", "6": "X wears large clothes .", "7": "X wears sized clothes ."}, {"0": "Yuri does not wear large - size clothes .", "1": "X is basketball a player .", "2": "X wears large clothes .", "3": "X wears sized clothes .", "4": "Yuri is not a basketball player .", "5": "Yuri is basketball a player .", "6": "Yuri wears large clothes .", "7": "Yuri wears sized clothes ."}, {"0": "Some basketball players are not American .", "1": "Yuri is not a basketball player .", "2": "Uncertain whether Yuri is an American basketball player or not an American at all ."}], "errors": [[]], "entailments_dict": [{"3": ["0"], "4": ["2"], "1": ["5"]}, {"4": ["0"], "5": ["3"], "2": ["7"], "1": ["7", "6"]}, {"6": ["(¬0)"], "0": ["(¬6)"], "(¬4)": ["5"]}, {"2": ["0", "(¬1)"], "(¬2)": ["0"]}], "predicted_steps": [true, true, true, "Contradiction in the premises"]}
{"text": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Yuri is an American basketball player?", "id": "190", "ground_truth": "False", "reasoning": "Premise 1.1: If someone wears large shoes, they wear large-sized clothes.\nPremise 1.2: Yuri does not wear large-size clothes.\nConclusion 1: Yuri does not wear large shoes.\nPremise 2.1: If someone is tall, they wear large shoes.\nPremise 2.2: Yuri does not wear large shoes.\nConclusion 2: Yuri is not tall.\nPremise 3.1: All basketball players are tall.\nPremise 3.2: Yuri is not tall.\nConclusion 3: Yuri is not a basketball player.\nPremise 4.1: Some basketball players are not American.\nPremise 4.2: Yuri is not a basketball player.\nConclusion 4: Uncertain whether Yuri is an American basketball player.\nAnswer: C. Uncertain", "logic_premises": "[[(5→(6∧7)), 3], [(4→5), 2], [(4→5), 2], [0, 1]]", "logic_conclusion": "[4, 3, 3, 2]", "correspondance": [{"0": "X wears large shoes .", "1": "X wear large clothes .", "2": "X wear sized clothes .", "3": "Yuri does not wear large - size clothes .", "4": "Yuri does not wear large shoes .", "5": "Yuri wears large shoes .", "6": "Yuri wear large clothes .", "7": "Yuri wear sized clothes ."}, {"0": "X is tall .", "1": "X wear large shoes .", "2": "Yuri does not wear large shoes .", "3": "Yuri is not tall .", "4": "Yuri is tall .", "5": "Yuri wear large shoes ."}, {"0": "X is basketball a player .", "1": "X is tall .", "2": "Yuri is not tall .", "3": "Yuri is not a basketball player .", "4": "Yuri is basketball a player .", "5": "Yuri is tall ."}, {"0": "Some basketball players are not American .", "1": "Yuri is not a basketball player .", "2": "Uncertain whether Yuri is an American basketball player ."}], "errors": [[]], "entailments_dict": [{"3": ["(¬6)"], "6": ["(¬3)"], "4": ["(¬6)"], "(¬4)": ["5"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"2": ["0", "(¬1)"], "(¬2)": ["0"]}], "predicted_steps": [true, true, true, "Contradiction in the premises"]}
{"text": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Yuri does not wear large shoes, then Yuri is an American basketball player?", "id": "191", "ground_truth": "False", "reasoning": "Premise 1.1: If someone wears large shoes, they wear large-sized clothes.\nPremise 1.2: Yuri does not wear large-size clothes.\nConclusion 1: Yuri does not wear large shoes.\nPremise 2.1: If someone is tall, they wear large shoes.\nPremise 2.2: Yuri does not wear large shoes.\nConclusion 2: Yuri is not tall.\nPremise 3.1: All basketball players are tall.\nPremise 3.2: Yuri is not tall.\nConclusion 3: Yuri is not a basketball player.\nPremise 4.1: Some basketball players are not American.\nPremise 4.2: Yuri is not a basketball player.\nConclusion 4: Uncertain whether Yuri is an American basketball player.\nAnswer: C. Uncertain", "logic_premises": "[[(5→(6∧7)), 3], [(4→5), 2], [(4→5), 2], [0, 1]]", "logic_conclusion": "[4, 3, 3, 2]", "correspondance": [{"0": "X wears large shoes .", "1": "X wear large clothes .", "2": "X wear sized clothes .", "3": "Yuri does not wear large - size clothes .", "4": "Yuri does not wear large shoes .", "5": "Yuri wears large shoes .", "6": "Yuri wear large clothes .", "7": "Yuri wear sized clothes ."}, {"0": "X is tall .", "1": "X wear large shoes .", "2": "Yuri does not wear large shoes .", "3": "Yuri is not tall .", "4": "Yuri is tall .", "5": "Yuri wear large shoes ."}, {"0": "X is basketball a player .", "1": "X is tall .", "2": "Yuri is not tall .", "3": "Yuri is not a basketball player .", "4": "Yuri is basketball a player .", "5": "Yuri is tall ."}, {"0": "Some basketball players are not American .", "1": "Yuri is not a basketball player .", "2": "Uncertain whether Yuri is an American basketball player ."}], "errors": [[]], "entailments_dict": [{"3": ["(¬6)"], "6": ["(¬3)"], "4": ["(¬6)"], "(¬4)": ["5"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"2": ["0", "(¬1)"], "(¬2)": ["0"]}], "predicted_steps": [true, true, true, "Contradiction in the premises"]}
{"text": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that If Yuri is not an American basketball player, then Yuri is a basketball player?", "id": "192", "ground_truth": "False", "reasoning": "Premise 1.1: If someone wears large shoes, they wear large-sized clothes.\nPremise 1.2: Yuri does not wear large-size clothes.\nConclusion 1: Yuri does not wear large shoes.\nPremise 2.1: If someone is tall, they wear large shoes.\nPremise 2.2: Yuri does not wear large shoes.\nConclusion 2: Yuri is not tall.\nPremise 3.1: All basketball players are tall.\nPremise 3.2: Yuri is not tall.\nConclusion 3: Yuri is not a basketball player.\nPremise 4.1: Yuri is not a basketball player.\nAnswer: B. No", "logic_premises": "[[(5→(6∧7)), 3], [(4→5), 2], [(4→5), 2]]", "logic_conclusion": "[4, 3, 3]", "correspondance": [{"0": "X wears large shoes .", "1": "X wear large clothes .", "2": "X wear sized clothes .", "3": "Yuri does not wear large - size clothes .", "4": "Yuri does not wear large shoes .", "5": "Yuri wears large shoes .", "6": "Yuri wear large clothes .", "7": "Yuri wear sized clothes ."}, {"0": "X is tall .", "1": "X wear large shoes .", "2": "Yuri does not wear large shoes .", "3": "Yuri is not tall .", "4": "Yuri is tall .", "5": "Yuri wear large shoes ."}, {"0": "X is basketball a player .", "1": "X is tall .", "2": "Yuri is not tall .", "3": "Yuri is not a basketball player .", "4": "Yuri is basketball a player .", "5": "Yuri is tall ."}], "errors": [[]], "entailments_dict": [{"3": ["(¬6)"], "6": ["(¬3)"], "4": ["(¬6)"], "(¬4)": ["5"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}], "predicted_steps": [true, true, true]}
{"text": "Events are either happy or sad. At least one event is happy.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that All events are sad?", "id": "193", "ground_truth": "False", "reasoning": "Premise 1.1: Events are either happy or sad.\nPremise 1.2: At least one event is happy.\nConclusion 1: Not all events are sad.\nPremise 2.1: Not all events are sad.\nAnswer: B. No", "logic_premises": "[[(0→(1⊻2)), 3]]", "logic_conclusion": "[4]", "correspondance": [{"0": "X is an Event .", "1": "X is happy .", "2": "X is sad .", "3": "At least one event is happy .", "4": "Not all events are sad ."}], "errors": [[]], "entailments_dict": [{"4": ["3"], "1": ["4", "(¬2)"], "3": ["4", "(¬2)"], "2": ["(¬3)"], "(¬4)": ["3"]}], "predicted_steps": [true]}
{"text": "The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Steinhauer was not the winner of the 1992 du Maurier Classic?", "id": "194", "ground_truth": "False", "reasoning": "Premise 1.1: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nPremise 1.2: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nConclusion 1: Descampe was in the six-way tie.\nPremise 2.1: There was one six-way tie on the leaderboard.\nPremise 2.2: Descampe was in the six-way tie.\nConclusion 2: There were six people in the tie, including Descampe.\nPremise 3.1: The winner of the 1992 du Maurier Classic was Steinhauer.\nPremise 3.2: There were six people in the tie, including Descampe.\nConclusion 3: Steinhauer was not in the six-way tie (because there can't be a winner and a tie at the same time).\nPremise 4.1: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nPremise 4.2: Steinhauer participated in the 1992 du Maurier Classic.\nPremise 4.3: Steinhauer was not in the six-way tie.\nConclusion 4: Steinhauer was the winner of the 1992 du Maurier Classic.\nAnswer: B. No", "logic_premises": "[[(0∧1), (2∧3)], [0, 1], [0, ((4→5)∪((6→7)∪((8→9)∪((a→b)∪(c→d)))))], [((5→6)∪((7→8)∪((9→a)∪((b→c)∪(d→e))))), 2, 3]]", "logic_conclusion": "[4, ((4→5)∪((6→7)∪((8→9)∪(a→b)))), 3, 4]", "correspondance": [{"0": "There was one six - way tie on the leaderboard .", "1": "one person in the six - way tie was from Belgium .", "2": "one person in the six - way tie is from Belgium .", "3": "one person in the six - way tie is on the leaderboard .", "4": "one person in the six - way tie was in the six - way tie ."}, {"0": "There was one six - way tie on the leaderboard .", "1": "Descampe was in one six - way tie on the leaderboard .", "2": "X is six a person .", "3": "There was X in one six - way tie on the leaderboard , including Descampe .", "4": "the leaderboard is six a person .", "5": "There was the leaderboard in one six - way tie on the leaderboard , including Descampe .", "6": "Descampe is six a person .", "7": "There was Descampe in one six - way tie on the leaderboard , including Descampe .", "8": "the six-way tie is six a person .", "9": "There was the six-way tie in one six - way tie on the leaderboard , including Descampe .", "a": "the tie is six a person .", "b": "There was the tie in one six - way tie on the leaderboard , including Descampe ."}, {"0": "The winner of the 1992 du Maurier Classic was Steinhauer .", "1": "X is six a person .", "2": "There was X in the tie , including Descampe .", "3": "Steinhauer was not in the tie .", "4": "Steinhauer is six a person .", "5": "There was Steinhauer in the tie , including Descampe .", "6": "the tie is six a person .", "7": "There was the tie in the tie , including Descampe .", "8": "The winner of the 1992 du Maurier Classic is six a person .", "9": "There was The winner of the 1992 du Maurier Classic in the tie , including Descampe .", "a": "Descampe is six a person .", "b": "There was Descampe in the tie , including Descampe .", "c": "the six-way tie is six a person .", "d": "There was the six-way tie in the tie , including Descampe ."}, {"0": "X is a person on the leaderboard of the 1992 du Maurier Classic .", "1": "X participated in the 1992 du Maurier Classic .", "2": "Steinhauer participated in the 1992 du Maurier Classic .", "3": "Steinhauer was not in the six - way tie .", "4": "Steinhauer was the winner of the 1992 du Maurier Classic .", "5": "Steinhauer is a person on the leaderboard of the 1992 du Maurier Classic .", "6": "Steinhauer participated in the 1992 du Maurier Classic .", "7": "the leaderboard of the 1992 du Maurier Classic is a person on the leaderboard of the 1992 du Maurier Classic .", "8": "the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic .", "9": "the winner of the 1992 du Maurier Classic is a person on the leaderboard of the 1992 du Maurier Classic .", "a": "the winner of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic .", "b": "the 1992 du Maurier Classic is a person on the leaderboard of the 1992 du Maurier Classic .", "c": "the 1992 du Maurier Classic participated in the 1992 du Maurier Classic .", "d": "the six-way tie is a person on the leaderboard of the 1992 du Maurier Classic .", "e": "the six-way tie participated in the 1992 du Maurier Classic ."}], "errors": [[]], "entailments_dict": [{"2": ["1"], "1": ["2"], "3": ["0"]}, {"1": ["0", "7", "9", "b"], "0": ["7"], "(¬7)": ["0", "1"], "(¬9)": ["0", "1"], "(¬b)": ["0", "1"], "(¬5)": ["0", "1"], "(¬1)": ["0"]}, {"3": ["(¬7)", "(¬5)", "(¬b)", "(¬d)"]}, {"6": ["2"], "4": ["5", "2"], "a": ["4"], "(¬4)": ["2"], "(¬5)": ["2"]}], "predicted_steps": [false, false, false, false]}
{"text": "The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic?", "id": "195", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nPremise 1.2: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nConclusion 1: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nPremise 2.1: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nAnswer: A. Yes", "logic_premises": "[[(0∧1), (2∧3)]]", "logic_conclusion": "[4]", "correspondance": [{"0": "Descampe is from Belgium .", "1": "Descampe is on the leaderboard of the 1992 du Maurier Classic .", "2": "There was one six - way tie on the leaderboard of the 1992 du Maurier Classic .", "3": "one person in the six - way tie was from Belgium .", "4": "Descampe is in the six - way tie in the leaderboard of the 1992 du Maurier Classic ."}], "errors": [[]], "entailments_dict": [{"4": ["1", "2"], "(¬4)": ["1", "2"]}], "predicted_steps": [false]}
{"text": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that KiKi is terricolous?", "id": "196", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nPremise 1.2: KiKi neither jumps nor has legs.\nConclusion 1: KiKi is terricolous or has legs.\nPremise 2.1: If an animal is terricolous, then it has legs.\nPremise 2.2: KiKi is terricolous or has legs.\nConclusion 2: KiKi has legs (if KiKi is terricolous, then it has legs, and KiKi has legs or is terricolous).\nPremise 3.1: If an animal has legs, then it jumps.\nPremise 3.2: KiKi has legs.\nConclusion 3: KiKi jumps (contradiction with Premise 1.2).\nConclusion 4: KiKi is terricolous (since KiKi neither jumps nor has legs, and KiKi is terricolous or has legs).\nAnswer: A. Yes", "logic_premises": "[[((0∧1)→(2∨3)), (4∧5)], [((6∧7)→8), (3∨4)], [((5∧6)→7), 3]]", "logic_conclusion": "[(6∨7), 5, 4]", "correspondance": [{"0": "KiKi does not jump .", "1": "KiKi does not have legs .", "2": "KiKi is terricolous .", "3": "KiKi has legs .", "4": "KiKi does not jump .", "5": "KiKi does not have legs .", "6": "KiKi is terricolous .", "7": "KiKi has legs ."}, {"0": "X is an animal", "1": "X is terricolous .", "2": "X has legs .", "3": "KiKi is terricolous .", "4": "KiKi has legs .", "5": "KiKi has legs .", "6": "KiKi is an animal", "7": "KiKi is terricolous .", "8": "KiKi has legs ."}, {"0": "X is an animal", "1": "X has legs .", "2": "X jumps .", "3": "KiKi has legs .", "4": "KiKi jumps .", "5": "KiKi is an animal", "6": "KiKi has legs .", "7": "KiKi jumps ."}], "errors": [[]], "entailments_dict": [{"5": ["1", "(¬3)"], "4": ["0"], "2": ["6"], "3": ["7", "(¬5)"], "7": ["(¬5)"], "(¬7)": ["1", "5"]}, {"3": ["7"], "8": ["4", "5"], "5": ["4"], "4": ["5"]}, {"7": ["3", "4"], "3": ["6"], "4": ["6", "3"]}], "predicted_steps": [true, false, false]}
{"text": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that KiKi barks and is a dog?", "id": "197", "ground_truth": "False", "reasoning": "Premise 1.1: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nPremise 1.2: KiKi neither jumps nor has legs.\nConclusion 1: KiKi is terricolous or has legs.\nPremise 2.1: If an animal is terricolous, then it has legs.\nPremise 2.2: KiKi is terricolous or has legs.\nConclusion 2: KiKi has legs.\nPremise 3.1: If an animal has legs, then it jumps.\nPremise 3.2: KiKi has legs.\nConclusion 3: KiKi jumps.\nPremise 4.1: If an animal jumps, then Jane likes it.\nPremise 4.2: KiKi jumps.\nConclusion 4: Jane likes KiKi.\nPremise 5.1: If an animal barks, then Jane does not like it.\nPremise 5.2: Jane likes KiKi.\nConclusion 5: KiKi does not bark.\nPremise 6.1: All dogs are animals that bark.\nPremise 6.2: KiKi does not bark.\nConclusion 6: KiKi is not a dog.\nAnswer: B. No", "logic_premises": "[[((0∧1)→(2∨3)), (4∧5)], [((6∧7)→8), (3∨4)], [((5∧6)→7), 3], [(((5∧6)→7)∪((8∧9)→a)), 3], [(((5∧6)→7)∪((8∧9)→a)), 3], [(4→5), 2]]", "logic_conclusion": "[(6∨7), 5, 4, 4, 4, 3]", "correspondance": [{"0": "KiKi does not jump .", "1": "KiKi does not have legs .", "2": "KiKi is terricolous .", "3": "KiKi has legs .", "4": "KiKi does not jump .", "5": "KiKi does not have legs .", "6": "KiKi is terricolous .", "7": "KiKi has legs ."}, {"0": "X is an animal", "1": "X is terricolous .", "2": "X has legs .", "3": "KiKi is terricolous .", "4": "KiKi has legs .", "5": "KiKi has legs .", "6": "KiKi is an animal", "7": "KiKi is terricolous .", "8": "KiKi has legs ."}, {"0": "X is an animal", "1": "X has legs .", "2": "X jumps .", "3": "KiKi has legs .", "4": "KiKi jumps .", "5": "KiKi is an animal", "6": "KiKi has legs .", "7": "KiKi jumps ."}, {"0": "X is an animal", "1": "X jumps .", "2": "Jane likes X .", "3": "KiKi jumps .", "4": "Jane likes KiKi .", "5": "KiKi is an animal", "6": "KiKi jumps .", "7": "Jane likes KiKi .", "8": "Jane is an animal", "9": "Jane jumps .", "a": "Jane likes Jane ."}, {"0": "X is an animal", "1": "X barks .", "2": "Jane does not like X .", "3": "Jane likes KiKi .", "4": "KiKi does not bark .", "5": "KiKi is an animal", "6": "KiKi barks .", "7": "Jane does not like KiKi .", "8": "Jane is an animal", "9": "Jane barks .", "a": "Jane does not like Jane ."}, {"0": "X is a dog .", "1": "X is an animal that barks .", "2": "KiKi does not bark .", "3": "KiKi is not a dog .", "4": "KiKi is a dog .", "5": "KiKi is an animal that barks ."}], "errors": [[]], "entailments_dict": [{"5": ["1", "(¬3)"], "4": ["0"], "2": ["6"], "3": ["7", "(¬5)"], "7": ["(¬5)"], "(¬7)": ["1", "5"]}, {"3": ["7"], "8": ["4", "5"], "5": ["4"], "4": ["5"]}, {"7": ["3", "4"], "3": ["6"], "4": ["6", "3"]}, {"3": ["6"], "7": ["4"]}, {"7": ["(¬3)"], "3": ["(¬7)"], "(¬4)": ["6"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}], "predicted_steps": [true, false, false, false, false, true]}
{"text": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that KiKi neither barks nor is a dog?", "id": "198", "ground_truth": "True", "reasoning": "Premise 1.1: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nPremise 1.2: KiKi neither jumps nor has legs.\nConclusion 1: KiKi is terricolous or has legs.\nPremise 2.1: If an animal is terricolous, then it has legs.\nPremise 2.2: KiKi is terricolous or has legs.\nConclusion 2: KiKi has legs.\nPremise 3.1: If an animal has legs, then it jumps.\nPremise 3.2: KiKi has legs.\nConclusion 3: KiKi jumps.\nPremise 4.1: If an animal jumps, then Jane likes it.\nPremise 4.2: KiKi jumps.\nConclusion 4: Jane likes KiKi.\nPremise 5.1: If an animal barks, then Jane does not like it.\nPremise 5.2: Jane likes KiKi.\nConclusion 5: KiKi does not bark.\nPremise 6.1: All dogs are animals that bark.\nPremise 6.2: KiKi does not bark.\nConclusion 6: KiKi is not a dog.\nPremise 7.1: KiKi does not bark.\nPremise 7.2: KiKi is not a dog.\nAnswer: A. Yes", "logic_premises": "[[((0∧1)→(2∨3)), (4∧5)], [((6∧7)→8), (3∨4)], [((5∧6)→7), 3], [(((5∧6)→7)∪((8∧9)→a)), 3], [(((5∧6)→7)∪((8∧9)→a)), 3], [(4→5), 2]]", "logic_conclusion": "[(6∨7), 5, 4, 4, 4, 3]", "correspondance": [{"0": "KiKi does not jump .", "1": "KiKi does not have legs .", "2": "KiKi is terricolous .", "3": "KiKi has legs .", "4": "KiKi does not jump .", "5": "KiKi does not have legs .", "6": "KiKi is terricolous .", "7": "KiKi has legs ."}, {"0": "X is an animal", "1": "X is terricolous .", "2": "X has legs .", "3": "KiKi is terricolous .", "4": "KiKi has legs .", "5": "KiKi has legs .", "6": "KiKi is an animal", "7": "KiKi is terricolous .", "8": "KiKi has legs ."}, {"0": "X is an animal", "1": "X has legs .", "2": "X jumps .", "3": "KiKi has legs .", "4": "KiKi jumps .", "5": "KiKi is an animal", "6": "KiKi has legs .", "7": "KiKi jumps ."}, {"0": "X is an animal", "1": "X jumps .", "2": "Jane likes X .", "3": "KiKi jumps .", "4": "Jane likes KiKi .", "5": "KiKi is an animal", "6": "KiKi jumps .", "7": "Jane likes KiKi .", "8": "Jane is an animal", "9": "Jane jumps .", "a": "Jane likes Jane ."}, {"0": "X is an animal", "1": "X barks .", "2": "Jane does not like X .", "3": "Jane likes KiKi .", "4": "KiKi does not bark .", "5": "KiKi is an animal", "6": "KiKi barks .", "7": "Jane does not like KiKi .", "8": "Jane is an animal", "9": "Jane barks .", "a": "Jane does not like Jane ."}, {"0": "X is a dog .", "1": "X is an animal that barks .", "2": "KiKi does not bark .", "3": "KiKi is not a dog .", "4": "KiKi is a dog .", "5": "KiKi is an animal that barks ."}], "errors": [[]], "entailments_dict": [{"5": ["1", "(¬3)"], "4": ["0"], "2": ["6"], "3": ["7", "(¬5)"], "7": ["(¬5)"], "(¬7)": ["1", "5"]}, {"3": ["7"], "8": ["4", "5"], "5": ["4"], "4": ["5"]}, {"7": ["3", "4"], "3": ["6"], "4": ["6", "3"]}, {"3": ["6"], "7": ["4"]}, {"7": ["(¬3)"], "3": ["(¬7)"], "(¬4)": ["6"]}, {"5": ["(¬2)"], "2": ["(¬5)"], "(¬3)": ["4"]}], "predicted_steps": [true, false, false, false, false, true]}
{"text": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that No one playing for Nautico is Brazilian?", "id": "199", "ground_truth": "False", "reasoning": "Premise 1.1: Ailton Silva is a Brazillian footballer who plays for Nautico.\nConclusion 1: There is at least one Brazilian playing for Nautico, namely Ailton Silva.\nPremise 2.1: There is at least one Brazilian playing for Nautico, namely Ailton Silva.\nAnswer: B. No", "logic_premises": "[[0]]", "logic_conclusion": "[1]", "correspondance": [{"0": "Ailton Silva is a Brazillian footballer who plays for Nautico .", "1": "There is at least one Brazilian playing for Nautico , namely Ailton Silva ."}], "errors": [[]], "entailments_dict": [{"1": ["0"], "0": ["1"], "(¬1)": ["0"]}], "predicted_steps": [true]}
{"text": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ailton Silva foes not play for a football club?", "id": "200", "ground_truth": "False", "reasoning": "Premise 1.1: Ailton Silva is a Brazillian footballer who plays for Nautico.\nConclusion 1: Ailton Silva plays for a football club (Nautico).\nPremise 2.1: Ailton Silva plays for a football club (Nautico).\nAnswer: B. No", "logic_premises": "[[0]]", "logic_conclusion": "[1]", "correspondance": [{"0": "Ailton Silva is a Brazillian footballer who plays for Nautico .", "1": "Ailton Silva plays for a football club ."}], "errors": [[]], "entailments_dict": [{"0": ["1"]}], "predicted_steps": [true]}
{"text": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ailton was not loaned out to a football club?", "id": "201", "ground_truth": "False", "reasoning": "Premise 1.1: Ailton is a football player who was loaned out to Braga.\nPremise 1.2: Braga is a football club.\nConclusion 1: Ailton was loaned out to a football club.\nPremise 2.1: Ailton was loaned out to a football club.\nAnswer: B. No", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "Ailton is a football player who was loaned out to Braga .", "1": "Braga is a football club .", "2": "Ailton was loaned out to Braga ."}], "errors": [[]], "entailments_dict": [{"0": ["1", "2"], "2": ["0", "1"], "(¬2)": ["1"], "(¬0)": ["1"]}], "predicted_steps": [true]}
{"text": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ailton Silva played for Fluminense?", "id": "202", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Ailton Silva is a Brazillian footballer who plays for Nautico.\nPremise 1.2: There is no mention of Fluminense in relation to Ailton Silva.\nConclusion 1: There is no information that suggests Ailton Silva played for Fluminense.\nAnswer: C. Uncertain.", "logic_premises": "[[0, ((5→6)∪((7→8)∪((9→a)∪(b→c))))]]", "logic_conclusion": "[((d→e)∪((f→g)∪((h→i)∪(j→k))))]", "correspondance": [{"0": "Ailton Silva is a Brazillian footballer who plays for Nautico .", "1": "X is a mention of Fluminense in relation to Ailton Silva .", "2": "There is not X .", "3": "X is an information that suggests Ailton Silva played for Fluminense .", "4": "There is not X .", "5": "Nautico is a mention of Fluminense in relation to Ailton Silva .", "6": "There is not Nautico .", "7": "Ailton Silva played for Fluminense is a mention of Fluminense in relation to Ailton Silva .", "8": "There is not Ailton Silva played for Fluminense .", "9": "Fluminense is a mention of Fluminense in relation to Ailton Silva .", "a": "There is not Fluminense .", "b": "Ailton Silva is a mention of Fluminense in relation to Ailton Silva .", "c": "There is not Ailton Silva .", "d": "Nautico is an information that suggests Ailton Silva played for Fluminense .", "e": "There is not Nautico .", "f": "Ailton Silva played for Fluminense is an information that suggests Ailton Silva played for Fluminense .", "g": "There is not Ailton Silva played for Fluminense .", "h": "Fluminense is an information that suggests Ailton Silva played for Fluminense .", "i": "There is not Fluminense .", "j": "Ailton Silva is an information that suggests Ailton Silva played for Fluminense .", "k": "There is not Ailton Silva ."}], "errors": [[]], "entailments_dict": [{"0": ["7", "9", "(¬a)", "(¬6)", "(¬c)", "(¬8)"], "j": ["7", "9", "b", "(¬a)", "(¬6)", "(¬8)", "(¬c)"], "f": ["7", "9", "b", "(¬a)", "(¬8)", "(¬c)"], "d": ["0", "7", "9", "b", "5", "(¬a)", "(¬6)", "(¬8)", "(¬c)"], "h": ["7", "9", "b", "(¬a)", "(¬6)", "(¬8)", "(¬c)"], "a": ["i", "(¬0)"], "6": ["e", "(¬0)"], "8": ["k", "g", "(¬0)"], "c": ["k", "(¬0)"], "(¬k)": ["7"], "(¬g)": ["7", "9", "b"], "(¬i)": ["7", "b"], "(¬e)": ["7"], "(¬7)": ["0"], "(¬0)": ["7"]}], "predicted_steps": ["Contradiction in the premises"]}
{"text": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.", "options": ["Yes", "No", "Uncertain"], "question": "Is it true that Ailton Silva was loaned out to a football club?", "id": "203", "ground_truth": "Uncertain", "reasoning": "Premise 1.1: Ailton Silva is a football player who was loaned out to Braga.\nPremise 1.2: Braga is a football club.\nConclusion 1: Ailton Silva was loaned out to a football club.\nPremise 2.1: Ailton Silva was loaned out to a football club.\nAnswer: A. Yes", "logic_premises": "[[0, 1]]", "logic_conclusion": "[2]", "correspondance": [{"0": "Ailton Silva is a football player who was loaned out to Braga .", "1": "Braga is a football club .", "2": "Ailton Silva was loaned out to Braga ."}], "errors": [[]], "entailments_dict": [{"0": ["1", "2"], "2": ["0", "1"], "(¬2)": ["1"], "(¬0)": ["1"]}], "predicted_steps": [true]}
